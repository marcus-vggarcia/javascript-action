[
  {
    "title": "Hola",
    "type": 0,
    "sectionRef": "#",
    "url": "blog/2019/05/28/hola",
    "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
  },
  {
    "title": "Hello",
    "type": 0,
    "sectionRef": "#",
    "url": "blog/2019/05/29/hello-world",
    "content": "Welcome to this blog. This blog is created with Docusaurus 2 alpha.This is a test post.A whole bunch of other information."
  },
  {
    "title": "Welcome",
    "type": 0,
    "sectionRef": "#",
    "url": "blog/2019/05/30/welcome",
    "content": "Blog features are powered by the blog plugin. Simply add files to the blog directory. It supports tags as well!Delete the whole directory if you don't want the blog features. As simple as that!"
  },
  {
    "title": "EBANX Magento Plugin#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin",
    "content": "",
    "keywords": "Magento"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#product-overview",
    "content": "The EBANX Magento Plugin is a quick and easy way to seemlessly integrate your Magento store and process payments through EBANX. You'll be able to create orders and request refunds ,without ever having to leave the Magento environment, and choose which payment methods are displayed at checkout. Additionally, customers will have access to one-click purchases by saving their credit card information.  "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#who-is-this-for",
    "content": "EBANX Magento Plugin is the best option if you have a Magento store and are looking to quickly start selling in Latin America. "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With our Magento Plugin, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Cash/voucher payment Rapipago, Pagofacil; Alternative methods Online Debit, Bank transfer; Additional features Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Additional features Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Additional features Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Alternative methods SPEI; Additional features Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Cash/voucher payment PagoEfectivo, SafetyPay; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about these payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Restrictions",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#restrictions",
    "content": "Please note that the EBANX Magento Plugin does not support 3DS 2.0 Authentication. "
  },
  {
    "title": "Still have doubts?",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#still-have-doubts",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "What's next?",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#whats-next",
    "content": "Request an accountIntegration guide for Magento Plugin "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "EBANX Magento Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento-plugin#how-it-works",
    "content": " Customer proceeds to checkout in Merchant Magento website and fills in payment data;Magento Server sends a payment request to EBANX;EBANX processes the payment and returns it to Merchant Magento website;After the payment response, Magento server returns the status of the payment to the customer. "
  },
  {
    "title": "EBANX Magento 2 Plugin#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin",
    "content": "",
    "keywords": "Magento 2"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#product-overview",
    "content": "The EBANX Magento 2 Plugin is a quick and easy way to seemlessly integrate your Magento 2 store and process payments through EBANX. You'll be able to create orders and request refunds ,without ever having to leave the Magento 2 environment, and choose which payment methods are displayed at checkout. Additionally, customers will have access to one-click purchases by saving their credit card information.  "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#who-is-this-for",
    "content": "EBANX Magento 2 Plugin is the best option if you have a Magento 2 store and are looking to quickly start selling in Latin America. "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With our Magento 2 Plugin, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Additional features Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Additional features Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Additional features Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Additional features Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Cash/voucher payment PagoEfectivo, SafetyPay; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about these payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Restrictions",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#restrictions",
    "content": "Please note that the EBANX Magento 2 Plugin does not support 3DS 2.0 Authentication. "
  },
  {
    "title": "Still have doubts?",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#still-have-doubts",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "What's next?",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#whats-next",
    "content": "Request an accountIntegration guide for Magento 2 Plugin "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "EBANX Magento 2 Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-magento2-plugin#how-it-works",
    "content": " Customer proceeds to checkout in Merchant Magento 2 website and fills in payment data;Magento 2 Server sends a payment request to EBANX;EBANX processes the payment and returns it to Merchant Magento 2 website;After the payment response, Magento 2 server returns the status of the payment to the customer. "
  },
  {
    "title": "EBANX Shopify Plugin#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin",
    "content": "",
    "keywords": "Shopify"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#product-overview",
    "content": "Shopify is an e-commerce platform where you can easily put up an online store. By using it, you can select a wide variety of ways to offer your products to your targeted customers and promote your brand, on an easy to use and custom platform.. The EBANX Shopify Plugin is a quick and easy way to seemlessly integrate your Shopify store and process payments through EBANX. You'll be able to create orders and request refunds directly in Shopify's administrative panel, without needing any other integration or plugin. Additionally, the EBANX Shopify Plugin feeds data to both Facebook Pixel and Google Analytics allowing for better ads management.  Another key feature is Transparent Checkout, a game-changer for merchants operating in Latin America using Shopify’s platform, enabling them to sell in the way that people in our region most like to do it: feeling safe. With a seamless checkout solution you’ll be able to achieve higher payment conversion rates and less checkout abandonment rate.  "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#who-is-this-for",
    "content": "EBANX Shopify Plugin is the best option if you have a Shopify store and are looking to quickly start selling in Latin America. "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With our Shopify Plugin, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Cash/voucher payment Rapipago, Pagofacil; Alternative methods Online Debit, Bank transfer; Additional features Redirect Checkout, Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Debit cards Visa, Master, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Digital Wallets Mercado Pago, Paypal; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Transparent Checkout & Redirect Checkout, Debit with 3DS 2.0, Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Cash/voucher payment Multicaja, Servipag, Sencillito; Alternative methods Multicaja, Servipag; Additional features Redirect Checkout, Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master, AMEX, Diners; Cash/voucher payment Baloto; Alternative methods PSE; Additional features Transparent Checkout & Redirect Checkout, Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇪🇨 Ecuador Cash/voucher payment Safety Pay; Additional features Redirect Checkout; Get to know more To know more about Ecuadorian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Alternative methods SPEI; Additional features Transparent Checkout & Redirect Checkout, Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Additional features Redirect Checkout; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about these payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Restrictions",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#restrictions",
    "content": "Transparent checkout transactions can not be processed in EUR. "
  },
  {
    "title": "Still have doubts?",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#still-have-doubts",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "What's next?",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#whats-next",
    "content": "Request an accountIntegration guide for Shopify Plugin "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "EBANX Shopify Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-shopify-plugin#how-it-works",
    "content": " Customer proceeds to checkout in Merchant Shopify website and fills in payment data;Shopify Server sends a payment request to EBANX;EBANX processes the payment and returns it to Merchant Shopify website;After the payment response, Shopify server returns the status of the payment to the customer. "
  },
  {
    "title": "EBANX WooCommerce Plugin#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin",
    "content": "",
    "keywords": "WooCommerce"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#product-overview",
    "content": "The EBANX WooCommerce Plugin is a quick and easy way to seemlessly integrate your WooCommerce store and process payments through EBANX. You'll be able to create orders and request refunds directly in WooCommerce, without needing any other integration or plugin and choose which payment methods are displayed at checkout. Additionally, customers will have access to one-click purchases by saving their credit card information.  "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#who-is-this-for",
    "content": "EBANX WooCommerce Plugin is the best option if you have a WooCommerce store and are looking to quickly start selling in Latin America. "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With our WooCommerce Plugin, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Cash/voucher payment Rapipago, Pagofacil; Alternative methods Online Debit, Bank transfer; Additional features Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Cash/voucher payment Multicaja, Servipag, Sencillito; Alternative methods Multicaja, Servipag; Additional features Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master, AMEX, Diners; Cash/voucher payment Baloto, Efecty; Alternative methods PSE; Additional features Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇪🇨 Ecuador Cash/voucher payment Safety Pay; Get to know more To know more about Ecuadorian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Alternative methods SPEI; Additional features Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Cash/voucher payment PagoEfectivo, SafetyPay; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about these payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Restrictions",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#restrictions",
    "content": "Please note that the EBANX WooCommerce Plugin does not support 3DS 2.0 Authentication. "
  },
  {
    "title": "Still have doubts?",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#still-have-doubts",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "What's next?",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#whats-next",
    "content": "Request an accountIntegration guide for WooCommerce Plugin "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "EBANX WooCommerce Plugin#",
    "url": "docs/get-started/integration-methods/plugins/ebanx-woocommerce-plugin#how-it-works",
    "content": " Customer proceeds to checkout in Merchant WooCommerce website and fills in payment data;WooCommerce Server sends a payment request to EBANX;EBANX processes the payment and returns it to Merchant WooCommerce website;After the payment response, WooCommerce server returns the status of the payment to the customer. "
  },
  {
    "title": "Verifying a Card#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/integration/guides/verify-card",
    "content": "",
    "keywords": "Verify Card"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#about-this-guide",
    "content": "This guide quickly demonstrates how to verify ifa card is able to accept payments. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#how-it-works",
    "content": "Card Verification provides a way to ensure that the given card information is valid and has no restrictions on the issuer. This is particularly useful for charges made after a free trial. The verification can be done in two ways:  Special verification transaction with no amount charged (Zero Dollar Transaction);Charge authorization of a unitary amount in local currency followed by a cancellation (the authorization will never be captured) (Ghost Authorization); infoEBANX will decide which method will be used according to availability. The first method depends on the support of acquirers and issuers. If it's not available, the second one is used.  Make sure you have the necessary fields You will need to provide the following fields to perform a card verification: Parameter Description integration_key Your unique and secret integration key. payment_type_code The card transaction type to verify. It can be &quot;creditcard&quot; or &quot;debitcard&quot;. country The two-letter country of the transaction. The available countries for now are &quot;br&quot; (Brazil), &quot;co&quot; (Colombia) and &quot;cl&quot; (Chile). device_id The unique identification of a customer&#x2019;s device. card.card_number The card number. card.card_name The cardholder name, as written in the plastic. card.card_due_date The card valid thru date (formatted as mm/yyyy). card.card_cvv The card verification value (CVV, CVV2 or CVC). Verify the card using the /ws/verifycard end-point Call the /ws/verifycard, passing the information collected in the previous step. Sample request body: Copy { &quot;integration_key&quot; : &quot;xxxxxxxxx&quot; , &quot;country&quot; : &quot;br&quot; , &quot;payment_type_code&quot; : &quot;debitcard&quot; , &quot;device_id&quot; : &quot;34c376b2767&quot; , &quot;card&quot; : { &quot;card_number&quot; : &quot;1111111111111111&quot; , &quot;card_name&quot; : &quot;JAMES BOND&quot; , &quot;card_due_date&quot; : &quot;01/2020&quot; , &quot;card_cvv&quot; : &quot;111&quot; } } A successful verification will return the following response: Sample response body: Copy { &quot;status&quot; : &quot;SUCCESS&quot; , &quot;payment_type_code&quot; : &quot;creditcard&quot; , &quot;card_verification&quot; : { &quot;transaction_status&quot; : { &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Accepted&quot; } , &quot;transaction_type&quot; : &quot;ZERO DOLLAR&quot; } }  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Make sure you have the necessary fields",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#undefined",
    "content": "You will need to provide the following fields to perform a card verification:  Parameter Description integration_key Your unique and secret integration key. payment_type_code The card transaction type to verify. It can be &quot;creditcard&quot; or &quot;debitcard&quot;. country The two-letter country of the transaction. The available countries for now are &quot;br&quot; (Brazil), &quot;co&quot; (Colombia) and &quot;cl&quot; (Chile). device_id The unique identification of a customer&#x2019;s device. card.card_number The card number. card.card_name The cardholder name, as written in the plastic. card.card_due_date The card valid thru date (formatted as mm/yyyy). card.card_cvv The card verification value (CVV, CVV2 or CVC).  "
  },
  {
    "title": "Verify the card using the /ws/verifycard end-point",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#undefined",
    "content": "Call the /ws/verifycard, passing the information collected in the previous step. Sample request body: Copy{ \"integration_key\": \"xxxxxxxxx\", \"country\": \"br\", \"payment_type_code\": \"debitcard\", \"device_id\": \"34c376b2767\", \"card\": { \"card_number\": \"1111111111111111\", \"card_name\": \"JAMES BOND\", \"card_due_date\": \"01/2020\", \"card_cvv\": \"111\" }} A successful verification will return the following response: Sample response body: Copy{ \"status\": \"SUCCESS\", \"payment_type_code\": \"creditcard\", \"card_verification\": { \"transaction_status\": { \"code\": \"OK\", \"description\": \"Accepted\" }, \"transaction_type\": \"ZERO DOLLAR\" }} "
  },
  {
    "title": "Verifying a card when generating a token",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#verifying-a-card-when-generating-a-token",
    "content": "The card verification can also be performed during a token creation. Charges made with tokens created with verified cards should provide better approval rates compared with charges made with regular unverified tokens. ImportantIf a token operation is requested with the card verification flag on, no token is created if verification results in card not eligible.  Make sure you have the necessary fields Please check the Tokenization guide here for other token operation parameters documentation. In addition the the parameter in the ws/token/ end-point, you must send the following parameter: Parameter Description verify_card Set to true to perform card verification before the token creation. Verify the card using the /ws/token end-point Call the /ws/token, passing the information collected in the previous step. Sample request body: Copy { &quot;integration_key&quot; : &quot;xxxxxxxxx&quot; , &quot;country&quot; : &quot;br&quot; , &quot;payment_type_code&quot; : &quot;creditcard&quot; , &quot;verify_card&quot; : true , &quot;card&quot; : { &quot;card_number&quot; : &quot;1111111111111111&quot; , &quot;card_name&quot; : &quot;JAMES BOND&quot; , &quot;card_due_date&quot; : &quot;01/2020&quot; , &quot;card_cvv&quot; : &quot;111&quot; } } A successful call for an eligible card will have the following response: Copy { &quot;status&quot; : &quot;SUCCESS&quot; , &quot;payment_type_code&quot; : &quot;creditcard&quot; , &quot;token&quot; : &quot;abcdef123456abcdef123456&quot; , &quot;masked_card_number&quot; : &quot;111111xxxxxx1111&quot; , &quot;card_verification&quot; : { &quot;transaction_status&quot; : { &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Accepted&quot; } , &quot;transaction_type&quot; : &quot;ZERO DOLLAR&quot; } } A successful call for a non eligible card will have the following response: Copy { &quot;status&quot; : &quot;SUCCESS&quot; , &quot;payment_type_code&quot; : &quot;creditcard&quot; , &quot;token&quot; : null , &quot;masked_card_number&quot; : &quot;111111xxxxxx1111&quot; , &quot;card_verification&quot; : { &quot;transaction_status&quot; : { &quot;code&quot; : &quot;NOK&quot; , &quot;description&quot; : &quot;Not accepted&quot; } , &quot;transaction_type&quot; : &quot;ZERO DOLLAR&quot; } }  "
  },
  {
    "title": "Make sure you have the necessary fields",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#undefined",
    "content": "Please check the Tokenization guide here for other token operation parameters documentation. In addition the the parameter in the ws/token/ end-point, you must send the following parameter:  Parameter Description verify_card Set to true to perform card verification before the token creation.  "
  },
  {
    "title": "Verify the card using the /ws/token end-point",
    "type": 1,
    "pageTitle": "Verifying a Card#",
    "url": "docs/integration/guides/verify-card#undefined",
    "content": "Call the /ws/token, passing the information collected in the previous step. Sample request body: Copy{ \"integration_key\": \"xxxxxxxxx\", \"country\": \"br\", \"payment_type_code\": \"creditcard\", \"verify_card\": true, \"card\": { \"card_number\": \"1111111111111111\", \"card_name\": \"JAMES BOND\", \"card_due_date\": \"01/2020\", \"card_cvv\": \"111\" }} A successful call for an eligible card will have the following response: Copy{ \"status\": \"SUCCESS\", \"payment_type_code\": \"creditcard\", \"token\": \"abcdef123456abcdef123456\", \"masked_card_number\": \"111111xxxxxx1111\", \"card_verification\": { \"transaction_status\": { \"code\": \"OK\", \"description\": \"Accepted\" }, \"transaction_type\": \"ZERO DOLLAR\" }} A successful call for a non eligible card will have the following response: Copy{ \"status\": \"SUCCESS\", \"payment_type_code\": \"creditcard\", \"token\": null, \"masked_card_number\": \"111111xxxxxx1111\", \"card_verification\": { \"transaction_status\": { \"code\": \"NOK\", \"description\": \"Not accepted\" }, \"transaction_type\": \"ZERO DOLLAR\" }}  "
  },
  {
    "title": "EBANX.js#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/integration/libraries/ebanx-js",
    "content": "",
    "keywords": "EBANX Cross-border"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "EBANX.js#",
    "url": "docs/integration/libraries/ebanx-js#product-overview",
    "content": "EBANX.js offers a set of functionalities that makes validating common fields, generating important transaction information and properly sending data to your server easier and smoother. With EBANX.js, you'll have access to features such as document validation, credit card token generation and much more!  One of the main reasons to use LIB JS is that you don’t have to worry about storing and securing cardholder data. According to PCI DSS requirements, you must restrict access and protect stored cardholder data. Through EBANX.js, the customer will inform their creditcard data and our servers will generate a token for this creditcard, so you don’t have to store any sensitive data. This token will be used for the whole request. Check all the features available on EBANX.js below! "
  },
  {
    "title": "Installation",
    "type": 1,
    "pageTitle": "EBANX.js#",
    "url": "docs/integration/libraries/ebanx-js#installation",
    "content": "With CDN: Copy<script src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script> "
  },
  {
    "title": "Initialization",
    "type": 1,
    "pageTitle": "EBANX.js#",
    "url": "docs/integration/libraries/ebanx-js#initialization",
    "content": "Initializing EBANX.js requires the following fields: CopyEBANX.init({ publicIntegrationKey: \"pk_43234234\", country: 'br', mode: \"test\",}); Options  Field Description integration_key The merchant&apos;s public integration key country The customer&apos;s country mode Choice between test and production  "
  },
  {
    "title": "Available features",
    "type": 1,
    "pageTitle": "EBANX.js#",
    "url": "docs/integration/libraries/ebanx-js#available-features",
    "content": "EBANX.js offers the following features: Card Tokenization Quick Overview#Card tokenization allows you to pass on all the necessary information to conclude a payment without having to send clear credit card data over to your server. This is a key feature of EBANX.js that allows the merchant to operate without having to be PCI compliant.For more details on how to use this feature, click here!  Device Fingerprint Quick Overview#Quickly obtain a device ID that can be passed to your payment request. This is a very useful information that anti-fraud tools can make use to detect malicious payment activities.For more details on how to use this feature, click here!  3D Secure 2.0 Quick Overview#3D Secure, or 3DS, is a technical standard that adds a layer of security in online credit and debit card transactions, protecting the buyer's against unauthorised use. During the checkout process, if the cardholder is enrolled in 3D Secure, the issuing bank will decide whether the cardholder's identity can be verified using data supplied regarding the cardholder and their device, or if an additional authentication process is necessary.For more details on how to use this feature, click here!  Utils Quick Overview#A set of utilities to help you validate the data fields provided by your customer. EBANX.js currently offers:Document ID Validation  Reference Data Quick Overview#A set of functions to help you list and validate standard fields, such as states in a country. This allows you to make sure that the values being provided to your payment request are the ones expected by our API. EBANX.js currently offers:States by Country  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "EBANX.js#",
    "url": "docs/integration/libraries/ebanx-js#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "LIB JS",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/integration/libraries/libjs",
    "content": "",
    "keywords": "EBANX Cross-border,Javascript,SDK"
  },
  {
    "title": "How does EBANX JS works?",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#how-does-ebanx-js-works",
    "content": ""
  },
  {
    "title": "Request Token",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#request-token",
    "content": "A request will be made from customer’s browser to EBANX server, sending the customer creditcard data to generate a token that represents the customer credit card information. The token will be returned to the customer to continue the request. "
  },
  {
    "title": "Request Payment",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#request-payment",
    "content": "Once the token is received, the form with the payment details will be submitted to our API, which will create the payment. The diagram below show the flow of the operation.  Why use LIB JS One of the main reasons to use LIB JS is that you don’t have to worry about storing and securing cardholder data. According to PCI DSS requirements, you must restrict access and protect stored cardholder data. Through LIB JS, the customer will inform their creditcard data and our servers will generate a token for this creditcard, so you don’t have to store any sensitive data. This token will be used for the whole request. "
  },
  {
    "title": "How to use EBANX JS",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#how-to-use-ebanx-js",
    "content": ""
  },
  {
    "title": "Contact",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#contact",
    "content": "If you have any doubts or need help, you can send and email to: EBANX Integration "
  },
  {
    "title": "Customer Data",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#customer-data",
    "content": "The customer will inform their creditcard data through your store page. This data will be used by EBANX to generate a token. Using LIB js, the request will be made directly from customer’s browser to EBANX server. Meaning that customer’s credit card information will not be stored in Merchant’s server. "
  },
  {
    "title": "Script",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#script",
    "content": "Add this script to your page: <script type=\"text/javascript\" src=\"https://js.ebanx.com/ebanx-libjs-latest.min.js\"></script> "
  },
  {
    "title": "Config",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#config",
    "content": "CopyEBANX.config.setMode('test'); // Set mode. production/testEBANX.config.setPublishableKey('put your key here'); // Set your Publishable key. To identify your site to EBANX API you must start by providing your [publishable key](https://ebxdevelopers2.wpengine.com/merchant-area/merchant-options).EBANX.config.setCountry('br'); // Set your checkout country (see: https://en.wikipedia.org/wiki/ISO_3166-1). "
  },
  {
    "title": "card.createToken",
    "type": 1,
    "pageTitle": "LIB JS",
    "url": "docs/integration/libraries/libjs#cardcreatetoken",
    "content": "The following is an example of action to create a single use token, used to pass credit-card information to your server in a safe way. Copyvar createTokenCallback = function(ebanxResponse) {if (ebanxResponse.data.hasOwnProperty('status')) {document.getElementById('status').textContent = 'Success, the token is: ' + ebanxResponse.data.token;} else {var errorMessage = ebanxResponse.error.err.status_message || ebanxResponse.error.err.message;document.getElementById('status').textContent = 'Error ' + errorMessage;}} EBANX.card.createToken({card_number: document.getElementById('card-number').value,card_name: document.getElementById('card-name').value,card_due_date: document.getElementById('card-due-date').value,card_cvv: document.getElementById('card-cvv').value}, createTokenCallback); "
  },
  {
    "title": "EBANX Node.js",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/integration/libraries/nodejs",
    "content": "",
    "keywords": "EBANX Cross-border,Javascript,SDK,Node.js"
  },
  {
    "title": "Requirements",
    "type": 1,
    "pageTitle": "EBANX Node.js",
    "url": "docs/integration/libraries/nodejs#requirements",
    "content": "Node.js >= 0.10.x "
  },
  {
    "title": "Installation",
    "type": 1,
    "pageTitle": "EBANX Node.js",
    "url": "docs/integration/libraries/nodejs#installation",
    "content": ""
  },
  {
    "title": "Usage",
    "type": 1,
    "pageTitle": "EBANX Node.js",
    "url": "docs/integration/libraries/nodejs#usage",
    "content": "To use the EBANX NodeJS module you need to setup your integration key. Copyebanx.configure({ integrationKey : \"your-test-integration-key\"}); You can also enable or disable test mode: Copyebanx.configure({ integrationKey : \"your-production-integration-key\", testMode : false}); You can change the following settings: integrationKey: your integration key. It will be different in test and production modes.testMode: enable or disable the test mode. The default value is false. To create a new API request, just call one of the following methods on the module object and supply it with the request parameters: ebanx.cancel()ebanx.capture()ebanx.direct()ebanx.exchange()ebanx.print()ebanx.query()ebanx.refund()ebanx.refundOrCancel()ebanx.request()ebanx.token()ebanx.zipcode() request command example: Copyvar Ebanx = require('ebanx');var ebx = new Ebanx(); ebx.configure({ integrationKey : 'fd29a3b39d8f7bffa31cecfe895236ba5b43683e225f9d4de78ac3bdca7dfb184abfed285cc99d5b13813672e586f9cf9eb8', testMode : true}); var params = { 'currency_code': 'USD', 'amount': '22.00', 'name': 'Jose da Silva', 'email': 'jose@example.org', 'payment_type_code': '_all', 'merchant_payment_code': \"7c667cde1d9\"}; ebx.request(params, function(error, reply) { if(error) { console.log(error); } else { console.log(reply); }}); "
  },
  {
    "title": "Contributing",
    "type": 1,
    "pageTitle": "EBANX Node.js",
    "url": "docs/integration/libraries/nodejs#contributing",
    "content": "Help us to improve our applications! If you find a bug or wants to add some new feature, talk with us. Send a pull request to our GitHub repository. https://github.com/ebanx-integration/ebanx-nodejs "
  },
  {
    "title": "npm",
    "type": 1,
    "pageTitle": "EBANX Node.js",
    "url": "docs/integration/libraries/nodejs#npm",
    "content": "The EBANX module is available on npm, therefore you can install it by simply updating your package.json file: Copy\"dependencies\": { \"ebanx\": \"*\"} You can also install it through the command line: Copynpm install ebanx "
  },
  {
    "title": "Git Repository",
    "type": 1,
    "pageTitle": "EBANX Node.js",
    "url": "docs/integration/libraries/nodejs#git-repository",
    "content": "Clone the git repository anywhere you want and include the EBANX module autoloader from ‘index.js’. "
  },
  {
    "title": "EBANX PHP",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/integration/libraries/php",
    "content": "",
    "keywords": "EBANX Cross-border,PHP,SDK"
  },
  {
    "title": "Requirements",
    "type": 1,
    "pageTitle": "EBANX PHP",
    "url": "docs/integration/libraries/php#requirements",
    "content": "PHP >= 5.6cURL "
  },
  {
    "title": "Installation",
    "type": 1,
    "pageTitle": "EBANX PHP",
    "url": "docs/integration/libraries/php#installation",
    "content": ""
  },
  {
    "title": "Usage",
    "type": 1,
    "pageTitle": "EBANX PHP",
    "url": "docs/integration/libraries/php#usage",
    "content": "It is very simple to use Benjamin. You will only need an instance of Ebanx\\Benjamin\\Models\\Configs\\Config: If you need to change other settings, you can use the following function call: Copy$config = new Config([ //Config properties]); $ebanx = EBANX($config); Here’s an example of configuration: Copy$config = new Config([ 'integrationKey' => 'YOUR_INTEGRATION_KEY', 'sandboxIntegrationKey' => 'YOUR_SANDBOX_INTEGRATION_KEY', 'isSandbox' => true, 'baseCurrency' => Currency::USD]); You can change the following settings: integrationKey: Your integration key. This key will only be used on the live environment.sandboxIntegrationKey: Your sandbox integration key. This key will only be used on the test environment.isSandbox: Enable or disable the test mode. The default value is false.baseCurrency: The base currency of the trasaction Here’s an example of payment request: Copy$payment = new Payment([ 'type' => 'boleto', 'address' => new Address([ 'address' => 'Rua Rodrigues', 'city' => 'Vila Malena d\\'Oeste', 'country' => Country::BRAZIL, 'state' => 'MS', 'streetComplement' => 'Apto 35', 'streetNumber' => '55', 'zipcode' => '10493-222' ]), 'amountTotal' => 48.63, 'deviceId' => 'b2017154beac2625eec083a5d45d872f12dc2c57535e25aa149d3bdb57cbdeb9', 'merchantPaymentCode' => 'a6d690137e32c38db369beed8844e997', 'note' => 'Example payment.', 'person' => new Person([ 'type' => 'business', 'birthdate' => new \\DateTime('1978-03-29 08:15:51.000000 UTC'), 'document' => '40701766000118', 'email' => 'sdasneves@r7.com', 'ip' => '30.43.84.28', 'name' => 'Sr. Gustavo Fernando Valência', 'phoneNumber' => '(43) 3965-4162' ]), 'items' => [ new Item ([ 'sku' => 'S-NDI-359444', 'name' => 'consequuntur perferendis', 'description' => 'Aut aliquid quibusdam quidem neque alias aliquid culpa maxime. Totam voluptatum et fuga nesciunt expedita rerum.', 'unitPrice' => 7.19, 'quantity' => 3, 'type' => 'sed' ]), new Item ([ 'sku' => 'X-LQF-592041', 'name' => 'esse sint', 'description' => 'Eligendi error iusto et ut. Cupiditate sint ut et in vitae non.', 'unitPrice' => 9.02, 'quantity' => 3, 'type' => 'est' ]) ], 'responsible' => new Person ([ 'type' => 'personal', 'birthdate' => new \\DateTime ('1986-06-18 10:18:33 UTC'), 'document' => '38346222653', 'email' => 'alessandra.dominato@galhardo.net', 'ip' => '49.29.237.45', 'name' => 'Luana Aragão Mendes', 'phoneNumber' => '(74) 97063-8157', ]), 'dueDate' => new \\DateTime ('2017-05-20 01:47:31 UTC')]); $result = EBANX($config)->create($payment); // Type can also be explicit, like so:$result = EBANX($config)->boleto()->create($payment); Here’s an example of response: CopyArray( [payment] => Array ( [hash] => 591b803da5549b6a1bac524b31e6eef55c2e67af8e40e1e4 [pin] => 670071563 [merchant_payment_code] => 248b2672f000e293268be28d6048d600 [order_number] => null [status] => PE [status_date] => null [open_date] => 2017-05-16 19:42:05 [confirm_date] => null [transfer_date] => null [amount_br] => 48.81 [amount_ext] => 48.63 [amount_iof] => 0.18 [currency_rate] => 1.0000 [currency_ext] => BRL [due_date] => 2018-11-22 [instalments] => 1 [payment_type_code] => boleto [boleto_url] => https://sandbox.ebanxpay.com/print/?hash=591b803da5549b6a1bac524b31e6eef55c2e67af8e40e1e4 [boleto_barcode] => 34191760071244348372714245740007871600000004881 [boleto_barcode_raw] => 34198716000000048811760012443483721424574000 [pre_approved] => null [capture_available] => null [customer] => Array ( [document] => 40701766000118 [email] => sdasneves@r7.com [name] => SR GUSTAVO FERNANDO VALENCIA [birth_date] => 1978-03-28 ) ) [status] => SUCCESS) "
  },
  {
    "title": "Contributing",
    "type": 1,
    "pageTitle": "EBANX PHP",
    "url": "docs/integration/libraries/php#contributing",
    "content": "Found a bug? Want to add a new feature? Go on and send a pull request to our GitHub repository: https://github.com/ebanx/benjamin/ "
  },
  {
    "title": "Composer",
    "type": 1,
    "pageTitle": "EBANX PHP",
    "url": "docs/integration/libraries/php#composer",
    "content": "The EBANX library is available on Packagist, therefore you can install it by just updating your composer.json file: Copy{ \"require\" : { \"ebanx/benjamin\": \"^1.14.0\" }} After that run composer install, wait for it to finish. "
  },
  {
    "title": "EBANX Ruby",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/integration/libraries/ruby",
    "content": "",
    "keywords": "EBANX Cross-border,Ruby,SDK"
  },
  {
    "title": "Requirements",
    "type": 1,
    "pageTitle": "EBANX Ruby",
    "url": "docs/integration/libraries/ruby#requirements",
    "content": "Ruby >= 2.0.0 Bundler ##Installation Add this line to your application’s Gemfile, and bundle it: Copygem 'ebanx'$ bundle Or install it globally using: Copy$ gem install ebanx "
  },
  {
    "title": "Usage",
    "type": 1,
    "pageTitle": "EBANX Ruby",
    "url": "docs/integration/libraries/ruby#usage",
    "content": "To use the EBANX Ruby gem you need to setup your integration key. CopyEbanx.tap do |e| e.integration_key = 'YOUR_SANDBOX_INTEGRATION_KEY' e.test_mode = trueend You can change the following settings: integration_key: Your integration key. It will be different in test and production modes.test_mode: Enable or disable the test mode. The default value is false. To create a new API request, just call one of the following methods on the Ebanx class and supply it with the request parameters: Ebanx.do_cancelEbanx.do_captureEbanx.do_directEbanx.do_exchangeEbanx.do_printEbanx.do_queryEbanx.do_refundEbanx.do_refund_or_cancelEbanx.do_requestEbanx.do_tokenEbanx.do_zipcode do_direct command example: Copyrequire 'ebanx' Ebanx.tap do |e| e.integration_key = 'YOUR_SANDBOX_INTEGRATION_KEY' e.test_mode = trueend response = Ebanx.do_direct({ operation: 'request', mode: 'full', payment: { name: 'João da Silva', email: 'joao@example.com', currency_code: 'USD', amount_total: 100.00, merchant_payment_code: 'aca8c1d848a', payment_type_code: 'boleto', person_type: 'personal', document: '13326724691', birth_date: '01/01/1980', zipcode: '70000-000', address: 'Rua Brasil', street_number: '1', city: 'Brasília', state: 'DF', country: 'br', phone_number: '6130001111', due_date: '19/10/2016' }}) "
  },
  {
    "title": "Contributing",
    "type": 1,
    "pageTitle": "EBANX Ruby",
    "url": "docs/integration/libraries/ruby#contributing",
    "content": "Found a bug? Want to add a new feature? Go on and send a pull request to our GitHub repository: https://github.com/ebanx-integration/ebanx-ruby "
  },
  {
    "title": "Boleto | EBANX Developers Academy",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/next/brazil/boleto",
    "content": "",
    "keywords": "Boleto"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Boleto | EBANX Developers Academy",
    "url": "docs/next/brazil/boleto#about-this-guide",
    "content": "This guide quickly explains what is a Boleto, how it works and how it can be integrated into your e-commerce. We will walk you through all possible integration flows to allow you to accept Boleto payments with your EBANX integration. "
  },
  {
    "title": "What is Boleto?",
    "type": 1,
    "pageTitle": "Boleto | EBANX Developers Academy",
    "url": "docs/next/brazil/boleto#what-is-boleto",
    "content": "The boleto bancário, or boleto for short, is the preferred cash payment method in Brazil and can be either a printed or a virtual (PDF or image) voucher. Boletos are regulated by Brazilian Federation of Banks (FEBRABAN) and allow millions of Brazilian consumers to pay their bills in more than 40K different boleto processing locations around the country. The boleto will always have a barcode, corresponding serial number, transaction amount, issuing bank code, customer information, description, and expiration date. The barcode or the serial number can be used to pay the transaction amount listed on the boleto at any period leading up to the expiration date. infoWant to learn more about boleto? Check this article in EBANX Labs "
  },
  {
    "title": "How boleto works?",
    "type": 1,
    "pageTitle": "Boleto | EBANX Developers Academy",
    "url": "docs/next/brazil/boleto#how-boleto-works",
    "content": "Customer selects the Boleto Bancário as a payment method in checkout.A voucher with a barcode is generated for the customer to either print, copy the barcode number or scan it with their phone.The customer pays it in cash in over 200K locations, through internet banking or via the bank's mobile app.Payment confirmation in one business day. "
  },
  {
    "title": "Available integrations",
    "type": 1,
    "pageTitle": "Boleto | EBANX Developers Academy",
    "url": "docs/next/brazil/boleto#available-integrations",
    "content": "How would you like to get integrated with us integrate? Please, select an option below that most suits with you and check the integration steps. Direct API Integration Payment Page Integration "
  },
  {
    "title": "Pix with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/next/brazil/pix",
    "content": "",
    "keywords": "Pix"
  },
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  null,
  {
    "title": "Digital Wallet with Direct API",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/next/digital-wallets-recurring",
    "content": "",
    "keywords": "Payments in Latin America EBANX,Cross-border,Digital Wallets,e-wallets,PIX"
  },
  {
    "title": "Overview",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#overview",
    "content": "This guide will walk you through a basic API integration that accept e-wallet payments in EBANX. "
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#about-this-guide",
    "content": "By following this basic integration guide, you will understand how you can accept e-wallet payments in your ckeck-out, by using EBANX Direct API. To complete a payment with e-wallets you will, basically, need to call two of our APIs, one to check the e-wallet availability and another one to make the payment.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#what-you-will-need",
    "content": ""
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#how-it-works",
    "content": "To complete an e-wallet payment, please follow the steps below. Get the available e-walllets#E-Wallets availability may vary depending on your country and contract. So the first step is to check and get more information about the available e-wallets.Copycurl --location --request POST 'https://api.ebanx.com/ws/ewallet-availableEWallets' \\--header 'Content-Type: application/json' \\--data-raw '{ \"integration_key\":{{your_integration_key}}, \"country\":\"br\"}'This method will return you all the necessary information that you need to render e-wallets in your page, such as e-wallet name, icons and ,if available, some promotional content.To learn more about the method getAvailableEWallets, you can check our the complete API referenceUse the response to render e-wallets in your page.#Now you have everything you need to render e-wallets in your page. Below you can find an example of the ewallet-availableEWallets method response.Copy[ { \"code\": \"paypal\", \"name\": \"Paypal\", \"icon_url\": \"https://s3-sa-east-1.amazonaws.com/assets.ebanx.com/gateway/paypal/icon.png\", \"promotional_text\": \"\" }]Don't know exactly how to use it? You can use our payment page as a benchmark to render it in your check-out 😉.Call our direct API with the e-wallet payment_type_code#After getting the e-wallet code you need to use it in EBANX Direct API, as a payment_type_code.Copy{ \"integration_key\": \"*****\", \"operation\": \"request\", \"mode\": \"full\", \"payment\": { \"amount_total\": 20, \"currency_code\": \"BRL\", \"name\": \"Test Customer\", \"email\": \"test@example.com\", \"payment_type_code\": \"paypal\", \"redirect_url\": \"https://your-call-back-url.com\", \"birth_date\": \"12/04/1979\", \"document\": \"07683846953\", \"country\": \"br\", \"zipcode\": \"80330080\", \"address\": \"Rua Principal\", \"street_number\": \"15\", \"city\": \"Curitiba\", \"phone_number\": \"3199999999\", \"state\": \"PR\" }}There are two scenarios. On the first one, the response of this call will have a Pending status, \"status\": \"PE\", and a re-direct link that will be used in the next step. On this scenario, you need to proceed to Step 4.Copy { \"payment\": { \"hash\": \"5ec27f3b86fa8e3123452345626aec3989aa2ceccdb7\", \"pin\": \"237274394\", \"country\": \"br\", \"merchant_payment_code\": \"xyz-123-1001\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-05-18 12:27:38\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"20.00\", \"amount_ext\": \"20.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-05-21\", \"instalments\": \"1\", \"payment_type_code\": \"paypal\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318dd345234523553626aec3989aa2ceccdb7\"}One the second scenario, the response of this call will have either a Completed status or a Canceled, \"status\": \"CO\" or \"status\": \"CA\", and there will be no redirection. In this scenario, you can skip step 4, since your payment request is done at this point.Note that this scenario is only available for the paypal-recurring payment_type_codeCopy { \"payment\": { \"hash\": \"5ec27f3b86fa8e3123452345626aec3989aa2ceccdb7\", \"pin\": \"237274394\", \"country\": \"br\", \"merchant_payment_code\": \"xyz-123-1001\", \"order_number\": null, \"status\": \"CO\", \"status_date\": null, \"open_date\": \"2020-05-18 12:27:38\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"20.00\", \"amount_ext\": \"20.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-05-21\", \"instalments\": \"1\", \"payment_type_code\": \"paypal-recurring\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"}To learn more about the method EBANX Direct API, you can check our the complete API referenceThe e-wallet payment basically works like a voucher, as a pending payment will be generated and will be confirmed just after the customer pays it with his/her e-wallet.Redirect customer to the link#Now you just need to redirect customer to the link returned by us.Copy ... \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", ...As soon as EBANX identifies that the payment was confirmed, customer will be redirected to the callback url informed in the direct request. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#getting-help",
    "content": "If you have any doubts or need help, you can send and email to: EBANX Integration "
  },
  {
    "title": "A Sandbox Account",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#a-sandbox-account",
    "content": "As with any secure payment integration, you will first need to set up authorization. The EBANX sandbox allows you to set up a test environment to run transactions using test credit card numbers and explore our payment solutions. Sign up for an Sandbox Account at our EBANX Business Page, select your business model and answer a few questions. We'll get in touch with you shortly after! Sign up for an EBANX Sandbox Account here "
  },
  {
    "title": "Get the available e-walllets",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#get-the-available-e-walllets",
    "content": "E-Wallets availability may vary depending on your country and contract. So the first step is to check and get more information about the available e-wallets. Copycurl --location --request POST 'https://api.ebanx.com/ws/ewallet-availableEWallets' \\--header 'Content-Type: application/json' \\--data-raw '{ \"integration_key\":{{your_integration_key}}, \"country\":\"br\"}' This method will return you all the necessary information that you need to render e-wallets in your page, such as e-wallet name, icons and ,if available, some promotional content. To learn more about the method getAvailableEWallets, you can check our the complete API reference "
  },
  {
    "title": "Use the response to render e-wallets in your page.",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#use-the-response-to-render-e-wallets-in-your-page",
    "content": "Now you have everything you need to render e-wallets in your page. Below you can find an example of the ewallet-availableEWallets method response. Copy[ { \"code\": \"paypal\", \"name\": \"Paypal\", \"icon_url\": \"https://s3-sa-east-1.amazonaws.com/assets.ebanx.com/gateway/paypal/icon.png\", \"promotional_text\": \"\" }] Don't know exactly how to use it? You can use our payment page as a benchmark to render it in your check-out 😉.  "
  },
  {
    "title": "Call our direct API with the e-wallet payment_type_code",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#call-our-direct-api-with-the-e-wallet-payment_type_code",
    "content": "After getting the e-wallet code you need to use it in EBANX Direct API, as a payment_type_code. Copy{ \"integration_key\": \"*****\", \"operation\": \"request\", \"mode\": \"full\", \"payment\": { \"amount_total\": 20, \"currency_code\": \"BRL\", \"name\": \"Test Customer\", \"email\": \"test@example.com\", \"payment_type_code\": \"paypal\", \"redirect_url\": \"https://your-call-back-url.com\", \"birth_date\": \"12/04/1979\", \"document\": \"07683846953\", \"country\": \"br\", \"zipcode\": \"80330080\", \"address\": \"Rua Principal\", \"street_number\": \"15\", \"city\": \"Curitiba\", \"phone_number\": \"3199999999\", \"state\": \"PR\" }} There are two scenarios. On the first one, the response of this call will have a Pending status, \"status\": \"PE\", and a re-direct link that will be used in the next step. On this scenario, you need to proceed to Step 4. Copy { \"payment\": { \"hash\": \"5ec27f3b86fa8e3123452345626aec3989aa2ceccdb7\", \"pin\": \"237274394\", \"country\": \"br\", \"merchant_payment_code\": \"xyz-123-1001\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-05-18 12:27:38\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"20.00\", \"amount_ext\": \"20.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-05-21\", \"instalments\": \"1\", \"payment_type_code\": \"paypal\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318dd345234523553626aec3989aa2ceccdb7\"} One the second scenario, the response of this call will have either a Completed status or a Canceled, \"status\": \"CO\" or \"status\": \"CA\", and there will be no redirection. In this scenario, you can skip step 4, since your payment request is done at this point. Note that this scenario is only available for the paypal-recurring payment_type_code Copy { \"payment\": { \"hash\": \"5ec27f3b86fa8e3123452345626aec3989aa2ceccdb7\", \"pin\": \"237274394\", \"country\": \"br\", \"merchant_payment_code\": \"xyz-123-1001\", \"order_number\": null, \"status\": \"CO\", \"status_date\": null, \"open_date\": \"2020-05-18 12:27:38\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"20.00\", \"amount_ext\": \"20.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-05-21\", \"instalments\": \"1\", \"payment_type_code\": \"paypal-recurring\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} To learn more about the method EBANX Direct API, you can check our the complete API reference The e-wallet payment basically works like a voucher, as a pending payment will be generated and will be confirmed just after the customer pays it with his/her e-wallet. "
  },
  {
    "title": "Redirect customer to the link",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API",
    "url": "docs/next/digital-wallets-recurring#redirect-customer-to-the-link",
    "content": "Now you just need to redirect customer to the link returned by us. Copy ... \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", ... As soon as EBANX identifies that the payment was confirmed, customer will be redirected to the callback url informed in the direct request. "
  },
  {
    "title": "EBANX Drop-in",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/next/dropin",
    "content": "Hello world! Dropin Coming Soon!!! Really soon",
    "keywords": "EBANX Cross-border"
  },
  {
    "title": "Getting Started#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/gettingStarted",
    "content": "",
    "keywords": "Getting Started EBANX"
  },
  {
    "title": "Request your test account",
    "type": 1,
    "pageTitle": "Getting Started#",
    "url": "docs/payments/gettingStarted#request-your-test-account",
    "content": "If you don't have your testing account yet, access our EBANX Business Page , select your business model and answer a few questions. One of our Business Development Analysts will get in touch shortly. At this stage, you will have access to your test Integration keys. Only after the conclusion of your negotiation and the integration process with our team, you will receive your live integration keys. "
  },
  {
    "title": "Start your integration",
    "type": 1,
    "pageTitle": "Getting Started#",
    "url": "docs/payments/gettingStarted#start-your-integration",
    "content": "Once you have your test account, you can go over all the EBANX solutions below and decide which integration best suits your platform. If you aren't sure, don’t worry, our Business Development Analyst will guide you.  code Direct API For those who want a personalized integration and wish to control every detail of the checkout flow. shopping_cart Payment page A simple integration where you redirect your customers to our Payment Page and let us do the rest. link Payment by link With on-demand payments, you can manually generate payment links on EBANX Dashboard and send it to your customers  We also offer integration options with the following e-commerce platforms:    "
  },
  {
    "title": "Test your integration",
    "type": 1,
    "pageTitle": "Getting Started#",
    "url": "docs/payments/gettingStarted#test-your-integration",
    "content": "After getting started with tests in sandbox mode, you will need some fake customer data to complete the requests. For credit card tests, we have some test card numbers that you can use to validate both successful and failed transactions in the testing environment. If you are integrating with our EBANX Payment Page or Direct API, you can refer to our ERROR CODES page to get familiar with our error and hard decline messages. Those errors are returned from our API and they prevent a payment to be created. If you are using our Direct API, you can handle those errors, and show a more user-friendly message. When you finish your integration and your website is ready to go LIVE, you can either send a message to us through our integration form or by sending an email to integration@ebanx.com requesting to certify your site. In this message, please include your company name and the website URL used to integrate with EBANX. Once we receive this data, we will validate and do some additional verification. In case it has password protection, please send us the credentials as well. Once EBANX has certified your website’s integration, you will receive an email with your production (also known as live) integration key. After receiving this key, you need to follow these instructions before finishing up the setup: Replace the test key with the production key.Define your production parameters (response_url and notification_url) on EBANX Dashboard.Replace the URL prefix in every web service call – from https://sandbox.ebanxpay.com to https://api.ebanxpay.com. Is everything done? Now you are LIVE and ready to start processing with us. cautionNote: The production integration key is a confidential sequence of numbers and letters that are unique and identify you as our Merchant. So, take good care of it. "
  },
  {
    "title": "Cupon de Pagos with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon",
    "content": "",
    "keywords": "Cupon de Pagos Cash Payment Argentina"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#about-this-guide",
    "content": "This page explains how to add Cupon de Pagos to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Cupon de Pagos enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#how-it-works",
    "content": "To complete Cupon de Pagos integration throught EBANX Direct API, please follow the steps below.  Enable Cupon de Pagos Cupon de Pagos availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Cupon de Pagos link (server-side) Cupon de Pagos works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Cupon de Pagos must be cupon country Two-letter country code - ar for Argentina. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number birth_date Customer birth date zipcode Customer Zipcode address Customer address street_number Customer street number city Customer city state Customer two-letter state code Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: ARS and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;random@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;ar&quot;, &quot;document&quot;: &quot;23876543214&quot;, &quot;birth_date&quot;: &quot;11/08/1988&quot;, &quot;zipcode&quot;: &quot;15796&quot;, &quot;address&quot;: &quot;Boulevard Jorde&quot;, &quot;street_number&quot;: &quot;555&quot;, &quot;city&quot;: &quot;Moreno&quot;, &quot;state&quot;: &quot;BA&quot;, &quot;payment_type_code&quot;: &quot;cupon&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-AR-T05&quot;, &quot;currency_code&quot;: &quot;ARS&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efd14acce3c6256ad931f7978def9fa78d8c2921385f866&quot; , &quot;pin&quot; : &quot;006844097&quot; , &quot;country&quot; : &quot;ar&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-AR-T05&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 22:56:43&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;121.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;ARS&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;cupon&quot; , &quot;voucher_url&quot; : &quot;https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efd14acce3c6256ad931f7978def9fa78d8c2921385f866&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter voucher_url . After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Cupon de Pagos",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#undefined",
    "content": "Cupon de Pagos availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Cupon de Pagos link (server-side)",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#undefined",
    "content": "Cupon de Pagos works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Cupon de Pagos must be cupon country Two-letter country code - ar for Argentina. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number birth_date Customer birth date zipcode Customer Zipcode address Customer address street_number Customer street number city Customer city state Customer two-letter state code Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: ARS and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"random@example.com\", \"phone_number\": \"0405777687\", \"country\": \"ar\", \"document\": \"23876543214\", \"birth_date\": \"11/08/1988\", \"zipcode\": \"15796\", \"address\": \"Boulevard Jorde\", \"street_number\": \"555\", \"city\": \"Moreno\", \"state\": \"BA\", \"payment_type_code\": \"cupon\", \"merchant_payment_code\": \"0x0W28D03-AR-T05\", \"currency_code\": \"ARS\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url. Copy{ \"payment\": { \"hash\": \"5efd14acce3c6256ad931f7978def9fa78d8c2921385f866\", \"pin\": \"006844097\", \"country\": \"ar\", \"merchant_payment_code\": \"0x0W28D03-AR-T05\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 22:56:43\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"121.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"ARS\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"cupon\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efd14acce3c6256ad931f7978def9fa78d8c2921385f866\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#undefined",
    "content": "Redirect your customer to the URL returned in the parameter voucher_url. After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Cupon de Pagos with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/cupon#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "PagoFacil with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil",
    "content": "",
    "keywords": "PagoFacil Cash Payment Argentina"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#about-this-guide",
    "content": "This page explains how to add PagoFacil to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;PagoFacil enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#how-it-works",
    "content": "To complete PagoFacil integration throught EBANX Direct API, please follow the steps below.  Enable PagoFacil PagoFacil availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the PagoFacil link (server-side) PagoFacil works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To PagoFacil must be pagofacil country Two-letter country code - ar for Argentina. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number birth_date Customer birth date zipcode Customer Zipcode address Customer address street_number Customer street number city Customer city state Customer two-letter state code Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: ARS and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;random@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;ar&quot;, &quot;document&quot;: &quot;23876543214&quot;, &quot;birth_date&quot;: &quot;11/08/1988&quot;, &quot;zipcode&quot;: &quot;15796&quot;, &quot;address&quot;: &quot;Boulevard Jorde&quot;, &quot;street_number&quot;: &quot;555&quot;, &quot;city&quot;: &quot;Moreno&quot;, &quot;state&quot;: &quot;BA&quot;, &quot;payment_type_code&quot;: &quot;pagofacil&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-AR-T04&quot;, &quot;currency_code&quot;: &quot;ARS&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efcf01004f5149d5e1671d5e3ecd6ba254efcb2a611b719&quot; , &quot;pin&quot; : &quot;042281030&quot; , &quot;country&quot; : &quot;ar&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-AR-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 20:20:31&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;121.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;ARS&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;pagofacil&quot; , &quot;voucher_url&quot; : &quot;https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efcf01004f5149d5e1671d5e3ecd6ba254efcb2a611b719&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter voucher_url . After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable PagoFacil",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#undefined",
    "content": "PagoFacil availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the PagoFacil link (server-side)",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#undefined",
    "content": "PagoFacil works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To PagoFacil must be pagofacil country Two-letter country code - ar for Argentina. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number birth_date Customer birth date zipcode Customer Zipcode address Customer address street_number Customer street number city Customer city state Customer two-letter state code Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: ARS and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"random@example.com\", \"phone_number\": \"0405777687\", \"country\": \"ar\", \"document\": \"23876543214\", \"birth_date\": \"11/08/1988\", \"zipcode\": \"15796\", \"address\": \"Boulevard Jorde\", \"street_number\": \"555\", \"city\": \"Moreno\", \"state\": \"BA\", \"payment_type_code\": \"pagofacil\", \"merchant_payment_code\": \"0x0W28D03-AR-T04\", \"currency_code\": \"ARS\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url. Copy{ \"payment\": { \"hash\": \"5efcf01004f5149d5e1671d5e3ecd6ba254efcb2a611b719\", \"pin\": \"042281030\", \"country\": \"ar\", \"merchant_payment_code\": \"0x0W28D03-AR-T04\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 20:20:31\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"121.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"ARS\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"pagofacil\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efcf01004f5149d5e1671d5e3ecd6ba254efcb2a611b719\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#undefined",
    "content": "Redirect your customer to the URL returned in the parameter voucher_url. After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "PagoFacil with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/pagofacil#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "RapiPago with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago",
    "content": "",
    "keywords": "RapiPago Cash Payment Argentina"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#about-this-guide",
    "content": "This page explains how to add RapiPago to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;RapiPago enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#how-it-works",
    "content": "To complete RapiPago integration throught EBANX Direct API, please follow the steps below.  Enable RapiPago RapiPago availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the RapiPago link (server-side) RapiPago works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To RapiPago must be rapipago country Two-letter country code - ar for Argentina. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: ARS and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;random@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;ar&quot;, &quot;document&quot;: &quot;23876543214&quot;, &quot;payment_type_code&quot;: &quot;rapipago&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-AR-T03&quot;, &quot;currency_code&quot;: &quot;ARS&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efce044a28a9efa60b28f867b62d1ef830e6032e66fac7a&quot; , &quot;pin&quot; : &quot;274925204&quot; , &quot;country&quot; : &quot;ar&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-AR-T03&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 19:13:08&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;121.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;ARS&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;rapipago&quot; , &quot;voucher_url&quot; : &quot;https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efce044a28a9efa60b28f867b62d1ef830e6032e66fac7a&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter voucher_url . After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable RapiPago",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#undefined",
    "content": "RapiPago availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the RapiPago link (server-side)",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#undefined",
    "content": "RapiPago works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To RapiPago must be rapipago country Two-letter country code - ar for Argentina. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: ARS and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"random@example.com\", \"phone_number\": \"0405777687\", \"country\": \"ar\", \"document\": \"23876543214\", \"payment_type_code\": \"rapipago\", \"merchant_payment_code\": \"0x0W28D03-AR-T03\", \"currency_code\": \"ARS\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url. Copy{ \"payment\": { \"hash\": \"5efce044a28a9efa60b28f867b62d1ef830e6032e66fac7a\", \"pin\": \"274925204\", \"country\": \"ar\", \"merchant_payment_code\": \"0x0W28D03-AR-T03\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 19:13:08\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"121.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"ARS\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"rapipago\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efce044a28a9efa60b28f867b62d1ef830e6032e66fac7a\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#undefined",
    "content": "Redirect your customer to the URL returned in the parameter voucher_url. After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "RapiPago with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/argentina/rapipago#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "Pagosnet with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet",
    "content": "",
    "keywords": "Pagosnet Cash Payment Bolivia"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#about-this-guide",
    "content": "This page explains how to add Pagosnet to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Pagosnet enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#how-it-works",
    "content": "To complete Pagosnet integration throught EBANX Direct API, please follow the steps below.  Enable Pagosnet Pagosnet availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Pagosnet link (server-side) Pagosnet works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Pagosnet must be pagosnet country Two-letter country code - bo for Bolivia. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: BOB and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;joseperu@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;pe&quot;, &quot;payment_type_code&quot;: &quot;pagosnet&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-BO-T02&quot;, &quot;currency_code&quot;: &quot;BOB&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efcd61dd057c73d4d457920cbb89bd802f57c29ebbbbf50&quot; , &quot;pin&quot; : &quot;086561344&quot; , &quot;country&quot; : &quot;bo&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-BO-T03&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 18:29:48&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BOB&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;pagosnet&quot; , &quot;voucher_url&quot; : &quot;https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efcd61dd057c73d4d457920cbb89bd802f57c29ebbbbf50&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Pagosnet",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#undefined",
    "content": "Pagosnet availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Pagosnet link (server-side)",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#undefined",
    "content": "Pagosnet works as a voucher, so you will need to redirect your customer to a page containing it.. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Pagosnet must be pagosnet country Two-letter country code - bo for Bolivia. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: BOB and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"joseperu@example.com\", \"phone_number\": \"0405777687\", \"country\": \"pe\", \"payment_type_code\": \"pagosnet\", \"merchant_payment_code\": \"0x0W28D03-BO-T02\", \"currency_code\": \"BOB\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the voucher will be in the parameter payment.voucher_url. Copy{ \"payment\": { \"hash\": \"5efcd61dd057c73d4d457920cbb89bd802f57c29ebbbbf50\", \"pin\": \"086561344\", \"country\": \"bo\", \"merchant_payment_code\": \"0x0W28D03-BO-T03\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 18:29:48\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BOB\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"pagosnet\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5efcd61dd057c73d4d457920cbb89bd802f57c29ebbbbf50\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be able to see the voucher in an interface like this: At this point you have a pending payment in your EBANX Dashboard.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Pagosnet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/bolivia/pagosnet#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "Bank Transfer with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer",
    "content": "",
    "keywords": "Bank Transfer EBANX"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#about-this-guide",
    "content": "This page explains how to add Bank Transfer to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Bank Transfer enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#how-it-works",
    "content": "To complete Bank Transfer integration throught EBANX Direct API, please follow the steps below. Enable Bank TransferBank Transfer availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard.All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists.Call the /ws/direct API to get the Bank Transfer link (server-side)Bank Transfer generates a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/request (server-side) with the following required fields:Operation: Must be request;Payment type code: Must be banktransfer;Customer data:#Customer name;Customer e-mail;Customer document;Customer address;Customer street number;Customer city;Customer state (Two letter code);Customer zip-code;Customer phone number Charge info:#Unique merchant payment code;Currency code;Total amount to be charged;Optionally, you can set a due date to your voucher using the parameter payment.due_date in the format dd/mm/yyyy. It can be more than three days only when payment currency is BRL (Brazilian Real), and your merchant account has this feature enabled. The due date is based on the local time of the country that the payment is generated. Check the example:Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"BR\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"banktransfer\", \"merchant_payment_code\": \"0x0W26D04-T02\", \"currency_code\": \"BRL\", \"amount_total\": 100 }}'A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.voucher_url.Copy{ \"payment\": { \"hash\": \"5ef4d5116163a1dc2a1c6271ae5c55714c77e4c0a10fa750\", \"pin\": \"255672522\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W26D04-T02\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-06-25 16:47:12\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-26\", \"instalments\": \"1\", \"payment_type_code\": \"banktransfer\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5ef4d5116163a1dc2a1c6271ae5c55714c77e4c0a10fa750\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"}infoThe complete API reference for the end-point ws/request can be found here. We strongly recommend you to take a look in all the available options.Redirect customer to the returned urlRedirect your customer to the URL returned in the parameter voucher_url. Your customers will see an interface like this:At this point you have a pending payment in your EBANX Dashboard.Wait for the paymentAfter the bank transfer, it will take sometime to EBANX get informed by the bank. As soon as we get the confirmation, payment status is modified from pending to confirmed.If your customers don't transfer the money to the indicated account, payment will be automatically canceled.infoThe generated voucher has an expiration date (that will be configured by you in the parameter payment.due_date). After this date, customer will have to issue a new voucher. Optionally, you can generate a new voucher and send to your customers throught your EBANX Dashboard. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Bank Transfer",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#undefined",
    "content": "Bank Transfer availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct API to get the Bank Transfer link (server-side)",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#undefined",
    "content": "Bank Transfer generates a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/request (server-side) with the following required fields: Operation: Must be request;Payment type code: Must be banktransfer; Customer data:# Customer name;Customer e-mail;Customer document;Customer address;Customer street number;Customer city;Customer state (Two letter code);Customer zip-code;Customer phone number  Charge info:# Unique merchant payment code;Currency code;Total amount to be charged; Optionally, you can set a due date to your voucher using the parameter payment.due_date in the format dd/mm/yyyy. It can be more than three days only when payment currency is BRL (Brazilian Real), and your merchant account has this feature enabled. The due date is based on the local time of the country that the payment is generated.  Check the example: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"BR\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"banktransfer\", \"merchant_payment_code\": \"0x0W26D04-T02\", \"currency_code\": \"BRL\", \"amount_total\": 100 }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.voucher_url. Copy{ \"payment\": { \"hash\": \"5ef4d5116163a1dc2a1c6271ae5c55714c77e4c0a10fa750\", \"pin\": \"255672522\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W26D04-T02\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-06-25 16:47:12\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-26\", \"instalments\": \"1\", \"payment_type_code\": \"banktransfer\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5ef4d5116163a1dc2a1c6271ae5c55714c77e4c0a10fa750\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/request can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned url",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#undefined",
    "content": "Redirect your customer to the URL returned in the parameter voucher_url. Your customers will see an interface like this:   At this point you have a pending payment in your EBANX Dashboard. "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Bank Transfer with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/bank-transfer#undefined",
    "content": "After the bank transfer, it will take sometime to EBANX get informed by the bank. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't transfer the money to the indicated account, payment will be automatically canceled. infoThe generated voucher has an expiration date (that will be configured by you in the parameter payment.due_date). After this date, customer will have to issue a new voucher. Optionally, you can generate a new voucher and send to your customers throught your EBANX Dashboard. "
  },
  {
    "title": "Boleto with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto",
    "content": "",
    "keywords": "Boleto EBANX"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#about-this-guide",
    "content": "This page explains how to add Boleto to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Boleto enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#how-it-works",
    "content": "To complete Boleto integration throught EBANX Direct API, please follow the steps below. Enable BoletoBoleto availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard.All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists.Call the /ws/direct API to get the boleto link (server-side)Boleto works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:Operation: Must be request;Payment type code: Must be boleto;Customer data:#Customer name;Customer e-mail;Customer document;Customer address;Customer street number;Customer city;Customer state;Customer zip-code;Customer phone number Charge info:#Unique merchant payment code;Currency code;Total amount to be charged;Optionally, you can set a due date to boleto using the parameter payment.due_date in the format dd/mm/yyyy. It can be more than three days only when payment currency is BRL (Brazilian Real), and your merchant account has this feature enabled. The due date is based on the local time of the country that the payment is generated. cautionPlease note the boleto may not be cancelled right after the expire date (3 days for USD) in order to have a proper compensation period specially when the boleto is paid close to a public holiday. Also, if the expire date is on holiday or weekend, we need to always consider the next business day.Check the example:Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={\"integration_key\": \"your_test_integration_key_here\",\"operation\": \"request\",\"payment\": {\"name\": \"José Silva\",\"email\": \"jose@example.com\",\"document\": \"853.513.468-93\",\"address\": \"Rua E\",\"street_number\": \"1040\",\"city\": \"Maracanaú\",\"state\": \"CE\",\"zipcode\": \"61919-230\",\"country\": \"br\",\"phone_number\": \"8522847035\",\"payment_type_code\": \"boleto\",\"merchant_payment_code\": \"a92253f29db\",\"currency_code\": \"BRL\",\"amount_total\": 100}}'A successful request will return a JSON response like the one below. The boleto link will be in the parameter payment.boleto_url, and the boleto barcode will be the value of payment.boleto_barcode.Copy{ \"payment\": { \"hash\": \"59ad5dd18a6d5ba0e24327c2ba92a730115a80bd58b3baa5\", \"pin\": \"655158605\", \"merchant_payment_code\": \"af461f512c1\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2017-09-04 14:06:09\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-09-08\", \"instalments\": \"1\", \"payment_type_code\": \"boleto\", \"boleto_url\": \"https://sandbox.ebanxpay.com/print/?hash=59ad5dd18a6d5ba0e24327c2ba92a730115a80bd58b3baa5\", \"boleto_barcode\": \"34191760071302120372714245740007572710000010038\", \"boleto_barcode_raw\": \"34195727100000100381760013021203721424574000\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options.Redirect customer to the returned urlRedirect your customer to the URL returned in the parameter boleto_url. Your customers will see an interface like this:At this point you have a pending payment in your EBANX Dashboard.cautionAlternatively, you can simply deliver the barcode number to your customer. Wait for the paymentAfter Boleto got payed, it will take sometime to EBANX get informed by Boleto's issuer bank. As soon as we get the confirmation, payment status is modified from pending to confirmed.If your customers don't pay the Boleto, payment will be automatically canceled.infoBoleto has an expiration date (that will be configured by you in the parameter payment.due_date). After this date, customer will have to issue a new boleto. Optionally, you can generate a new Boleto and send to your customers throught your EBANX Dashboard. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Boleto",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#undefined",
    "content": "Boleto availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct API to get the boleto link (server-side)",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#undefined",
    "content": "Boleto works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Operation: Must be request;Payment type code: Must be boleto; Customer data:# Customer name;Customer e-mail;Customer document;Customer address;Customer street number;Customer city;Customer state;Customer zip-code;Customer phone number  Charge info:# Unique merchant payment code;Currency code;Total amount to be charged; Optionally, you can set a due date to boleto using the parameter payment.due_date in the format dd/mm/yyyy. It can be more than three days only when payment currency is BRL (Brazilian Real), and your merchant account has this feature enabled. The due date is based on the local time of the country that the payment is generated.  cautionPlease note the boleto may not be cancelled right after the expire date (3 days for USD) in order to have a proper compensation period specially when the boleto is paid close to a public holiday. Also, if the expire date is on holiday or weekend, we need to always consider the next business day. Check the example: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={\"integration_key\": \"your_test_integration_key_here\",\"operation\": \"request\",\"payment\": {\"name\": \"José Silva\",\"email\": \"jose@example.com\",\"document\": \"853.513.468-93\",\"address\": \"Rua E\",\"street_number\": \"1040\",\"city\": \"Maracanaú\",\"state\": \"CE\",\"zipcode\": \"61919-230\",\"country\": \"br\",\"phone_number\": \"8522847035\",\"payment_type_code\": \"boleto\",\"merchant_payment_code\": \"a92253f29db\",\"currency_code\": \"BRL\",\"amount_total\": 100}}' A successful request will return a JSON response like the one below. The boleto link will be in the parameter payment.boleto_url, and the boleto barcode will be the value of payment.boleto_barcode. Copy{ \"payment\": { \"hash\": \"59ad5dd18a6d5ba0e24327c2ba92a730115a80bd58b3baa5\", \"pin\": \"655158605\", \"merchant_payment_code\": \"af461f512c1\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2017-09-04 14:06:09\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-09-08\", \"instalments\": \"1\", \"payment_type_code\": \"boleto\", \"boleto_url\": \"https://sandbox.ebanxpay.com/print/?hash=59ad5dd18a6d5ba0e24327c2ba92a730115a80bd58b3baa5\", \"boleto_barcode\": \"34191760071302120372714245740007572710000010038\", \"boleto_barcode_raw\": \"34195727100000100381760013021203721424574000\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"}  infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned url",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#undefined",
    "content": "Redirect your customer to the URL returned in the parameter boleto_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. cautionAlternatively, you can simply deliver the barcode number to your customer.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Boleto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/boleto#undefined",
    "content": "After Boleto got payed, it will take sometime to EBANX get informed by Boleto's issuer bank. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't pay the Boleto, payment will be automatically canceled. infoBoleto has an expiration date (that will be configured by you in the parameter payment.due_date). After this date, customer will have to issue a new boleto. Optionally, you can generate a new Boleto and send to your customers throught your EBANX Dashboard. "
  },
  {
    "title": "Debit Cards with 3DS 2#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2",
    "content": "",
    "keywords": "Debit Card 3DS,SCA"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#about-this-guide",
    "content": "This page explains how to add Debit Card, using 3DS 2, to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields. If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Debit Cards enabled in your EBANX Dashboard. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#how-it-works",
    "content": "There are two options you can use to authenticate a payment using 3DS. EBANX Authentication: In this method, the authentication is done through the EBANX.js Client SDK and the resulting data is added to the payment using our EBANX Direct API.External Authentication: In this method, the authentication is done through a 3rd Party Authenticator and the resulting data is added to the payment using our EBANX Direct API. We'll cover the steps of both methods in this guide. "
  },
  {
    "title": "Test Scenarios",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#test-scenarios",
    "content": "Below you can find test card numbers and other information to make sure your integration is working as planned! You can use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. CVV: Use any number with three digits, except for American Express whose CVV has four digits;Expiration date (due date): Use any date in the future.  Brand Card Scenario visa 4000000000001000 Approved (3DS without Challenge) visa 4000000000001091 Insufficient Funds (3DS with Challenge) visa 4000000000001042 Invalid Card or Card Type (3DS with Challenge) visa 4000000000001109 Invalid Card or Card Type (3DS without Challenge) mastercard 5200000000001096 Approved (3DS without Challenge) mastercard 5200000000001005 Insufficient Funds (3DS with Challenge) mastercard 5200000000001013 Invalid Card or Card Type (3DS with Challenge) mastercard 5200000000001104 Invalid Card or Card Type (3DS without Challenge) maestro 6759411100000008 Approved (3DS without Challenge) elo 6505050000001000 Approved (3DS without Challenge)  "
  },
  {
    "title": "Live Sample",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#live-sample",
    "content": "See the Pen by ferpa2012 (@ferpa2012) on CodePen. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "3D Secure 2 with EBANX Authentication",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#3d-secure-2-with-ebanx-authentication",
    "content": "Add EBANX.js to your webpageOur client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage:Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script>And initialize it with your Merchant's Configuration:Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" });Create an object with your order informationCreate an object with with the following fields:Copyconst orderInformation = { amountDetails: { totalAmount: \"10.04\", currency: \"BRL\", }, billTo: { address1: \"Rua Estanislau Szarek\", administrativeArea: \"PR\", country: \"BR\", email: \"1584023172@exemplo.com.br\", homePhone: \"41999999999\", locality: \"Curitiba\", postalCode: \"81315380\", mobilePhone: \"41999999999\", },};Create an object with your payment informationCreate an object with with the following fields:Copyconst paymentInformation = { card: { number: \"4000000000001000\", expirationMonth: \"12\", expirationYear: \"34\", holderName: \"JOAO DA SILVA\", },};Create an object with your customer's informationCreate an object with with the following fields:Copyconst personalIdentification = { id: \"97370192024\", type: \"CPF\",};Authenticate your payment requestCall the EBANX.threeDSecure.authenticate function using the objects created in steps 2, 3 and 4. During this step, if deemed necessary by the issuing bank, additional authentication will be requested.noteIf your payment required authentication and it failed, you can send an authentication request again. An authentication can fail because of an invalid input from customers during a challenge, issuers unavailability and communication issues.Copyconst options = { orderInformation, paymentInformation, personalIdentification,}; EBANX.threeDSecure.authenticate(options) .then((authenticationData) => { // use the authenticationData object to fullfil your payment }) .catch(error => { // handle any errors that can happen });EBANX.threeDSecure.authenticate returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful authentication response contains the following fields. The values will vary for each authentication:Copy//The authenticationData object created in the previous step will have the following fields: { threeds_eci: \"05\", threeds_cryptogram: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", threeds_xid: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", //This field is optional and might not be in every authentication threeds_version: \"2\", //This field is optional and might not be in every authentication threeds_trxid: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\" //This field is optional and might not be in every authentication}Add the 3DS Authentication values to your paymentInclude the values acquired in Step 5 in the payments.card object in your Direct API call. For more information on our Direct API, click here!ImportantEBANX.threeDSecure.authenticate returns an empty object in cases where authentication was not necessary, Caixa debit cards for example. Because of that, we recommend adding the response using a spread operator. This way, if the object is empty, it won't interfere with your payment.Copy//If you're using old Javascript syntax, the spread syntax will not work. So in this case you can set the card properties individually. \"card\": { \"card_number\": 4000000000001000, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, ...authenticationData //spread of the object returned by EBANX.threeDSecure.authenticate and passed to your successCallback function.}The payment_type_code must be debitcard.Copy\"payment_type_code\": \"debitcard\" "
  },
  {
    "title": "Add EBANX.js to your webpage",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script> And initialize it with your Merchant's Configuration: Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" }); "
  },
  {
    "title": "Create an object with your order information",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Create an object with with the following fields: Copyconst orderInformation = { amountDetails: { totalAmount: \"10.04\", currency: \"BRL\", }, billTo: { address1: \"Rua Estanislau Szarek\", administrativeArea: \"PR\", country: \"BR\", email: \"1584023172@exemplo.com.br\", homePhone: \"41999999999\", locality: \"Curitiba\", postalCode: \"81315380\", mobilePhone: \"41999999999\", },}; "
  },
  {
    "title": "Create an object with your payment information",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Create an object with with the following fields: Copyconst paymentInformation = { card: { number: \"4000000000001000\", expirationMonth: \"12\", expirationYear: \"34\", holderName: \"JOAO DA SILVA\", },}; "
  },
  {
    "title": "Create an object with your customer's information",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Create an object with with the following fields: Copyconst personalIdentification = { id: \"97370192024\", type: \"CPF\",}; "
  },
  {
    "title": "Authenticate your payment request",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Call the EBANX.threeDSecure.authenticate function using the objects created in steps 2, 3 and 4. During this step, if deemed necessary by the issuing bank, additional authentication will be requested. noteIf your payment required authentication and it failed, you can send an authentication request again. An authentication can fail because of an invalid input from customers during a challenge, issuers unavailability and communication issues. Copyconst options = { orderInformation, paymentInformation, personalIdentification,}; EBANX.threeDSecure.authenticate(options) .then((authenticationData) => { // use the authenticationData object to fullfil your payment }) .catch(error => { // handle any errors that can happen }); EBANX.threeDSecure.authenticate returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful authentication response contains the following fields. The values will vary for each authentication: Copy//The authenticationData object created in the previous step will have the following fields: { threeds_eci: \"05\", threeds_cryptogram: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", threeds_xid: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", //This field is optional and might not be in every authentication threeds_version: \"2\", //This field is optional and might not be in every authentication threeds_trxid: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\" //This field is optional and might not be in every authentication} "
  },
  {
    "title": "Add the 3DS Authentication values to your payment",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Include the values acquired in Step 5 in the payments.card object in your Direct API call. For more information on our Direct API, click here! ImportantEBANX.threeDSecure.authenticate returns an empty object in cases where authentication was not necessary, Caixa debit cards for example. Because of that, we recommend adding the response using a spread operator. This way, if the object is empty, it won't interfere with your payment. Copy//If you're using old Javascript syntax, the spread syntax will not work. So in this case you can set the card properties individually. \"card\": { \"card_number\": 4000000000001000, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, ...authenticationData //spread of the object returned by EBANX.threeDSecure.authenticate and passed to your successCallback function.} The payment_type_code must be debitcard. Copy\"payment_type_code\": \"debitcard\" "
  },
  {
    "title": "External Authentication",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#external-authentication",
    "content": "The main difference in this method is that you'll handle the process of generating the 3DS values through a 3rd party and simply add them to your payment request. Authenticate the payment using your External AuthenticatorThe steps to perform the external authentication will depend on the provider of your choice.noteCaixa's debit card is the only case where 3DS 2.0 is not required. For all other debit cards in Brazil 🇧🇷 the usage of 3DS 2.0 protocol is mandatory.Add the 3DS Authentication values to your paymentNow that your payment has been authenticated, include the values acquired in Step 1 in the payments.card object in your Direct API call.Copy\"card\": { \"card_number\": 4000000000001091, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, \"threeds_eci\": \"05\", \"threeds_cryptogram\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_xid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_version\": \"2\" \"threeds_trxid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\"}The payment_type_code must be debitcard.Copy\"payment_type_code\": \"debitcard\" "
  },
  {
    "title": "Authenticate the payment using your External Authenticator",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "The steps to perform the external authentication will depend on the provider of your choice. noteCaixa's debit card is the only case where 3DS 2.0 is not required. For all other debit cards in Brazil 🇧🇷 the usage of 3DS 2.0 protocol is mandatory. "
  },
  {
    "title": "Add the 3DS Authentication values to your payment",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2#undefined",
    "content": "Now that your payment has been authenticated, include the values acquired in Step 1 in the payments.card object in your Direct API call. Copy\"card\": { \"card_number\": 4000000000001091, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, \"threeds_eci\": \"05\", \"threeds_cryptogram\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_xid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_version\": \"2\" \"threeds_trxid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\"} The payment_type_code must be debitcard. Copy\"payment_type_code\": \"debitcard\" "
  },
  {
    "title": "Debit Cards with 3DS 2#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old",
    "content": "",
    "keywords": "Debit Card 3DS,SCA"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#about-this-guide",
    "content": "This page explains how to add Debit Card, using 3DS 2, to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields. If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "3D Secure 2 with EBANX Authentication",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#3d-secure-2-with-ebanx-authentication",
    "content": "In this method, the authentication is done through the EBANX JS Client SDK and the resulting data is added to the payment using our EBANX Direct API. For the complete Direct API Reference, click here. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#what-you-will-need",
    "content": ""
  },
  {
    "title": "External Authentication",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#external-authentication",
    "content": ""
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#what-you-will-need-1",
    "content": ""
  },
  {
    "title": "Sandbox testing",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#sandbox-testing",
    "content": ""
  },
  {
    "title": "Test Scenarios",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#test-scenarios",
    "content": "Below you can find test card numbers and other information to make sure your integration is working as planned! You can use any of the following test card numbers, a valid expiration date in the future, and any random CVC number, to create a successful payment. CVV: Use any number with three digits, except for American Express whose CVV has four digits;Expiration date (due date): Use any date in the future.  Brand Card Scenario visa 4000000000001000 Approved (3DS without Challenge) visa 4000000000001091 Insufficient Funds (3DS with Challenge) visa 4000000000001042 Invalid Card or Card Type (3DS with Challenge) visa 4000000000001109 Invalid Card or Card Type (3DS without Challenge) mastercard 5200000000001096 Approved (3DS without Challenge) mastercard 5200000000001005 Insufficient Funds (3DS with Challenge) mastercard 5200000000001013 Invalid Card or Card Type (3DS with Challenge) mastercard 5200000000001104 Invalid Card or Card Type (3DS without Challenge) maestro 6759411100000008 Approved (3DS without Challenge) elo 6505050000001000 Approved (3DS without Challenge)  "
  },
  {
    "title": "Test Script",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#test-script",
    "content": "The following, is a simple HTML test script you can use to put in use the concepts explored in the previous integration guide: Copy<script type=\"text/javascript\" src=\"https://js.ebanx.com/assets/songbird/songbird-dev.js\"></script><script type=\"text/javascript\" src=\"https://js.ebanx.com/ebanx-libjs-latest.min.js\"></script><script type=\"text/javascript\"> window.onload = function() { const cardNumber = window.prompt(\"Test Card:\"); const orderInformation = { \"amountDetails\": { \"totalAmount\": \"10.00\", \"currency\": \"BRL\" }, \"billTo\": { \"address1\": \"Rua Teste\", \"administrativeArea\": \"PR\", \"country\": \"BR\", \"email\": \"test@test.com\", \"homePhone\": \"41999999999\", \"locality\": \"Curitiba\", \"postalCode\": \"81315380\", \"mobilePhone\": \"41999999999\" } }; EBANX.config.setMode('test'); EBANX.config.setPublishableKey('your_test_public_integration_key'); EBANX.config.setCountry('br'); const paymentInformation = { \"card\": { \"number\": cardNumber, \"expirationMonth\": \"12\", \"expirationYear\": \"34\", \"holderName\": \"JOAO DA SILVA\" } }; const personalIdentification = { \"id\": \"85351346893\", \"type\": \"CPF\" }; function successCall(result, shouldAuthenticate) { console.log(\"Sucess: \" + JSON.stringify(result)); if(shouldAuthenticate){ //If true, adds the 3DS objects to the request const request_draft = { \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"mode\": \"full\", \"payment\": { \"merchant_payment_code\": \"0x0W05D2-T01\", \"amount_total\": 10.00, \"currency_code\": \"BRL\", \"name\": \"James Bond\", \"email\": \"test@test.com\", \"document\": \"85351346893\", \"address\": \"Rua Teste\", \"street_number\": 123, \"city\": \"Curitiba\", \"state\": \"PR\", \"zipcode\": \"81315380\", \"country\": \"BR\", \"phone_number\": 41999999999, \"payment_type_code\": \"debitcard\", \"card\": { \"card_number\": cardNumber, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, \"threeds_eci\": result.threeds_eci, \"threeds_cryptogram\": result.threeds_cryptogram, \"threeds_xid\": result.threeds_xid, \"threeds_version\": result.threeds_version, \"threeds_trxid\": result.threeds_trxid } } }; } else{ //If false, runs the request without the 3DS objects const request_draft = { \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"mode\": \"full\", \"payment\": { \"merchant_payment_code\": \"0x0W05D2-T01\", \"amount_total\": 10.00, \"currency_code\": \"BRL\", \"name\": \"James Bond\", \"email\": \"test@test.com\", \"document\": \"85351346893\", \"address\": \"Rua Teste\", \"street_number\": 123, \"city\": \"Curitiba\", \"state\": \"PR\", \"zipcode\": \"81315380\", \"country\": \"BR\", \"phone_number\": 41999999999, \"payment_type_code\": \"debitcard\", \"card\": { \"card_number\": cardNumber, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, } } }; } document.getElementById('request_output').innerHTML = JSON.stringify(request_draft, null, 2); } function failureCall(error) { console.error(error); } const options = { orderInformation, paymentInformation, personalIdentification, }; function run3DS(shouldAuthenticate,options){ const result = null; if(shouldAuthenticate){ //If shouldAuthenticate is true, runs 3DS result = EBANX.threedsecure.run(options); result .then(successCall) .catch(failureCall); } else{ //If false, go straight to successCall, where the contents of result won't be needed in this case successCall; } }; //Determines if 3DS Authentication is needed. const shouldAuthenticate = EBANX.threedsecure.checkIfShouldAuthenticate(options); shouldAuthenticate .then(run3DS) .catch(failureCall); }</script><body> <textarea type=\"text\" id=\"request_output\" rows=\"29\" cols=\"50\"></body>  "
  },
  {
    "title": "Client SDK",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#client-sdk",
    "content": "Our client SDK enables you to securely collect payment information from your customers. Add the following scripts to your webpage: Copy<script type=\"text/javascript\" src=\"https://js.ebanx.com/assets/songbird/songbird-<dev|prod>.js\">\\</script><script type=\"text/javascript\" src=\"https://js.ebanx.com/ebanx-libjs-latest.min.js\">\\</script> And initialize it with your Merchant's Configuration: Set mode to either test or productionSet your Publishable key. To identify your site to EBANX API you must start by providing your publishable key.Set your checkout country code (see: https://en.wikipedia.org/wiki/ISO_3166-1). CopyEBANX.config.setMode(\"test\");EBANX.config.setPublishableKey(\"put your key here\");EBANX.config.setCountry(\"br\"); "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#how-it-works",
    "content": "Step 1: Create an object with you order information: Copyconst orderInformation = { amountDetails: { totalAmount: \"10.04\", currency: \"BRL\", }, billTo: { address1: \"Rua Estanislau Szarek\", administrativeArea: \"PR\", country: \"BR\", email: \"1584023172@exemplo.com.br\", homePhone: \"41999999999\", locality: \"Curitiba\", postalCode: \"81315380\", mobilePhone: \"41999999999\", },}; Step 2: Create an object with your payment information: Copyconst paymentInformation = { card: { number: cardNumber, expirationMonth: \"12\", expirationYear: \"34\", holderName: \"JOAO DA SILVA\", },}; Step 3: Create an object with the personal identification details of the customer: Copyconst personalIdentification = { id: \"97370192024\", type: \"CPF\",}; Step 4: Determine if the debit card in use requires 3DS 2.0 authentication using the objects created in steps 1, 2 and 3: Copyconst options = { orderInformation, paymentInformation, personalIdentification,}; const shouldAuthenticate = EBANX.threedsecure.checkIfShouldAuthenticate( options); Step 5: If shouldAuthenticate is false, this step can be skipped. If shouldAuthenticate is true, call the threedsecure.run function using the objects created in steps 1, 2 and 3. During this step, if deemed necessary by the issuing bank, additional authentication will be requested. If your payment required authentication and it failed, you can send an authentication request again. An authentication can fail because of an invalid input from customers during a challenge, issuers unavailability and communication issues. Copyresult = EBANX.threedsecure.run({ orderInformation, paymentInformation, personalIdentification,});result .then(successCall) // Run when Authentication is successful .catch(failureCall); // Run when Authentication fails The response contains the following fields. The values will vary for each authentication: Copy{ threeds_eci: \"05\", threeds_cryptogram: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", threeds_xid: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", //This field is optional and might not be in every authentication threeds_version: \"2\", //This field is optional and might not be in every authentication threeds_trxid: \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\" //This field is optional and might not be in every authentication} The fields threeds_xid, threeds_version and threeds_trxid are optional. If they are not returned by the EBANX.threedsecure.run call, you don't need to include them in the subsequent steps. Step 6: If your payment required authentication, include the values acquired in Step 5 in the payments.card object in your Direct API call. Otherwise, proceed with the regular card objects. For more information on our Direct API, click here! With 3DS AuthenticationWithout 3DS AuthenticationCopy\"card\": { \"card_number\": 4000000000001091, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, \"threeds_eci\": \"05\", \"threeds_cryptogram\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_xid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_version\": \"2\" \"threeds_trxid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\"} The payment_type_code must be changed todebitcard. Please note: 👀 Caixa's debit card is the only case where 3DS 2.0 is not required. For all other debit cards in Brazil 🇧🇷 the usage of 3DS 2.0 protocol is mandatory. Copy\"payment_type_code\": \"debitcard\" "
  },
  {
    "title": "The Externally Authenticated Data",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#the-externally-authenticated-data",
    "content": "In this method, the authentication is done through a 3rd Party Authenticator and the resulting data is added to the payment using our EBANX Direct API. For the complete Direct API Reference, click here. The main differences from a normal request are the fields related to the 3DS authentication: threeds_eci: ECI, or Electronic Commerce Indicator, is the value returned by the Directory Servers to indicate the result of the authentication.threeds_cryptogram: The cryptogram is a hash that represents the authentication.threeds_xid: The Transaction ID generated automatically and unique to each transaction. This field is not mandatory.threeds_version: The version of 3DS used in the authentication. This field is not mandatory.threeds_trxid: Directory Server transaction identifier. This field is not mandatory. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#how-it-works-1",
    "content": "Step 1: Authenticate the payment using you External Authenticator. The steps to perform the external authentication will depend on the provider of your choice. Step 2: Now that your payment has been authenticated, include the three values acquired in Step 1 in the payments.card object in your Direct API call. Copy\"card\": { \"card_number\": 4000000000001091, \"card_name\": \"JOAO DA SILVA\", \"card_due_date\": \"12/2034\", \"card_cvv\": 123, \"threeds_eci\": \"05\", \"threeds_cryptogram\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_xid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA=\", \"threeds_version\": \"2\" \"threeds_trxid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\"} The payment_type_code must be changed todebitcard. Please note: 👀 Caixa's debit card is the only case where 3DS 2.0 is not required. For all other debit cards in Brazil 🇧🇷 the usage of 3DS 2.0 protocol is mandatory. Copy\"payment_type_code\": \"debitcard\" "
  },
  {
    "title": "Getting a Sandbox Account",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#getting-a-sandbox-account",
    "content": "If you haven't already, sign up for an Sandbox Account at our EBANX Business Page, select your business model and answer a few questions. We'll get in touch with you shortly after! "
  },
  {
    "title": "Sign up for an EBANX Sandbox Account here",
    "type": 1,
    "pageTitle": "Debit Cards with 3DS 2#",
    "url": "docs/payments/guides/accept-payments/api/brazil/debit-3ds-2-old#sign-up-for-an-ebanx-sandbox-account-here",
    "content": ""
  },
  {
    "title": "Online Debit with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit",
    "content": "",
    "keywords": "Online Debit EBANX"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#about-this-guide",
    "content": "This page explains how to add Online Debit (TEF) to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Online Debit enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#how-it-works",
    "content": "To complete Online Debit integration throught EBANX Direct API, please follow the steps below.  Enable Online Debit Online Debit availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct API to get the Online Debit link (server-side) With Online Debit , your consumers are redirected to their online-banking website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/request (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code Supported banks are: banrisul , bradesco , bancodobrasil , itau Customer data: # Parameter Description name Customer name email Customer e-mail document Customer document address Customer address street_number Customer street number city Customer city state Customer state (Two letter code) zipcode Customer zip-code phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code Currency code amount_total Total amount to be charged Optionally, you can set a due date to your voucher using the parameter payment.due_date in the format dd/mm/yyyy. It can be more than three days only when payment currency is BRL (Brazilian Real), and your merchant account has this feature enabled. The due date is based on the local time of the country that the payment is generated. Check the example: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -d &apos;request_body={ &quot;integration_key&quot;: &quot;{{integration_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;jose@example.com&quot;, &quot;document&quot;: &quot;853.513.468-93&quot;, &quot;address&quot;: &quot;Rua E&quot;, &quot;street_number&quot;: &quot;1040&quot;, &quot;city&quot;: &quot;Maracana&#xFA;&quot;, &quot;state&quot;: &quot;CE&quot;, &quot;zipcode&quot;: &quot;61919-230&quot;, &quot;country&quot;: &quot;BR&quot;, &quot;phone_number&quot;: &quot;8522847035&quot;, &quot;payment_type_code&quot;: &quot;itau&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W26D04-T03&quot;, &quot;due_date&quot;: &quot;27/06/2020&quot;, &quot;currency_code&quot;: &quot;BRL&quot;, &quot;amount_total&quot;: 100 } }&apos; A successful request will return a JSON response like the one below. The redirection link to the bank will be in the parameter payment.redirect_url . Copy { &quot;redirect_url&quot; : &quot;https://sandbox.ebanxpay.com/ws/directtefredirect/?hash=5ef50c977378a231f42da8c8d882264ba8251a31e781b33c&quot; , &quot;payment&quot; : { &quot;hash&quot; : &quot;5ef50c977378a231f42da8c8d882264ba8251a31e781b33c&quot; , &quot;pin&quot; : &quot;489539812&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W26D04-T03&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-06-25 20:44:07&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;99.62&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2020-06-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;itau&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanxpay.com/ws/directtefredirect/?hash=5ef50c977378a231f42da8c8d882264ba8251a31e781b33c&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/request can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in their online-banking environment, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment After the payment in the Customer&apos;s online-banking environment, it will take sometime to EBANX get informed by the bank. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Online Debit",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#undefined",
    "content": "Online Debit availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct API to get the Online Debit link (server-side)",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#undefined",
    "content": "With Online Debit, your consumers are redirected to their online-banking website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/request (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code Supported banks are: banrisul , bradesco , bancodobrasil , itau Customer data: # Parameter Description name Customer name email Customer e-mail document Customer document address Customer address street_number Customer street number city Customer city state Customer state (Two letter code) zipcode Customer zip-code phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code Currency code amount_total Total amount to be charged  Optionally, you can set a due date to your voucher using the parameter payment.due_date in the format dd/mm/yyyy. It can be more than three days only when payment currency is BRL (Brazilian Real), and your merchant account has this feature enabled. The due date is based on the local time of the country that the payment is generated.  Check the example: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"BR\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"itau\", \"merchant_payment_code\": \"0x0W26D04-T03\", \"due_date\": \"27/06/2020\", \"currency_code\": \"BRL\", \"amount_total\": 100 }}' A successful request will return a JSON response like the one below. The redirection link to the bank will be in the parameter payment.redirect_url. Copy{ \"redirect_url\": \"https://sandbox.ebanxpay.com/ws/directtefredirect/?hash=5ef50c977378a231f42da8c8d882264ba8251a31e781b33c\", \"payment\": { \"hash\": \"5ef50c977378a231f42da8c8d882264ba8251a31e781b33c\", \"pin\": \"489539812\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W26D04-T03\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-06-25 20:44:07\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-27\", \"instalments\": \"1\", \"payment_type_code\": \"itau\", \"redirect_url\": \"https://sandbox.ebanxpay.com/ws/directtefredirect/?hash=5ef50c977378a231f42da8c8d882264ba8251a31e781b33c\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/request can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in their online-banking environment, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Online Debit with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/brazil/online-debit#undefined",
    "content": "After the payment in the Customer's online-banking environment, it will take sometime to EBANX get informed by the bank. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "Multicaja with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja",
    "content": "",
    "keywords": "Multicaja Cash Payment Chile"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#about-this-guide",
    "content": "This page explains how to add Multicaja to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Multicaja enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#how-it-works",
    "content": "To complete Multicaja integration throught EBANX Direct API, please follow the steps below.  Enable Multicaja Multicaja availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Multicaja link (server-side) With Multicaja , your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Multicaja must be multicaja country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: CLP and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josechile@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;cl&quot;, &quot;document&quot;: &quot;9882884-2&quot;, &quot;payment_type_code&quot;: &quot;multicaja&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-CL-T06&quot;, &quot;currency_code&quot;: &quot;CLP&quot;, &quot;amount_total&quot;: &quot;500&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efde278641424b4f1677d737dd57172a754a3f75b35832e&quot; , &quot;pin&quot; : &quot;658611630&quot; , &quot;country&quot; : &quot;cl&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-CL-T06&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-02 13:34:47&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;500.00&quot; , &quot;amount_ext&quot; : &quot;500.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;500.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;CLP&quot; , &quot;due_date&quot; : &quot;2020-07-05&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;multicaja&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde278641424b4f1677d737dd57172a754a3f75b35832e&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde278641424b4f1677d737dd57172a754a3f75b35832e&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled. Notification Flow You can set-up notification to get informed as soon as the payment is confirmed. Lern more here  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Multicaja",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#undefined",
    "content": "Multicaja availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Multicaja link (server-side)",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#undefined",
    "content": "With Multicaja, your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Multicaja must be multicaja country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: CLP and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josechile@example.com\", \"phone_number\": \"0405777687\", \"country\": \"cl\", \"document\": \"9882884-2\", \"payment_type_code\": \"multicaja\", \"merchant_payment_code\": \"0x0W28D03-CL-T06\", \"currency_code\": \"CLP\", \"amount_total\": \"500\" }}' A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efde278641424b4f1677d737dd57172a754a3f75b35832e\", \"pin\": \"658611630\", \"country\": \"cl\", \"merchant_payment_code\": \"0x0W28D03-CL-T06\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-02 13:34:47\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"500.00\", \"amount_ext\": \"500.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"500.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"CLP\", \"due_date\": \"2020-07-05\", \"instalments\": \"1\", \"payment_type_code\": \"multicaja\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde278641424b4f1677d737dd57172a754a3f75b35832e\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde278641424b4f1677d737dd57172a754a3f75b35832e\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Multicaja with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/multicaja#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. Notification FlowYou can set-up notification to get informed as soon as the payment is confirmed. Lern more here "
  },
  {
    "title": "Sencillito with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito",
    "content": "",
    "keywords": "Sencillito Cash Payment Chile"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#about-this-guide",
    "content": "This page explains how to add Sencillito to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Sencillito enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#how-it-works",
    "content": "To complete Sencillito integration throught EBANX Direct API, please follow the steps below.  Enable Sencillito Sencillito availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Sencillito link (server-side) With Sencillito , your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Sencillito must be sencillito country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: CLP and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josechile@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;cl&quot;, &quot;document&quot;: &quot;9882884-2&quot;, &quot;payment_type_code&quot;: &quot;sencillito&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-CL-T05&quot;, &quot;currency_code&quot;: &quot;CLP&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efde1e8eef71eb5eb68ebfbea4fd07410c4f4f82fe18924&quot; , &quot;pin&quot; : &quot;639250529&quot; , &quot;country&quot; : &quot;cl&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-CL-T05&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-02 13:32:24&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;CLP&quot; , &quot;due_date&quot; : &quot;2020-07-05&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;sencillito&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde1e8eef71eb5eb68ebfbea4fd07410c4f4f82fe18924&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde1e8eef71eb5eb68ebfbea4fd07410c4f4f82fe18924&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled. Notification Flow You can set-up notification to get informed as soon as the payment is confirmed. Lern more here  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Sencillito",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#undefined",
    "content": "Sencillito availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Sencillito link (server-side)",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#undefined",
    "content": "With Sencillito, your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Sencillito must be sencillito country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: CLP and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josechile@example.com\", \"phone_number\": \"0405777687\", \"country\": \"cl\", \"document\": \"9882884-2\", \"payment_type_code\": \"sencillito\", \"merchant_payment_code\": \"0x0W28D03-CL-T05\", \"currency_code\": \"CLP\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efde1e8eef71eb5eb68ebfbea4fd07410c4f4f82fe18924\", \"pin\": \"639250529\", \"country\": \"cl\", \"merchant_payment_code\": \"0x0W28D03-CL-T05\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-02 13:32:24\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"CLP\", \"due_date\": \"2020-07-05\", \"instalments\": \"1\", \"payment_type_code\": \"sencillito\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde1e8eef71eb5eb68ebfbea4fd07410c4f4f82fe18924\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efde1e8eef71eb5eb68ebfbea4fd07410c4f4f82fe18924\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Sencillito with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/sencillito#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. Notification FlowYou can set-up notification to get informed as soon as the payment is confirmed. Lern more here "
  },
  {
    "title": "Servipag with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag",
    "content": "",
    "keywords": "Servipag Cash Payment Chile"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#about-this-guide",
    "content": "This page explains how to add Servipag to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Servipag enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#how-it-works",
    "content": "To complete Servipag integration throught EBANX Direct API, please follow the steps below.  Enable Servipag Servipag availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Servipag link (server-side) With Servipag , your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Servipag must be servipag country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: CLP and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josechile@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;cl&quot;, &quot;document&quot;: &quot;9882884-2&quot;, &quot;payment_type_code&quot;: &quot;servipag&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-CL-T04&quot;, &quot;currency_code&quot;: &quot;CLP&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efd1cd0ac77c56f8e73d9ca635438b3217a5363cd80f90d&quot; , &quot;pin&quot; : &quot;409611456&quot; , &quot;country&quot; : &quot;cl&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-CL-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 23:31:28&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;CLP&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;servipag&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efd1cd0ac77c56f8e73d9ca635438b3217a5363cd80f90d&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efd1cd0ac77c56f8e73d9ca635438b3217a5363cd80f90d&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled. Notification Flow You can set-up notification to get informed as soon as the payment is confirmed. Lern more here  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Servipag",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#undefined",
    "content": "Servipag availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Servipag link (server-side)",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#undefined",
    "content": "With Servipag, your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Servipag must be servipag country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: CLP and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josechile@example.com\", \"phone_number\": \"0405777687\", \"country\": \"cl\", \"document\": \"9882884-2\", \"payment_type_code\": \"servipag\", \"merchant_payment_code\": \"0x0W28D03-CL-T04\", \"currency_code\": \"CLP\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efd1cd0ac77c56f8e73d9ca635438b3217a5363cd80f90d\", \"pin\": \"409611456\", \"country\": \"cl\", \"merchant_payment_code\": \"0x0W28D03-CL-T04\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 23:31:28\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"CLP\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"servipag\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efd1cd0ac77c56f8e73d9ca635438b3217a5363cd80f90d\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efd1cd0ac77c56f8e73d9ca635438b3217a5363cd80f90d\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Servipag with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/servipag#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. Notification FlowYou can set-up notification to get informed as soon as the payment is confirmed. Lern more here "
  },
  {
    "title": "Webpay with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay",
    "content": "",
    "keywords": "Webpay Cash Payment Chile"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#about-this-guide",
    "content": "This page explains how to add Webpay to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Webpay enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#how-it-works",
    "content": "To complete Webpay integration throught EBANX Direct API, please follow the steps below.  Enable Webpay Webpay availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Webpay link (server-side) With Webpay , your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Webpay must be webpay country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number zipcode Customer Zipcode address Customer address street_number Customer street number city Customer city state Customer state conamede Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: PEN and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josechile@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;address&quot;: &quot;Rua E&quot;, &quot;street_number&quot;: &quot;1040&quot;, &quot;city&quot;: &quot;Antofagasta&quot;, &quot;state&quot;: &quot;Antofagasta&quot;, &quot;zipcode&quot;: &quot;61919-230&quot;, &quot;country&quot;: &quot;cl&quot;, &quot;document&quot;: &quot;9882884-2&quot;, &quot;payment_type_code&quot;: &quot;webpay&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-CL-T07&quot;, &quot;currency_code&quot;: &quot;CLP&quot;, &quot;amount_total&quot;: &quot;500&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efded178fb076acee48b51822375075a7a8f5850241de57&quot; , &quot;pin&quot; : &quot;443281986&quot; , &quot;country&quot; : &quot;cl&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-CL-T07&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-02 14:20:07&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;500.00&quot; , &quot;amount_ext&quot; : &quot;500.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;500.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;CLP&quot; , &quot;due_date&quot; : &quot;2020-07-05&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;webpay&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efded178fb076acee48b51822375075a7a8f5850241de57&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efded178fb076acee48b51822375075a7a8f5850241de57&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled. Notification Flow You can set-up notification to get informed as soon as the payment is confirmed. Lern more here  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Webpay",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#undefined",
    "content": "Webpay availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Webpay link (server-side)",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#undefined",
    "content": "With Webpay, your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Webpay must be webpay country Two-letter country code - cl for Chile. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number zipcode Customer Zipcode address Customer address street_number Customer street number city Customer city state Customer state conamede Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: PEN and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josechile@example.com\", \"phone_number\": \"0405777687\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Antofagasta\", \"state\": \"Antofagasta\", \"zipcode\": \"61919-230\", \"country\": \"cl\", \"document\": \"9882884-2\", \"payment_type_code\": \"webpay\", \"merchant_payment_code\": \"0x0W28D03-CL-T07\", \"currency_code\": \"CLP\", \"amount_total\": \"500\" }}' A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efded178fb076acee48b51822375075a7a8f5850241de57\", \"pin\": \"443281986\", \"country\": \"cl\", \"merchant_payment_code\": \"0x0W28D03-CL-T07\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-02 14:20:07\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"500.00\", \"amount_ext\": \"500.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"500.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"CLP\", \"due_date\": \"2020-07-05\", \"instalments\": \"1\", \"payment_type_code\": \"webpay\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efded178fb076acee48b51822375075a7a8f5850241de57\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efded178fb076acee48b51822375075a7a8f5850241de57\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Webpay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/chile/webpay#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. Notification FlowYou can set-up notification to get informed as soon as the payment is confirmed. Lern more here "
  },
  {
    "title": "Baloto with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto",
    "content": "",
    "keywords": "Baloto Voucher Colombia,Cash payment Colombia"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#about-this-guide",
    "content": "This page explains how to add Baloto to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Baloto enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#how-it-works",
    "content": "To complete Baloto integration throught EBANX Direct API, please follow the steps below.  Enable Baloto Baloto availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Baloto link (server-side) Baloto works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Baloto must be baloto country Two-letter country code - co for Colombia. Customer data: # Parameter Description name Customer name email Customer e-mail document Customer Cedula de Ciudadania , C&#xE9;dula de Extrangeria or NIT . It must be a valid document code. phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: COP , USD and EUR . amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josecolombia@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;document&quot;: &quot;4023030074&quot;, &quot;country&quot;: &quot;co&quot;, &quot;payment_type_code&quot;: &quot;baloto&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T02&quot;, &quot;currency_code&quot;: &quot;COP&quot;, &quot;amount_total&quot;: &quot;6000&quot; } }&apos; A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.baloto_url , and the voucher number will be the value of payment.voucher_id . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efca3341f6beddb8b5e9a1cfc8c3750d7c80f86ab6246d6&quot; , &quot;pin&quot; : &quot;445047859&quot; , &quot;country&quot; : &quot;co&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T02&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 14:52:36&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;6000.00&quot; , &quot;amount_ext&quot; : &quot;6000.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;6000.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;COP&quot; , &quot;due_date&quot; : &quot;2021-11-13&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;baloto&quot; , &quot;baloto_url&quot; : &quot;https://sandbox.ebanxpay.com/print/baloto/execute?hash=5efca3341f6beddb8b5e9a1cfc8c3750d7c80f86ab6246d6&quot; , &quot;voucher_id&quot; : &quot;445047859&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter baloto_url . Your customers will see an interface like this: At this point you have a pending payment in your EBANX Dashboard . caution Alternatively, you can simply deliver the voucher number to your customers. Wait for the payment Once the voucher is payed by the customer, it will take sometime to EBANX get informed by Baloto. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Baloto",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#undefined",
    "content": "Baloto availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Baloto link (server-side)",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#undefined",
    "content": "Baloto works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Baloto must be baloto country Two-letter country code - co for Colombia. Customer data: # Parameter Description name Customer name email Customer e-mail document Customer Cedula de Ciudadania , C&#xE9;dula de Extrangeria or NIT . It must be a valid document code. phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: COP , USD and EUR . amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josecolombia@example.com\", \"phone_number\": \"0405777687\", \"document\": \"4023030074\", \"country\": \"co\", \"payment_type_code\": \"baloto\", \"merchant_payment_code\": \"0x0W28D03-T02\", \"currency_code\": \"COP\", \"amount_total\": \"6000\" }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.baloto_url, and the voucher number will be the value of payment.voucher_id. Copy{ \"payment\": { \"hash\": \"5efca3341f6beddb8b5e9a1cfc8c3750d7c80f86ab6246d6\", \"pin\": \"445047859\", \"country\": \"co\", \"merchant_payment_code\": \"0x0W28D03-T02\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 14:52:36\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"6000.00\", \"amount_ext\": \"6000.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"6000.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"COP\", \"due_date\": \"2021-11-13\", \"instalments\": \"1\", \"payment_type_code\": \"baloto\", \"baloto_url\": \"https://sandbox.ebanxpay.com/print/baloto/execute?hash=5efca3341f6beddb8b5e9a1cfc8c3750d7c80f86ab6246d6\", \"voucher_id\": \"445047859\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#undefined",
    "content": "Redirect your customer to the URL returned in the parameter baloto_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. cautionAlternatively, you can simply deliver the voucher number to your customers.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Baloto with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/baloto#undefined",
    "content": "Once the voucher is payed by the customer, it will take sometime to EBANX get informed by Baloto. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "Efecty with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty",
    "content": "",
    "keywords": "Efecty Voucher Colombia,Cash payment Colombia"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#about-this-guide",
    "content": "This page explains how to add Efecty to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Efecty enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#how-it-works",
    "content": "To complete Efecty integration throught EBANX Direct API, please follow the steps below.  Enable Efecty Efecty availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the Efecty link (server-side) Efecty works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Efecty must be efecty country Two-letter country code - co for Colombia. Customer data: # Parameter Description name Customer name email Customer e-mail document Customer Cedula de Ciudadania , C&#xE9;dula de Extrangeria or NIT . It must be a valid document code. phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: COP , USD and EUR . amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josecolombia@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;document&quot;: &quot;4023030074&quot;, &quot;country&quot;: &quot;co&quot;, &quot;payment_type_code&quot;: &quot;efecty&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T88&quot;, &quot;currency_code&quot;: &quot;COP&quot;, &quot;amount_total&quot;: &quot;10000&quot; } }&apos; A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.efecty_url , and the voucher number will be the value of payment.voucher_id . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5f36ebe4957afdfa5fb0fc193b540a512dc13f8615eba22c&quot; , &quot;pin&quot; : &quot;489706693&quot; , &quot;country&quot; : &quot;co&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T88&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-08-14 19:54:11&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;10000.00&quot; , &quot;amount_ext&quot; : &quot;10000.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;10000.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;COP&quot; , &quot;due_date&quot; : &quot;2021-12-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;efecty&quot; , &quot;voucher_url&quot; : &quot;https://sandbox.ebanxpay.com/print/voucher/execute?hash=5f36ebe4957afdfa5fb0fc193b540a512dc13f8615eba22c&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter efecty_url . Your customers will see an interface like this: At this point you have a pending payment in your EBANX Dashboard . caution Alternatively, you can simply deliver the voucher number to your customers. Wait for the payment Once the voucher is payed by the customer, it will take sometime to EBANX get informed by Efecty. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Efecty",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#undefined",
    "content": "Efecty availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the Efecty link (server-side)",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#undefined",
    "content": "Efecty works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To Efecty must be efecty country Two-letter country code - co for Colombia. Customer data: # Parameter Description name Customer name email Customer e-mail document Customer Cedula de Ciudadania , C&#xE9;dula de Extrangeria or NIT . It must be a valid document code. phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: COP , USD and EUR . amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josecolombia@example.com\", \"phone_number\": \"0405777687\", \"document\": \"4023030074\", \"country\": \"co\", \"payment_type_code\": \"efecty\", \"merchant_payment_code\": \"0x0W28D03-T88\", \"currency_code\": \"COP\", \"amount_total\": \"10000\" }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.efecty_url, and the voucher number will be the value of payment.voucher_id. Copy{ \"payment\": { \"hash\": \"5f36ebe4957afdfa5fb0fc193b540a512dc13f8615eba22c\", \"pin\": \"489706693\", \"country\": \"co\", \"merchant_payment_code\": \"0x0W28D03-T88\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-08-14 19:54:11\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"10000.00\", \"amount_ext\": \"10000.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"10000.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"COP\", \"due_date\": \"2021-12-27\", \"instalments\": \"1\", \"payment_type_code\": \"efecty\", \"voucher_url\": \"https://sandbox.ebanxpay.com/print/voucher/execute?hash=5f36ebe4957afdfa5fb0fc193b540a512dc13f8615eba22c\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#undefined",
    "content": "Redirect your customer to the URL returned in the parameter efecty_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. cautionAlternatively, you can simply deliver the voucher number to your customers.  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "Efecty with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/efecty#undefined",
    "content": "Once the voucher is payed by the customer, it will take sometime to EBANX get informed by Efecty. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "PSE with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse",
    "content": "",
    "keywords": "PSE Pagos Seguros en Línea"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#about-this-guide",
    "content": "This page explains how to add PSE (Pagos Seguros en Línea) to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;PSE (Pagos Seguros en Línea) enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#how-it-works",
    "content": "To complete PSE integration throught EBANX Direct API, please follow the steps below.  Enable PSE (Pagos Seguros en L&#xED;nea) PSE availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Get the available banks to work with PSE (Pagos Seguros en L&#xED;nea) To get the list of available banks for PSE , you must call the end-point /ws/getBankList . Copy curl -X GET -G &apos;https://sandbox.ebanxpay.com/ws/getBankList&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;country_code=co&apos; A successful request will return a array with JSON objects similar to the one below. Copy [ { &quot;code&quot; : &quot;banco_agrario&quot; , &quot;name&quot; : &quot;BANCO AGRARIO&quot; } , { &quot;code&quot; : &quot;banco_av_villas&quot; , &quot;name&quot; : &quot;BANCO AV VILLAS&quot; } , { &quot;code&quot; : &quot;banco_bbva_colombia_s.a.&quot; , &quot;name&quot; : &quot;BANCO BBVA COLOMBIA S.A.&quot; } , ... ] note To make a payment with PSE, your customers must select which bank they would like to use. The name of the banks in responde above, should be displayed in a drop-down field in your payment form (like the example below) and the bank code of the selected bank, must be used in the parameter eft_code in the next step. With the response above, your customers will have to s Call the /ws/direct end-point to get the PSE link (server-side) With PSE , your consumers are redirected to their online-banking website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To PSE must be eft eft_code Code of the selected bank country Two-letter country code - co for Colombia. Customer data: # Parameter Description name Customer name email Customer e-mail document Customer Cedula de Ciudadania , C&#xE9;dula de Extrangeria or NIT . It must be a valid document code. phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: COP , USD and EUR . amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josecolombia@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;document&quot;: &quot;4023030074&quot;, &quot;country&quot;: &quot;co&quot;, &quot;payment_type_code&quot;: &quot;eft&quot;, &quot;eft_code&quot;: &quot;banco_agrario&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T01&quot;, &quot;currency_code&quot;: &quot;COP&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to PSE environment will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efc8aca4b12fbb7f069deca9a3cb61c18feb68415aeca4c&quot; , &quot;pin&quot; : &quot;489328391&quot; , &quot;country&quot; : &quot;co&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T01&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 13:08:26&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;COP&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;eft&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efc8aca4b12fbb7f069deca9a3cb61c18feb68415aeca4c&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efc8aca4b12fbb7f069deca9a3cb61c18feb68415aeca4c&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will select the bank and betransferred to their online-banking environment, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment After the payment in the Customer&apos;s online-banking environment, it will take sometime to EBANX get informed by the bank. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable PSE (Pagos Seguros en Línea)",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#undefined",
    "content": "PSE availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Get the available banks to work with PSE (Pagos Seguros en Línea)",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#undefined",
    "content": "To get the list of available banks for PSE, you must call the end-point /ws/getBankList. Copycurl -X GET -G 'https://sandbox.ebanxpay.com/ws/getBankList' \\-d 'integration_key=your_test_integration_key' \\-d 'country_code=co' A successful request will return a array with JSON objects similar to the one below. Copy[ { \"code\":\"banco_agrario\", \"name\":\"BANCO AGRARIO\" }, { \"code\":\"banco_av_villas\", \"name\":\"BANCO AV VILLAS\" }, { \"code\":\"banco_bbva_colombia_s.a.\", \"name\":\"BANCO BBVA COLOMBIA S.A.\" }, ...] noteTo make a payment with PSE, your customers must select which bank they would like to use. The name of the banks in responde above, should be displayed in a drop-down field in your payment form (like the example below) and the bank code of the selected bank, must be used in the parameter eft_code in the next step. With the response above, your customers will have to s  "
  },
  {
    "title": "Call the /ws/direct end-point to get the PSE link (server-side)",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#undefined",
    "content": "With PSE, your consumers are redirected to their online-banking website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To PSE must be eft eft_code Code of the selected bank country Two-letter country code - co for Colombia. Customer data: # Parameter Description name Customer name email Customer e-mail document Customer Cedula de Ciudadania , C&#xE9;dula de Extrangeria or NIT . It must be a valid document code. phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: COP , USD and EUR . amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josecolombia@example.com\", \"phone_number\": \"0405777687\", \"document\": \"4023030074\", \"country\": \"co\", \"payment_type_code\": \"eft\", \"eft_code\": \"banco_agrario\", \"merchant_payment_code\": \"0x0W28D03-T01\", \"currency_code\": \"COP\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to PSE environment will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efc8aca4b12fbb7f069deca9a3cb61c18feb68415aeca4c\", \"pin\": \"489328391\", \"country\": \"co\", \"merchant_payment_code\": \"0x0W28D03-T01\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 13:08:26\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"COP\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"eft\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efc8aca4b12fbb7f069deca9a3cb61c18feb68415aeca4c\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efc8aca4b12fbb7f069deca9a3cb61c18feb68415aeca4c\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will select the bank and betransferred to their online-banking environment, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "PSE with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/colombia/pse#undefined",
    "content": "After the payment in the Customer's online-banking environment, it will take sometime to EBANX get informed by the bank. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "Credit Card integration#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards",
    "content": "",
    "keywords": "Credit Cards"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#about-this-guide",
    "content": "This page explains how to add Credit Cards to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "Availability",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#availability",
    "content": "Credit Card integration throught Direct API is available to the following countries: Argentina;Brazil;Colombia;Mexico;Peru;Uruguay; "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. Do not have it? Please sign up for an Sandbox Account here;Credit Cards enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#how-it-works",
    "content": "To complete Credit Cards integration throught EBANX Direct API, please follow the steps below.  Enable Credit Cards in your dashboard The first step is to check if Credit Cards are active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Make sure you have all the mandatory fields in your request The Credit Card integration is basically the same to all the countries with just some few details and specificities to some of the them, such as required fields or number of installments. Make sure you covered everything in your request. As a starting point, your request must have the payment_type_code set as creditcard , as well as the creditcard schema below. The Creditcard schema: # The below fields are mandatory in your request. Field Description card_number Credit card number. card_name Credit card cardholder name. card_due_date Credit card due date (&#x201C;valid thru&#x201D;) in the format mm/yyyy. card_cvv Credit card security code. Optional fields # The below fields are optional in your request. Field Description installments Number of installments. If you don&apos;t know how installments works, take a look in this tutorial auto_capture Related with two-stepes payment (Authorization/capture). If true, the payment will be captured automatically by EBANX; if false, the payment will have to be captured by the merchant using the API method capture. caution Both installments and two-step payments may vary depending on the country. Please, check below the specificities. Particularities to Credit Card payments to each country # When talking about Latin America, there are some particularities to Credit Card payments to each one of the countries. Please, take a look at those differences below: Argentina Brazil Colombia Mexico Uruguay Installments # In Brazil , the accepted number of installments (informed in the field installments ) can be any value from 1 to 12 to any Credit Card brand but American Express and Elo. When using American Express or ELO, the accepted number of installments can be any value from 1 to 12. Two steps payment # Two-steps payment with credit cards (Authorization and capture, enabled with the parameter auto_capture ) is fully available in Brazil. The default value to auto_capture parameter is true. When set to false, EBANX first issues an authorization (sometimes called as pre-authorization) that will have to be captured later in this step . Authorized-only payments will have status PE (pending) until its capture. After the capture, the payment status will be changed to CO (confirmed). note Uncaptured payments will be automatically expired. Complete EBANX Direct API Reference The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Send your payment request to EBANX Now, you just need to send your payment request to EBANX, below you can check some examples to the different countries that accepts Credit Cards: Argentina Brazil Colombia Mexico Peru Uruguay Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -d &apos;request_body={ &quot;integration_key&quot;: &quot;your_test_integration_key_here&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;jose@example.com&quot;, &quot;document&quot;: &quot;853.513.468-93&quot;, &quot;address&quot;: &quot;Rua E&quot;, &quot;street_number&quot;: &quot;1040&quot;, &quot;city&quot;: &quot;Maracana&#xFA;&quot;, &quot;state&quot;: &quot;CE&quot;, &quot;zipcode&quot;: &quot;61919-230&quot;, &quot;country&quot;: &quot;br&quot;, &quot;phone_number&quot;: &quot;8522847035&quot;, &quot;payment_type_code&quot;: &quot;creditcard&quot;, &quot;merchant_payment_code&quot;: &quot;3ad1f4096a2&quot;, &quot;currency_code&quot;: &quot;BRL&quot;, &quot;instalments&quot;: 3, &quot;amount_total&quot;: 100, &quot;creditcard&quot;: { &quot;card_number&quot;: &quot;4111111111111111&quot;, &quot;card_name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;card_due_date&quot;: &quot;12/2019&quot;, &quot;card_cvv&quot;: &quot;123&quot; } } }&apos; A successful request will return a JSON response similar to the one below. Credit card payments for merchants with fraud checking enable will have status PE (pending), while for merchants that have fraud checking disabled and auto_capture set to true it will have status CO (confirmed). Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;59ad5f00945fa382ab051651440826da7701533249b3a475&quot; , &quot;pin&quot; : &quot;045868576&quot; , &quot;merchant_payment_code&quot; : &quot;ecc9be4512a&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2017-09-04 14:11:12&quot; , &quot;open_date&quot; : &quot;2017-09-04 14:11:11&quot; , &quot;confirm_date&quot; : &quot;2017-09-04 14:11:12&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.38&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2017-09-07&quot; , &quot;instalments&quot; : &quot;3&quot; , &quot;payment_type_code&quot; : &quot;visa&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Sandbox - Test credit card, transaction captured&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : false } , &quot;status&quot; : &quot;SUCCESS&quot; } Capture the payment (required only to two-steps flow) Capture the payment # Only applied to Two-steps payment This step is only required if the payment request was done with the parameter auto_capture set to false in order to capture an already existing uncaptured payment. This is the second part of the two-steps payment , which in the first step you have already authorized the payment, that is now with PE status (pending), and now we just have to capture it in order to have a CO payment (confirmed). Here you can check a response example of a payment request done with auto_capture set to false . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa&quot; , &quot;pin&quot; : &quot;025107300&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W27D03-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-06-24 17:22:26&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;99.62&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2020-06-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;visa&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;DEMONSTRATION&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Accepted&quot; , &quot;authcode&quot; : &quot;87299&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : true } , &quot;status&quot; : &quot;SUCCESS&quot; } In order to capture the payment, you must call the end-point ws/capture using the hash or merchant_payment_code (highlighted in the response below) of the previously authorized transaction. Here two examples, with the hash and merchant_payment_code . Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/capture&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;hash=5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa&apos; Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/capture&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;merchant_payment_code=0x0W27D03-T04&apos; A successful request will return a JSON response similar to the one below. Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa&quot; , &quot;pin&quot; : &quot;025107300&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W27D03-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2020-06-24 17:51:08&quot; , &quot;open_date&quot; : &quot;2020-06-24 17:22:26&quot; , &quot;confirm_date&quot; : &quot;2020-06-24 17:51:08&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;99.62&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2020-06-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;visa&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;DEMONSTRATION&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Accepted&quot; , &quot;authcode&quot; : &quot;87299&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : false } , &quot;status&quot; : &quot;SUCCESS&quot; } note Uncaptured payments will be automatically expired. Complete EBANX Direct API Reference The complete API reference for the end-point ws/capture can be found here . We strongly recommend you to take a look in all the available options.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Credit Cards in your dashboard",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#undefined",
    "content": "The first step is to check if Credit Cards are active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Make sure you have all the mandatory fields in your request",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#undefined",
    "content": "The Credit Card integration is basically the same to all the countries with just some few details and specificities to some of the them, such as required fields or number of installments. Make sure you covered everything in your request. As a starting point, your request must have the payment_type_code set as creditcard, as well as the creditcard schema below. The Creditcard schema:# The below fields are mandatory in your request.  Field Description card_number Credit card number. card_name Credit card cardholder name. card_due_date Credit card due date (&#x201C;valid thru&#x201D;) in the format mm/yyyy. card_cvv Credit card security code.  Optional fields# The below fields are optional in your request.  Field Description installments Number of installments. If you don&apos;t know how installments works, take a look in this tutorial auto_capture Related with two-stepes payment (Authorization/capture). If true, the payment will be captured automatically by EBANX; if false, the payment will have to be captured by the merchant using the API method capture.  cautionBoth installments and two-step payments may vary depending on the country. Please, check below the specificities. Particularities to Credit Card payments to each country# When talking about Latin America, there are some particularities to Credit Card payments to each one of the countries. Please, take a look at those differences below: ArgentinaBrazilColombiaMexicoUruguayInstallments#In Brazil, the accepted number of installments (informed in the field installments) can be any value from 1 to 12 to any Credit Card brand but American Express and Elo. When using American Express or ELO, the accepted number of installments can be any value from 1 to 12.Two steps payment#Two-steps payment with credit cards (Authorization and capture, enabled with the parameter auto_capture) is fully available in Brazil.The default value to auto_capture parameter is true. When set to false, EBANX first issues an authorization (sometimes called as pre-authorization) that will have to be captured later in this step. Authorized-only payments will have status PE (pending) until its capture. After the capture, the payment status will be changed to CO (confirmed).noteUncaptured payments will be automatically expired. Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Send your payment request to EBANX",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#undefined",
    "content": "Now, you just need to send your payment request to EBANX, below you can check some examples to the different countries that accepts Credit Cards: ArgentinaBrazilColombiaMexicoPeruUruguayCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"your_test_integration_key_here\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"creditcard\", \"merchant_payment_code\": \"3ad1f4096a2\", \"currency_code\": \"BRL\", \"instalments\": 3, \"amount_total\": 100, \"creditcard\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" } }}'A successful request will return a JSON response similar to the one below. Credit card payments for merchants with fraud checking enable will have status PE (pending), while for merchants that have fraud checking disabled and auto_capture set to true it will have status CO (confirmed).Copy{\"payment\": { \"hash\": \"59ad5f00945fa382ab051651440826da7701533249b3a475\", \"pin\": \"045868576\", \"merchant_payment_code\": \"ecc9be4512a\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2017-09-04 14:11:12\", \"open_date\": \"2017-09-04 14:11:11\", \"confirm_date\": \"2017-09-04 14:11:12\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-09-07\", \"instalments\": \"3\", \"payment_type_code\": \"visa\", \"details\": { \"billing_descriptor\": \"\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Sandbox - Test credit card, transaction captured\" }, \"pre_approved\": true, \"capture_available\": false},\"status\": \"SUCCESS\"} "
  },
  {
    "title": "Capture the payment (required only to two-steps flow)",
    "type": 1,
    "pageTitle": "Credit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/credit-cards#undefined",
    "content": "Capture the payment# Only applied to Two-steps paymentThis step is only required if the payment request was done with the parameter auto_capture set to false in order to capture an already existing uncaptured payment.  This is the second part of the two-steps payment, which in the first step you have already authorized the payment, that is now with PE status (pending), and now we just have to capture it in order to have a CO payment (confirmed). Here you can check a response example of a payment request done with auto_capture set to false.  Copy{ \"payment\": { \"hash\": \"5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa\", \"pin\": \"025107300\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W27D03-T04\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-06-24 17:22:26\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-27\", \"instalments\": \"1\", \"payment_type_code\": \"visa\", \"details\": { \"billing_descriptor\": \"DEMONSTRATION\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Accepted\", \"authcode\": \"87299\" }, \"pre_approved\": true, \"capture_available\": true }, \"status\": \"SUCCESS\"}  In order to capture the payment, you must call the end-point ws/capture using the hash or merchant_payment_code (highlighted in the response below) of the previously authorized transaction. Here two examples, with the hash and merchant_payment_code. Copycurl -X POST -G 'https://sandbox.ebanxpay.com/ws/capture' \\ -d 'integration_key=your_test_integration_key' \\ -d 'hash=5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa' Copycurl -X POST -G 'https://sandbox.ebanxpay.com/ws/capture' \\ -d 'integration_key=your_test_integration_key' \\ -d 'merchant_payment_code=0x0W27D03-T04' A successful request will return a JSON response similar to the one below. Copy{ \"payment\": { \"hash\": \"5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa\", \"pin\": \"025107300\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W27D03-T04\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2020-06-24 17:51:08\", \"open_date\": \"2020-06-24 17:22:26\", \"confirm_date\": \"2020-06-24 17:51:08\", \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-27\", \"instalments\": \"1\", \"payment_type_code\": \"visa\", \"details\": { \"billing_descriptor\": \"DEMONSTRATION\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Accepted\", \"authcode\": \"87299\" }, \"pre_approved\": true, \"capture_available\": false }, \"status\": \"SUCCESS\"} noteUncaptured payments will be automatically expired. Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/capture can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Debit Card integration#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards",
    "content": "",
    "keywords": "Debit Cards"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#about-this-guide",
    "content": "This page explains how to add Debit Cards to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "Availability",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#availability",
    "content": "Debit Card integration throught Direct API is available to the following countries: Argentina;Brazil;ChileMexico;Peru;Uruguay; "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. Do not have it? Please sign up for an Sandbox Account here;Debit Cards enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#how-it-works",
    "content": "To complete Debit Cards integration through EBANX Direct API, please follow the steps below.  Enable Debit Cards in your dashboard The first step is to check if Debit Cards are active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Make sure you have all the mandatory fields in your request The Debit Card integration is basically the same to all the countries with just some few details and specificities to some of the them, such as required fields. Make sure you covered everything in your request. Important! For payments with Debit Cards in Brazil, 3DS 2.0 is required. Check this guide for all the details. As a starting point, your request must have the payment_type_code set as debitcard , as well as the card schema below. The Card schema: # The below fields are mandatory in your request. Field Description card_number Debit card number. card_name Debit card cardholder name. card_due_date Debit card due date (&#x201C;valid thru&#x201D;) in the format mm/yyyy. card_cvv Debit card security code. Particularities to Debit Card payments to each country # When talking about Latin America, there are some particularities to Debit Card payments to each one of the countries. Please, take a look at those differences below: Argentina Brazil Colombia Mexico Uruguay 3DS 2.0 # Debit cards transactions in Brazil require additional authentication, through 3DS 2.0. Check this guide for all the details. Complete EBANX Direct API Reference The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Send your payment request to EBANX Now, you just need to send your payment request to EBANX, below you can check some examples to the different countries that accepts Debit Cards: Argentina Brazil Colombia Mexico Peru Uruguay Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -d &apos;request_body={ &quot;integration_key&quot;: &quot;your_test_integration_key_here&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;jose@example.com&quot;, &quot;document&quot;: &quot;853.513.468-93&quot;, &quot;address&quot;: &quot;Rua E&quot;, &quot;street_number&quot;: &quot;1040&quot;, &quot;city&quot;: &quot;Maracana&#xFA;&quot;, &quot;state&quot;: &quot;CE&quot;, &quot;zipcode&quot;: &quot;61919-230&quot;, &quot;country&quot;: &quot;br&quot;, &quot;phone_number&quot;: &quot;8522847035&quot;, &quot;payment_type_code&quot;: &quot;debitcard&quot;, &quot;merchant_payment_code&quot;: &quot;3ad1f4096a2&quot;, &quot;currency_code&quot;: &quot;BRL&quot;, &quot;instalments&quot;: 3, &quot;amount_total&quot;: 100, &quot;card&quot;: { &quot;card_number&quot;: &quot;4111111111111111&quot;, &quot;card_name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;card_due_date&quot;: &quot;12/2019&quot;, &quot;card_cvv&quot;: &quot;123&quot; &quot;threeds_eci&quot;: &quot;05&quot;, &quot;threeds_cryptogram&quot;: &quot;AAIBAkl0NwmHglFBAXQ3AAAAAAA&quot;, &quot;threeds_xid&quot;: &quot;AAIBAkl0NwmHglFBAXQ3AAAAAAA&quot;, &quot;threeds_version&quot;: &quot;2&quot;, &quot;threeds_trxid&quot;: &quot;AAIBAkl0NwmHglFBAXQ3AAAAAAA&quot; } } }&apos; A successful request will return a JSON response similar to the one below. Debit card payments for merchants with fraud checking enable will have status PE (pending), while for merchants that have fraud checking disabled and auto_capture set to true it will have status CO (confirmed). Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;59ad5f00945fa382ab051651440826da7701533249b3a475&quot; , &quot;pin&quot; : &quot;045868576&quot; , &quot;merchant_payment_code&quot; : &quot;ecc9be4512a&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2017-09-04 14:11:12&quot; , &quot;open_date&quot; : &quot;2017-09-04 14:11:11&quot; , &quot;confirm_date&quot; : &quot;2017-09-04 14:11:12&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.38&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2017-09-07&quot; , &quot;instalments&quot; : &quot;3&quot; , &quot;payment_type_code&quot; : &quot;debitcard&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Sandbox - Test debit card, transaction captured&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : false } , &quot;status&quot; : &quot;SUCCESS&quot; } Capture the payment (required only to two-steps flow) Capture the payment # Only applied to Two-steps payment This step is only required if the payment request was done with the parameter auto_capture set to false in order to capture an already existing uncaptured payment. This is the second part of the two-steps payment , which in the first step you have already authorized the payment, that is now with PE status (pending), and now we just have to capture it in order to have a CO payment (confirmed). Here you can check a response example of a payment request done with auto_capture set to false . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa&quot; , &quot;pin&quot; : &quot;025107300&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W27D03-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-06-24 17:22:26&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;99.62&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2020-06-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;debitcard&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;DEMONSTRATION&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Accepted&quot; , &quot;authcode&quot; : &quot;87299&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : true } , &quot;status&quot; : &quot;SUCCESS&quot; } In order to capture the payment, you must call the end-point ws/capture using the hash or merchant_payment_code (highlighted in the response below) of the previously authorized transaction. Here two examples, with the hash and merchant_payment_code . Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/capture&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;hash=5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa&apos; Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/capture&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;merchant_payment_code=0x0W27D03-T04&apos; A successful request will return a JSON response similar to the one below. Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa&quot; , &quot;pin&quot; : &quot;025107300&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W27D03-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2020-06-24 17:51:08&quot; , &quot;open_date&quot; : &quot;2020-06-24 17:22:26&quot; , &quot;confirm_date&quot; : &quot;2020-06-24 17:51:08&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;99.62&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2020-06-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;debitcard&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;DEMONSTRATION&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Accepted&quot; , &quot;authcode&quot; : &quot;87299&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : false } , &quot;status&quot; : &quot;SUCCESS&quot; } note Uncaptured payments will be automatically expired. Complete EBANX Direct API Reference The complete API reference for the end-point ws/capture can be found here . We strongly recommend you to take a look in all the available options.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable Debit Cards in your dashboard",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#undefined",
    "content": "The first step is to check if Debit Cards are active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Make sure you have all the mandatory fields in your request",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#undefined",
    "content": "The Debit Card integration is basically the same to all the countries with just some few details and specificities to some of the them, such as required fields. Make sure you covered everything in your request. Important!For payments with Debit Cards in Brazil, 3DS 2.0 is required. Check this guide for all the details. As a starting point, your request must have the payment_type_code set as debitcard, as well as the card schema below. The Card schema:# The below fields are mandatory in your request.  Field Description card_number Debit card number. card_name Debit card cardholder name. card_due_date Debit card due date (&#x201C;valid thru&#x201D;) in the format mm/yyyy. card_cvv Debit card security code.  Particularities to Debit Card payments to each country# When talking about Latin America, there are some particularities to Debit Card payments to each one of the countries. Please, take a look at those differences below: ArgentinaBrazilColombiaMexicoUruguay3DS 2.0#Debit cards transactions in Brazil require additional authentication, through 3DS 2.0. Check this guide for all the details. Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Send your payment request to EBANX",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#undefined",
    "content": "Now, you just need to send your payment request to EBANX, below you can check some examples to the different countries that accepts Debit Cards: ArgentinaBrazilColombiaMexicoPeruUruguayCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"your_test_integration_key_here\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"debitcard\", \"merchant_payment_code\": \"3ad1f4096a2\", \"currency_code\": \"BRL\", \"instalments\": 3, \"amount_total\": 100, \"card\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" \"threeds_eci\": \"05\", \"threeds_cryptogram\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", \"threeds_xid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\", \"threeds_version\": \"2\", \"threeds_trxid\": \"AAIBAkl0NwmHglFBAXQ3AAAAAAA\" } }}'A successful request will return a JSON response similar to the one below. Debit card payments for merchants with fraud checking enable will have status PE (pending), while for merchants that have fraud checking disabled and auto_capture set to true it will have status CO (confirmed).Copy{\"payment\": { \"hash\": \"59ad5f00945fa382ab051651440826da7701533249b3a475\", \"pin\": \"045868576\", \"merchant_payment_code\": \"ecc9be4512a\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2017-09-04 14:11:12\", \"open_date\": \"2017-09-04 14:11:11\", \"confirm_date\": \"2017-09-04 14:11:12\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-09-07\", \"instalments\": \"3\", \"payment_type_code\": \"debitcard\", \"details\": { \"billing_descriptor\": \"\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Sandbox - Test debit card, transaction captured\" }, \"pre_approved\": true, \"capture_available\": false},\"status\": \"SUCCESS\"} "
  },
  {
    "title": "Capture the payment (required only to two-steps flow)",
    "type": 1,
    "pageTitle": "Debit Card integration#",
    "url": "docs/payments/guides/accept-payments/api/debit-cards#undefined",
    "content": "Capture the payment# Only applied to Two-steps paymentThis step is only required if the payment request was done with the parameter auto_capture set to false in order to capture an already existing uncaptured payment.  This is the second part of the two-steps payment, which in the first step you have already authorized the payment, that is now with PE status (pending), and now we just have to capture it in order to have a CO payment (confirmed). Here you can check a response example of a payment request done with auto_capture set to false.  Copy{ \"payment\": { \"hash\": \"5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa\", \"pin\": \"025107300\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W27D03-T04\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-06-24 17:22:26\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-27\", \"instalments\": \"1\", \"payment_type_code\": \"debitcard\", \"details\": { \"billing_descriptor\": \"DEMONSTRATION\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Accepted\", \"authcode\": \"87299\" }, \"pre_approved\": true, \"capture_available\": true }, \"status\": \"SUCCESS\"}  In order to capture the payment, you must call the end-point ws/capture using the hash or merchant_payment_code (highlighted in the response below) of the previously authorized transaction. Here two examples, with the hash and merchant_payment_code. Copycurl -X POST -G 'https://sandbox.ebanxpay.com/ws/capture' \\ -d 'integration_key=your_test_integration_key' \\ -d 'hash=5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa' Copycurl -X POST -G 'https://sandbox.ebanxpay.com/ws/capture' \\ -d 'integration_key=your_test_integration_key' \\ -d 'merchant_payment_code=0x0W27D03-T04' A successful request will return a JSON response similar to the one below. Copy{ \"payment\": { \"hash\": \"5ef38bd200a530d9a4c218b054744cb81f9b25c99d4365aa\", \"pin\": \"025107300\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W27D03-T04\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2020-06-24 17:51:08\", \"open_date\": \"2020-06-24 17:22:26\", \"confirm_date\": \"2020-06-24 17:51:08\", \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"99.62\", \"amount_iof\": \"0.38\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-27\", \"instalments\": \"1\", \"payment_type_code\": \"debitcard\", \"details\": { \"billing_descriptor\": \"DEMONSTRATION\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Accepted\", \"authcode\": \"87299\" }, \"pre_approved\": true, \"capture_available\": false }, \"status\": \"SUCCESS\"} noteUncaptured payments will be automatically expired. Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/capture can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Digital Wallet with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets",
    "content": "",
    "keywords": "Digital Wallets e-wallets"
  },
  {
    "title": "Overview",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#overview",
    "content": "This guide will walk you through a basic API integration that accept e-wallet payments in EBANX. "
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#about-this-guide",
    "content": "By following this basic integration guide, you will understand how you can accept e-wallet payments in your ckeck-out, by using EBANX Direct API. To complete a payment with e-wallets you will, basically, need to call two of our APIs, one to check the e-wallet availability and another one to make the payment.  "
  },
  {
    "title": "Availability",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#availability",
    "content": "Digital Wallet integration throught Direct API is available to the following countries and e-wallets: Brazil;MercadoPagoPayPalPicpayColombia;Nequi "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#what-you-will-need",
    "content": ""
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#how-it-works",
    "content": "To complete an e-wallet payment, please follow the steps below. Get the available e-walllets#E-Wallets availability may vary depending on your country and contract. So the first step is to check and get more information about the available e-wallets.Copycurl --location --request POST 'https://api.ebanx.com/ws/ewallet-availableEWallets' \\--header 'Content-Type: application/json' \\--data-raw '{ \"integration_key\":{{your_integration_key}}, \"country\":\"co\"}'This method will return you all the necessary information that you need to render e-wallets in your page, such as e-wallet name, icons and ,if available, some promotional content.To learn more about the method getAvailableEWallets, you can check our the complete API referenceUse the response to render e-wallets in your page.#Now you have everything you need to render e-wallets in your page. Below you can find an example of the ewallet-availableEWallets method response.Copy[ { \"code\": \"nequi\", \"name\": \"Nequi\", \"icon_url\": \"https://s3-sa-east-1.amazonaws.com/assets.ebanx.com/gateway/nequi/icon.png\", \"promotional_text\": \"¡Texto promocional de prueba!\" }]Don't know exactly how to use it? You can use our payment page as a benchmark to render it in your check-out 😉.Call our direct API with the e-wallet payment_type_code#After getting the e-wallet code you need to use it in EBANX Direct API, as a payment_type_code.Copy{ \"integration_key\": \"*****\", \"operation\": \"request\", \"mode\": \"full\", \"payment\": { \"amount_total\": 20, \"currency_code\": \"COP\", \"name\": \"Test Customer\", \"email\": \"test@example.com\", \"payment_type_code\": \"nequi\", \"redirect_url\": \"https://your-call-back-url.com\", \"birth_date\": \"12/04/1979\", \"document\": \"7969999\", \"country\": \"co\", \"zipcode\": \"11001000\", \"address\": \"Rua Principal\", \"street_number\": \"15\", \"city\": \"Bogotá\", \"phone_number\": \"3199999999\", \"state\": \"DC\" }}The response of this call will have a re-direct link that will be used in the next step.Copy { \"payment\": { \"hash\": \"5ec27f3b86fa8e3123452345626aec3989aa2ceccdb7\", \"pin\": \"237274394\", \"country\": \"co\", \"merchant_payment_code\": \"xyz-123-1001\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-05-18 12:27:38\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"1.00\", \"amount_ext\": \"1.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"COP\", \"due_date\": \"2020-05-21\", \"instalments\": \"1\", \"payment_type_code\": \"nequi\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318dd345234523553626aec3989aa2ceccdb7\"}To learn more about the method EBANX Direct API, you can check our the complete API referenceThe e-wallet payment basically works like a voucher, as a pending payment will be generated and will be confirmed just after the customer pays it with his/her e-wallet. For Nequi, if the customer registered a mobile number registered, she/he will receive a push notification and will be able to conclude the payment through the mobile app.Redirect customer to the link#Now you just need to redirect customer to the link returned by us.Copy ... \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", ...Here you can find one example of the content of the redirection page.As soon as EBANX identifies that the payment was confirmed, customer will be redirected to the callback url informed in the direct request. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#getting-help",
    "content": "If you have any doubts or need help, you can send and email to: EBANX Integration "
  },
  {
    "title": "A Sandbox Account",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#a-sandbox-account",
    "content": "As with any secure payment integration, you will first need to set up authorization. The EBANX sandbox allows you to set up a test environment to run transactions using test credit card numbers and explore our payment solutions. Sign up for an Sandbox Account at our EBANX Business Page, select your business model and answer a few questions. We'll get in touch with you shortly after! Sign up for an EBANX Sandbox Account here "
  },
  {
    "title": "Get the available e-walllets",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#get-the-available-e-walllets",
    "content": "E-Wallets availability may vary depending on your country and contract. So the first step is to check and get more information about the available e-wallets. Copycurl --location --request POST 'https://api.ebanx.com/ws/ewallet-availableEWallets' \\--header 'Content-Type: application/json' \\--data-raw '{ \"integration_key\":{{your_integration_key}}, \"country\":\"co\"}' This method will return you all the necessary information that you need to render e-wallets in your page, such as e-wallet name, icons and ,if available, some promotional content. To learn more about the method getAvailableEWallets, you can check our the complete API reference "
  },
  {
    "title": "Use the response to render e-wallets in your page.",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#use-the-response-to-render-e-wallets-in-your-page",
    "content": "Now you have everything you need to render e-wallets in your page. Below you can find an example of the ewallet-availableEWallets method response. Copy[ { \"code\": \"nequi\", \"name\": \"Nequi\", \"icon_url\": \"https://s3-sa-east-1.amazonaws.com/assets.ebanx.com/gateway/nequi/icon.png\", \"promotional_text\": \"¡Texto promocional de prueba!\" }] Don't know exactly how to use it? You can use our payment page as a benchmark to render it in your check-out 😉.  "
  },
  {
    "title": "Call our direct API with the e-wallet payment_type_code",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#call-our-direct-api-with-the-e-wallet-payment_type_code",
    "content": "After getting the e-wallet code you need to use it in EBANX Direct API, as a payment_type_code. Copy{ \"integration_key\": \"*****\", \"operation\": \"request\", \"mode\": \"full\", \"payment\": { \"amount_total\": 20, \"currency_code\": \"COP\", \"name\": \"Test Customer\", \"email\": \"test@example.com\", \"payment_type_code\": \"nequi\", \"redirect_url\": \"https://your-call-back-url.com\", \"birth_date\": \"12/04/1979\", \"document\": \"7969999\", \"country\": \"co\", \"zipcode\": \"11001000\", \"address\": \"Rua Principal\", \"street_number\": \"15\", \"city\": \"Bogotá\", \"phone_number\": \"3199999999\", \"state\": \"DC\" }} The response of this call will have a re-direct link that will be used in the next step. Copy { \"payment\": { \"hash\": \"5ec27f3b86fa8e3123452345626aec3989aa2ceccdb7\", \"pin\": \"237274394\", \"country\": \"co\", \"merchant_payment_code\": \"xyz-123-1001\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-05-18 12:27:38\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"1.00\", \"amount_ext\": \"1.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"COP\", \"due_date\": \"2020-05-21\", \"instalments\": \"1\", \"payment_type_code\": \"nequi\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318dd345234523553626aec3989aa2ceccdb7\"} To learn more about the method EBANX Direct API, you can check our the complete API reference The e-wallet payment basically works like a voucher, as a pending payment will be generated and will be confirmed just after the customer pays it with his/her e-wallet. For Nequi, if the customer registered a mobile number registered, she/he will receive a push notification and will be able to conclude the payment through the mobile app. "
  },
  {
    "title": "Redirect customer to the link",
    "type": 1,
    "pageTitle": "Digital Wallet with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/digital-wallets#redirect-customer-to-the-link",
    "content": "Now you just need to redirect customer to the link returned by us. Copy ... \"redirect_url\": \"https://api.ebanx.com/ws/redirect/execute?hash=5ec27f3b86fa8e318ddcc9727453626aec3989aa2ceccdb7\", ... Here you can find one example of the content of the redirection page.  As soon as EBANX identifies that the payment was confirmed, customer will be redirected to the callback url informed in the direct request. "
  },
  {
    "title": "SafetyPay with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay",
    "content": "",
    "keywords": "SafetyPay Cash Payment Ecuador"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#about-this-guide",
    "content": "This page explains how to add SafetyPay to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;SafetyPay enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#how-it-works",
    "content": "To complete SafetyPay integration throught EBANX Direct API, please follow the steps below.  Enable SafetyPay SafetyPay availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the SafetyPay link (server-side) With SafetyPay , your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To SafetyPay must be safetypay-cash to SafetyPay Cash or safetypay-online to SafetyPay Online country Two-letter country code - ec for Ecuador. info Both SafetyPay Cash and SafetyPay Online will be a redirect and will work in the same way. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported value: USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josesilvaEcuador@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;ec&quot;, &quot;payment_type_code&quot;: &quot;safetypay-cash&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T14&quot;, &quot;currency_code&quot;: &quot;USD&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efccd9f520dfe822be625ededee0473db66a5b29c9bae03&quot; , &quot;pin&quot; : &quot;407710453&quot; , &quot;country&quot; : &quot;ec&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T14&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 17:53:34&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;USD&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;safetypay-cash&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efccd9f520dfe822be625ededee0473db66a5b29c9bae03&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efccd9f520dfe822be625ededee0473db66a5b29c9bae03&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable SafetyPay",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#undefined",
    "content": "SafetyPay availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the SafetyPay link (server-side)",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#undefined",
    "content": "With SafetyPay, your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To SafetyPay must be safetypay-cash to SafetyPay Cash or safetypay-online to SafetyPay Online country Two-letter country code - ec for Ecuador. info Both SafetyPay Cash and SafetyPay Online will be a redirect and will work in the same way. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported value: USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"josesilvaEcuador@example.com\", \"phone_number\": \"0405777687\", \"country\": \"ec\", \"payment_type_code\": \"safetypay-cash\", \"merchant_payment_code\": \"0x0W28D03-T14\", \"currency_code\": \"USD\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efccd9f520dfe822be625ededee0473db66a5b29c9bae03\", \"pin\": \"407710453\", \"country\": \"ec\", \"merchant_payment_code\": \"0x0W28D03-T14\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 17:53:34\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"USD\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"safetypay-cash\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efccd9f520dfe822be625ededee0473db66a5b29c9bae03\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efccd9f520dfe822be625ededee0473db66a5b29c9bae03\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/ecuador/safety-pay#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "OXXO with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo",
    "content": "",
    "keywords": "OXXO Voucher Mexico,Cash payment Mexico"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#about-this-guide",
    "content": "This page explains how to add OXXO to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;OXXO enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#how-it-works",
    "content": "To complete OXXO integration throught EBANX Direct API, please follow the steps below.  Enable OXXO OXXO availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the OXXO link (server-side) OXXO works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To OXXO must be oxxo country Two-letter country code - mx for Mexico. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: MXN and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integration_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Juan Garcia&quot;, &quot;email&quot;: &quot;juangarcia@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;mx&quot;, &quot;payment_type_code&quot;: &quot;oxxo&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T04&quot;, &quot;currency_code&quot;: &quot;MXN&quot;, &quot;amount_total&quot;: &quot;6000&quot; } }&apos; A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.oxxo_url , and the voucher barcode will be the value of payment.oxxo_barcode . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efcb68b70e5dde0fb39df93790bba7ef46eaae37360b809&quot; , &quot;pin&quot; : &quot;426809086&quot; , &quot;country&quot; : &quot;mx&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 16:15:06&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;6000.00&quot; , &quot;amount_ext&quot; : &quot;6000.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;6000.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;MXN&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;oxxo&quot; , &quot;oxxo_url&quot; : &quot;https://sandbox.ebanxpay.com/print/oxxo/execute?hash=5efcb68b70e5dde0fb39df93790bba7ef46eaae37360b809&quot; , &quot;oxxo_barcode&quot; : &quot;00000000000000000000000000000000&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter oxxo_url . Your customers will see an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the voucher is payed by the customer, it will take sometime to EBANX get informed by OXXO. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable OXXO",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#undefined",
    "content": "OXXO availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the OXXO link (server-side)",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#undefined",
    "content": "OXXO works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To OXXO must be oxxo country Two-letter country code - mx for Mexico. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: MXN and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"Juan Garcia\", \"email\": \"juangarcia@example.com\", \"phone_number\": \"0405777687\", \"country\": \"mx\", \"payment_type_code\": \"oxxo\", \"merchant_payment_code\": \"0x0W28D03-T04\", \"currency_code\": \"MXN\", \"amount_total\": \"6000\" }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.oxxo_url, and the voucher barcode will be the value of payment.oxxo_barcode. Copy{ \"payment\": { \"hash\": \"5efcb68b70e5dde0fb39df93790bba7ef46eaae37360b809\", \"pin\": \"426809086\", \"country\": \"mx\", \"merchant_payment_code\": \"0x0W28D03-T04\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 16:15:06\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"6000.00\", \"amount_ext\": \"6000.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"6000.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"MXN\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"oxxo\", \"oxxo_url\": \"https://sandbox.ebanxpay.com/print/oxxo/execute?hash=5efcb68b70e5dde0fb39df93790bba7ef46eaae37360b809\", \"oxxo_barcode\": \"00000000000000000000000000000000\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#undefined",
    "content": "Redirect your customer to the URL returned in the parameter oxxo_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "OXXO with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo#undefined",
    "content": "Once the voucher is payed by the customer, it will take sometime to EBANX get informed by OXXO. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "OXXO PAY with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay",
    "content": "",
    "keywords": "OXXO Voucher Mexico,Cash payment Mexico"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#about-this-guide",
    "content": "This page explains how to add OXXO PAY to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;OXXO PAY enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#how-it-works",
    "content": "To complete OXXO PAY integration throught EBANX Direct API, please follow the steps below.  Enable OXXO PAY OXXO PAY availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the OXXO PAY link (server-side) OXXO PAY works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To OXXO PAY must be oxxopay country Two-letter country code - mx for Mexico. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: MXN and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integration_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Juan Garcia&quot;, &quot;email&quot;: &quot;juangarcia@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;mx&quot;, &quot;payment_type_code&quot;: &quot;oxxopay&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T04&quot;, &quot;currency_code&quot;: &quot;MXN&quot;, &quot;amount_total&quot;: &quot;6000&quot; } }&apos; A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.voucher_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5f68bfcae62babf1a16e6cdc258816c060eec0936740e4c5&quot; , &quot;pin&quot; : &quot;409084527&quot; , &quot;country&quot; : &quot;mx&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T04&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-09-21 14:59:22&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;6000.00&quot; , &quot;amount_ext&quot; : &quot;6000.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;6000.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;MXN&quot; , &quot;due_date&quot; : &quot;2020-09-24&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;oxxopay&quot; , &quot;voucher_url&quot; : &quot;https:\\/\\/sandbox.ebanxpay.com\\/print\\/voucher\\/execute?hash=5f68bfcae62babf1a16e6cdc258816c060eec0936740e4c5&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter voucher_url . Your customers will see an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable OXXO PAY",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#undefined",
    "content": "OXXO PAY availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the OXXO PAY link (server-side)",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#undefined",
    "content": "OXXO PAY works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To OXXO PAY must be oxxopay country Two-letter country code - mx for Mexico. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: MXN and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"Juan Garcia\", \"email\": \"juangarcia@example.com\", \"phone_number\": \"0405777687\", \"country\": \"mx\", \"payment_type_code\": \"oxxopay\", \"merchant_payment_code\": \"0x0W28D03-T04\", \"currency_code\": \"MXN\", \"amount_total\": \"6000\" }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.voucher_url. Copy{ \"payment\": { \"hash\": \"5f68bfcae62babf1a16e6cdc258816c060eec0936740e4c5\", \"pin\": \"409084527\", \"country\": \"mx\", \"merchant_payment_code\": \"0x0W28D03-T04\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-09-21 14:59:22\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"6000.00\", \"amount_ext\": \"6000.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"6000.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"MXN\", \"due_date\": \"2020-09-24\", \"instalments\": \"1\", \"payment_type_code\": \"oxxopay\", \"voucher_url\": \"https:\\/\\/sandbox.ebanxpay.com\\/print\\/voucher\\/execute?hash=5f68bfcae62babf1a16e6cdc258816c060eec0936740e4c5\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#undefined",
    "content": "Redirect your customer to the URL returned in the parameter voucher_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "OXXO PAY with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/oxxo-pay#undefined",
    "content": "As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "SPEI with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei",
    "content": "",
    "keywords": "SPEI Voucher Mexico,Cash payment Mexico"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#about-this-guide",
    "content": "This page explains how to add SPEI to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;SPEI enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#how-it-works",
    "content": "To complete SPEI integration throught EBANX Direct API, please follow the steps below.  Enable SPEI SPEI availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the SPEI link (server-side) SPEI works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To SPEI must be spei country Two-letter country code - mx for Mexico. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: MXN and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integration_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Juan Garcia&quot;, &quot;email&quot;: &quot;juangarcia@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;mx&quot;, &quot;payment_type_code&quot;: &quot;spei&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T05&quot;, &quot;currency_code&quot;: &quot;MXN&quot;, &quot;amount_total&quot;: &quot;6000&quot; } }&apos; A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.spei_url , customer&#x2019;s CLABE account will be the value of payment.clabe_account , and the reference for the current payment will be the value of payment.clabe_reference Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efcb917129a9a5a175e5c918fea0651ba6bf1e6fb6ae593&quot; , &quot;pin&quot; : &quot;088722858&quot; , &quot;country&quot; : &quot;mx&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T05&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 16:25:58&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;6000.00&quot; , &quot;amount_ext&quot; : &quot;6000.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;6000.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;MXN&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;spei&quot; , &quot;clabe_account&quot; : &quot;000000000000000000&quot; , &quot;clabe_reference&quot; : &quot;0000000&quot; , &quot;spei_url&quot; : &quot;https://sandbox.ebanxpay.com/print/spei/execute?hash=5efcb917129a9a5a175e5c918fea0651ba6bf1e6fb6ae593&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter spei_url . Your customers will see an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the voucher is payed by the customer, it will take sometime to EBANX get informed by SPEI. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable SPEI",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#undefined",
    "content": "SPEI availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the SPEI link (server-side)",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#undefined",
    "content": "SPEI works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To SPEI must be spei country Two-letter country code - mx for Mexico. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: MXN and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"Juan Garcia\", \"email\": \"juangarcia@example.com\", \"phone_number\": \"0405777687\", \"country\": \"mx\", \"payment_type_code\": \"spei\", \"merchant_payment_code\": \"0x0W28D03-T05\", \"currency_code\": \"MXN\", \"amount_total\": \"6000\" }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.spei_url, customer’s CLABE account will be the value of payment.clabe_account, and the reference for the current payment will be the value of payment.clabe_reference Copy{ \"payment\": { \"hash\": \"5efcb917129a9a5a175e5c918fea0651ba6bf1e6fb6ae593\", \"pin\": \"088722858\", \"country\": \"mx\", \"merchant_payment_code\": \"0x0W28D03-T05\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 16:25:58\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"6000.00\", \"amount_ext\": \"6000.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"6000.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"MXN\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"spei\", \"clabe_account\": \"000000000000000000\", \"clabe_reference\": \"0000000\", \"spei_url\": \"https://sandbox.ebanxpay.com/print/spei/execute?hash=5efcb917129a9a5a175e5c918fea0651ba6bf1e6fb6ae593\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#undefined",
    "content": "Redirect your customer to the URL returned in the parameter spei_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "SPEI with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/mexico/spei#undefined",
    "content": "Once the voucher is payed by the customer, it will take sometime to EBANX get informed by SPEI. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "PagoEfectivo with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo",
    "content": "",
    "keywords": "PagoEfectivo Voucher Peru,Cash payment Peru"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#about-this-guide",
    "content": "This page explains how to add PagoEfectivo to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;PagoEfectivo enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#how-it-works",
    "content": "To complete PagoEfectivo integration throught EBANX Direct API, please follow the steps below.  Enable PagoEfectivo PagoEfectivo availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the PagoEfectivo link (server-side) PagoEfectivo works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To PagoEfectivo must be pagoefectivo country Two-letter country code - pe for Peru. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: PEN and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integration_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;joseperu@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;pe&quot;, &quot;payment_type_code&quot;: &quot;pagoefectivo&quot;, &quot;document&quot;: &quot;13775040&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T09&quot;, &quot;currency_code&quot;: &quot;PEN&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.cip_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efcc06e8946d56338424cae6bd6ed8e866d5e76c9bfef49&quot; , &quot;pin&quot; : &quot;827807399&quot; , &quot;country&quot; : &quot;pe&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T09&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 16:57:17&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;PEN&quot; , &quot;due_date&quot; : &quot;2020-06-30&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;pagoefectivo&quot; , &quot;cip_url&quot; : &quot;https://sandbox.ebanxpay.com/cip/main/execute?hash=5efcc06e8946d56338424cae6bd6ed8e866d5e76c9bfef49&quot; , &quot;cip_code&quot; : &quot;0&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter cip_url . Your customers will see an interface like this: At this point you have a pending payment in your EBANX Dashboard . Wait for the payment Once the voucher is payed by the customer, it will take sometime to EBANX get informed by PagoEfectivo. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable PagoEfectivo",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#undefined",
    "content": "PagoEfectivo availability may vary depending on your contract. So the first step is to check if it is active in your EBANX dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the PagoEfectivo link (server-side)",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#undefined",
    "content": "PagoEfectivo works as a voucher, so you will need to redirect your customer to a page containing it. To get this link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To PagoEfectivo must be pagoefectivo country Two-letter country code - pe for Peru. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number document Customer&apos;s valid document number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: PEN and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integration_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"joseperu@example.com\", \"phone_number\": \"0405777687\", \"country\": \"pe\", \"payment_type_code\": \"pagoefectivo\", \"document\": \"13775040\", \"merchant_payment_code\": \"0x0W28D03-T09\", \"currency_code\": \"PEN\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The voucher link will be in the parameter payment.cip_url. Copy{ \"payment\": { \"hash\": \"5efcc06e8946d56338424cae6bd6ed8e866d5e76c9bfef49\", \"pin\": \"827807399\", \"country\": \"pe\", \"merchant_payment_code\": \"0x0W28D03-T09\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 16:57:17\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"PEN\", \"due_date\": \"2020-06-30\", \"instalments\": \"1\", \"payment_type_code\": \"pagoefectivo\", \"cip_url\": \"https://sandbox.ebanxpay.com/cip/main/execute?hash=5efcc06e8946d56338424cae6bd6ed8e866d5e76c9bfef49\", \"cip_code\": \"0\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#undefined",
    "content": "Redirect your customer to the URL returned in the parameter cip_url. Your customers will see an interface like this:  At this point you have a pending payment in your EBANX Dashboard. "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "PagoEfectivo with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/pago-efectivo#undefined",
    "content": "Once the voucher is payed by the customer, it will take sometime to EBANX get informed by PagoEfectivo. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "SafetyPay with Direct API#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay",
    "content": "",
    "keywords": "SafetyPay Cash Payment Peru"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#about-this-guide",
    "content": "This page explains how to add SafetyPay to your existing Direct API integration. Direct API integration is basically the same for all payment methods, only varying the payment_type_code and some additional required fields.  If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;SafetyPay enabled in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#how-it-works",
    "content": "To complete SafetyPay integration throught EBANX Direct API, please follow the steps below.  Enable SafetyPay SafetyPay availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/direct end-point to get the SafetyPay link (server-side) With SafetyPay , your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields: Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To SafetyPay must be safetypay-cash to SafetyPay Cash or safetypay-online to SafetyPay Online country Two-letter country code - pe for Peru. info Both SafetyPay Cash and SafetyPay Online will be a redirect and will work in the same way. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: PEN and USD amount_total Total amount to be charged Check the example: Copy curl -L -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -H &apos;Content-Type: application/json&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integratio_key}}&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;joseperu@example.com&quot;, &quot;phone_number&quot;: &quot;0405777687&quot;, &quot;country&quot;: &quot;pe&quot;, &quot;payment_type_code&quot;: &quot;safetypay-cash&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W28D03-T10&quot;, &quot;currency_code&quot;: &quot;PEN&quot;, &quot;amount_total&quot;: &quot;100&quot; } }&apos; A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5efcc4d90dbee3a4e40b6f95a7c34ef2a3ed4e0aee0c2c1c&quot; , &quot;pin&quot; : &quot;631561909&quot; , &quot;country&quot; : &quot;pe&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W28D03-T10&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-07-01 17:16:09&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.00&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;amount_ext_requested&quot; : &quot;100.00&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;PEN&quot; , &quot;due_date&quot; : &quot;2020-07-04&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;safetypay-cash&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efcc4d90dbee3a4e40b6f95a7c34ef2a3ed4e0aee0c2c1c&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/ws/redirect/execute?hash=5efcc4d90dbee3a4e40b6f95a7c34ef2a3ed4e0aee0c2c1c&quot; } info The complete API reference for the end-point ws/direct can be found here . We strongly recommend you to take a look in all the available options. Redirect customer to the returned URL Redirect your customer to the URL returned in the parameter redirect_url . After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard . Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface. Check it below: Wait for the payment Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed . If your customers don&apos;t conclude the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable SafetyPay",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#undefined",
    "content": "SafetyPay availability may vary depending on your contract. So the first step is to check if it is active in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/direct end-point to get the SafetyPay link (server-side)",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#undefined",
    "content": "With SafetyPay, your consumers are redirected to a third-party website and the payment is made safely and quickly. To get this redirection link, you just need to call the end-point ws/direct (server-side) with the following required fields:  Basic parameters: # Parameter Description operation Operation must be request integration_key Your unique and secret integration key payment_type_code To SafetyPay must be safetypay-cash to SafetyPay Cash or safetypay-online to SafetyPay Online country Two-letter country code - pe for Peru. info Both SafetyPay Cash and SafetyPay Online will be a redirect and will work in the same way. Customer data: # Parameter Description name Customer name email Customer e-mail phone_number Customer phone number Charge parameters: # Parameter Description merchant_payment_code Unique merchant payment code currency_code ISO-4217 Currency code of your transaction. Supported values: PEN and USD amount_total Total amount to be charged  Check the example: Copycurl -L -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-H 'Content-Type: application/json' \\--data-raw '{ \"integration_key\": \"{{integratio_key}}\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"joseperu@example.com\", \"phone_number\": \"0405777687\", \"country\": \"pe\", \"payment_type_code\": \"safetypay-cash\", \"merchant_payment_code\": \"0x0W28D03-T10\", \"currency_code\": \"PEN\", \"amount_total\": \"100\" }}' A successful request will return a JSON response like the one below. The redirection link to the third-party website will be in the parameter payment.redirect_url. Copy{ \"payment\": { \"hash\": \"5efcc4d90dbee3a4e40b6f95a7c34ef2a3ed4e0aee0c2c1c\", \"pin\": \"631561909\", \"country\": \"pe\", \"merchant_payment_code\": \"0x0W28D03-T10\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2020-07-01 17:16:09\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"100.00\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.00\", \"amount_ext_requested\": \"100.00\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"PEN\", \"due_date\": \"2020-07-04\", \"instalments\": \"1\", \"payment_type_code\": \"safetypay-cash\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efcc4d90dbee3a4e40b6f95a7c34ef2a3ed4e0aee0c2c1c\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\", \"redirect_url\": \"https://sandbox.ebanx.com/ws/redirect/execute?hash=5efcc4d90dbee3a4e40b6f95a7c34ef2a3ed4e0aee0c2c1c\"} infoThe complete API reference for the end-point ws/direct can be found here. We strongly recommend you to take a look in all the available options. "
  },
  {
    "title": "Redirect customer to the returned URL",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. After the redirection, your customers will be in a third-party website, with all the necessary purchase details to finalize their payment securely and easily. At this point you have a pending payment in your EBANX Dashboard. Sandbox environment You can test this integration in our Sandbox environment as we offer a Online-Banking mock interface.Check it below: "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "SafetyPay with Direct API#",
    "url": "docs/payments/guides/accept-payments/api/peru/safety-pay#undefined",
    "content": "Once the payment is made by your customer, it will take sometime to EBANX get informed. As soon as we get the confirmation, payment status is modified from pending to confirmed. If your customers don't conclude the payment, it will be automatically canceled. "
  },
  {
    "title": "EBANX Payment Page#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/accept-payments/payment-page",
    "content": "",
    "keywords": "Checkout Payment page"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#about-this-guide",
    "content": "This page explains how to process payments using EBANX Payment Page integration. The Payment page integration is basically the same for all Latin American countries and we will walk you throught all the additional possibilities here. If you are not integrated with EBANX Payment Page yet, please take a look in the product overview to check the available payment methods and features. Are you not sure if EBANX Payment Page is the best option for your e-commerce? Please, talk with one of our integration specialists.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Payment methods configured in your EBANX Dashboard.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#how-it-works",
    "content": "To complete an integration throught EBANX Payment Page, please follow the steps below.  Enable your payment methods You have a variety of payment methods to choose from with EBANX. So, the first step is to check which ones you want to activate in your EBANX Dashboard . All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists . Call the /ws/request API to get the payment page link (server-side) With EBANX Payment Page, your customers are redirected to a safe checkout page hosted by EBANX, with the most relevant payment methods from Latin America. To get this redirection link, you just need to call the end-point ws/request (from your server) with the following required fields. Parameter Description integration_key Your unique and secret integration key. name Customer name. email Customer email address. country Two-letter country code. payment_type_code _all , to have all the available payment methods or you can restrict it with the available payment methods per country below currency_code The currency code of your transaction. amount Transaction amount, in the specified currency. E.g.,: 100.50 merchant_payment_code Unique identifier for this payment (usually the order number from your system). API Reference The complete API reference for the end-point ws/request can be found here . We strongly recommend you to take a look in all the available options, such as installments for example. Available payment methods and currencies per country # &#x1F1E6;&#x1F1F7; Argentina Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. rapipago : Rapipago pagofacil : PagoFacil. cupon : Cupon de Pagos. _creditcard : Credit Cards Available currencies # ARS : Argentine Pesos USD : US Dollars &#x1F1E7;&#x1F1F4; Bolivia Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. pagosnet : Pagosnet. Available currencies # BOB : Boliviano USD : US Dollars &#x1F1E7;&#x1F1F7; Brazil Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. boleto : Boleto Banc&#xE1;rio. banktransfer : Bank transfer. _tef : Bank transfer (TEF). _creditcard : Credit Cards debitcard : Debit Cards mercadopago : Mercado Pago paypal : PayPal picpay : Picpay Available currencies # BRL : Brazillian Reais EUR : Euros USD : US Dollars &#x1F1E8;&#x1F1F1; Chile Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. servipag : Servipag; sencillito : Sencillito cash payment voucher; webpay : Webpay payment method; multicaja : Multicaja payment method. Available currencies # CLP : Chilean Pesos; EUR : Euros; USD : US Dollars. &#x1F1E8;&#x1F1F4; Colombia Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. eft : Colombian bank transfer; baloto : BALOTO cash payment; efecty : Efecty cash payment; _creditcard : Credit cards nequi : Nequi Available currencies # COP : Colombian Pesos; EUR : Euros; USD : US Dollars. &#x1F1EA;&#x1F1E8; Ecuador Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. safetypay : SafetyPay, will offer the customer to choose between SafetyPay Cash and SafetyPay Online. Available currencies # USD : US Dollars. &#x1F1F2;&#x1F1FD; Mexico Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. spei : Spei; oxxo : Oxxo; _creditcard : Credit cards; Available currencies # MXN : Mexican Pesos; USD : US Dollars. &#x1F1F5;&#x1F1EA; Peru Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. pagoefectivo : PagoEfectivo; safetypay : SafetyPay, will offer the customer to choose between SafetyPay Cash and SafetyPay Online.; _creditcard : Credit cards; Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. PEN : Nuevo Sol; USD : US Dollars. Available currencies # &#x1F1FA;&#x1F1FE; Uruguay Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. creditcard : Credit cards; Available payment methods # You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country. UYO : Peso Uruguayo; USD : US Dollars. Available currencies # In the example below, we are calling the end-point /ws/request using country equal to br (Brazil) and currency_code equal to BRL (Brazilian Reais), asking for all the available payment methods. Copy curl --request POST &apos;https://sandbox.ebanxpay.com/ws/request&apos; \\ --data-raw &apos;{ &quot;integration_key&quot;: &quot;{{integration_key}}&quot;, &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;josesilva@example.com&quot;, &quot;country&quot;: &quot;br&quot;, &quot;payment_type_code&quot;: &quot;_all&quot;, &quot;merchant_payment_code&quot;: &quot;0x0W26D05-T10&quot;, &quot;currency_code&quot;: &quot;BRL&quot;, &quot;amount&quot;: 1000 }&apos; A successful request will return a JSON response like the one below. The redirection link will be in the parameter redirect_url . Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5ef6208cc0ae84cee0a3850148e1417a0a2e70495c6b2807&quot; , &quot;pin&quot; : &quot;844658402&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;0x0W26D05-T10&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;OP&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2020-06-26 16:21:31&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : 1000 , &quot;amount_ext&quot; : 996.2143853357243 , &quot;amount_iof&quot; : 3.79 , &quot;amount_ext_requested&quot; : &quot;1000.00&quot; , &quot;currency_rate&quot; : 1 , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2020-06-29&quot; , &quot;instalments&quot; : 1 , &quot;payment_type_code&quot; : &quot;_all&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null , } , &quot;redirect_url&quot; : &quot;https://sandbox.ebanx.com/checkout?hash=5ef6208cc0ae84cee0a3850148e1417a0a2e70495c6b2807&quot; , &quot;status&quot; : &quot;SUCCESS&quot; } The parameter redirect_url contains the url to redirect your customers in the next step. Redirect customer to EBANX Payment page using the returned URL Redirect your customer to the URL returned in the parameter redirect_url . Your customers will then see EBANX Payment Page: Wait for the payment Once your customer have completed the purchase, they are redirected to a &quot;Thank you page&quot; like the one below with the possibility to return to your Website. info The return URL can be configured into your Dashboard or sent as a parameter in the request to ws/request in the parameter redirect_url . Learn more about notifications here If your customers don&apos;t complete the payment, it will be automatically canceled.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Enable your payment methods",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#undefined",
    "content": "You have a variety of payment methods to choose from with EBANX. So, the first step is to check which ones you want to activate in your EBANX Dashboard. All set? We can go ahead to next step, otherwise, please get in touch with our integration specialists. "
  },
  {
    "title": "Call the /ws/request API to get the payment page link (server-side)",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#undefined",
    "content": "With EBANX Payment Page, your customers are redirected to a safe checkout page hosted by EBANX, with the most relevant payment methods from Latin America. To get this redirection link, you just need to call the end-point ws/request (from your server) with the following required fields.  Parameter Description integration_key Your unique and secret integration key. name Customer name. email Customer email address. country Two-letter country code. payment_type_code _all , to have all the available payment methods or you can restrict it with the available payment methods per country below currency_code The currency code of your transaction. amount Transaction amount, in the specified currency. E.g.,: 100.50 merchant_payment_code Unique identifier for this payment (usually the order number from your system).  API ReferenceThe complete API reference for the end-point ws/request can be found here. We strongly recommend you to take a look in all the available options, such as installments for example. Available payment methods and currencies per country# 🇦🇷 Argentina Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.rapipago: Rapipagopagofacil: PagoFacil.cupon: Cupon de Pagos._creditcard: Credit CardsAvailable currencies#ARS: Argentine PesosUSD: US Dollars  🇧🇴 Bolivia Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.pagosnet: Pagosnet.Available currencies#BOB: BolivianoUSD: US Dollars  🇧🇷 Brazil Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.boleto: Boleto Bancário.banktransfer: Bank transfer._tef: Bank transfer (TEF)._creditcard: Credit Cardsdebitcard: Debit Cardsmercadopago: Mercado Pagopaypal: PayPalpicpay: PicpayAvailable currencies#BRL: Brazillian ReaisEUR: EurosUSD: US Dollars  🇨🇱 Chile Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.servipag: Servipag;sencillito: Sencillito cash payment voucher;webpay: Webpay payment method;multicaja: Multicaja payment method.Available currencies#CLP: Chilean Pesos;EUR: Euros;USD: US Dollars.  🇨🇴 Colombia Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.eft: Colombian bank transfer;baloto: BALOTO cash payment;efecty: Efecty cash payment;_creditcard: Credit cardsnequi: NequiAvailable currencies#COP: Colombian Pesos;EUR: Euros;USD: US Dollars.  🇪🇨 Ecuador Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.safetypay: SafetyPay, will offer the customer to choose between SafetyPay Cash and SafetyPay Online.Available currencies#USD: US Dollars.  🇲🇽 Mexico Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.spei: Spei;oxxo: Oxxo;_creditcard: Credit cards;Available currencies#MXN: Mexican Pesos;USD: US Dollars.  🇵🇪 Peru Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.pagoefectivo: PagoEfectivo;safetypay: SafetyPay, will offer the customer to choose between SafetyPay Cash and SafetyPay Online.;_creditcard: Credit cards;Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.PEN: Nuevo Sol;USD: US Dollars.Available currencies#  🇺🇾 Uruguay Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.creditcard: Credit cards;Available payment methods#You can inform the values below in the parameter payment_type_code in order to restrict payment page to a specific payment method, or just use _all to the all the available payment methods for the merchant account in this country.UYO: Peso Uruguayo;USD: US Dollars.Available currencies#  In the example below, we are calling the end-point /ws/request using country equal to br (Brazil) and currency_code equal to BRL (Brazilian Reais), asking for all the available payment methods. Copycurl --request POST 'https://sandbox.ebanxpay.com/ws/request' \\--data-raw '{ \"integration_key\": \"{{integration_key}}\", \"name\": \"José Silva\", \"email\": \"josesilva@example.com\", \"country\": \"br\", \"payment_type_code\": \"_all\", \"merchant_payment_code\": \"0x0W26D05-T10\", \"currency_code\": \"BRL\", \"amount\": 1000}' A successful request will return a JSON response like the one below. The redirection link will be in the parameter redirect_url. Copy{ \"payment\": { \"hash\": \"5ef6208cc0ae84cee0a3850148e1417a0a2e70495c6b2807\", \"pin\": \"844658402\", \"country\": \"br\", \"merchant_payment_code\": \"0x0W26D05-T10\", \"order_number\": null, \"status\": \"OP\", \"status_date\": null, \"open_date\": \"2020-06-26 16:21:31\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": 1000, \"amount_ext\": 996.2143853357243, \"amount_iof\": 3.79, \"amount_ext_requested\": \"1000.00\", \"currency_rate\": 1, \"currency_ext\": \"BRL\", \"due_date\": \"2020-06-29\", \"instalments\": 1, \"payment_type_code\": \"_all\", \"pre_approved\": false, \"capture_available\": null, }, \"redirect_url\": \"https://sandbox.ebanx.com/checkout?hash=5ef6208cc0ae84cee0a3850148e1417a0a2e70495c6b2807\", \"status\": \"SUCCESS\"} The parameter redirect_url contains the url to redirect your customers in the next step. "
  },
  {
    "title": "Redirect customer to EBANX Payment page using the returned URL",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#undefined",
    "content": "Redirect your customer to the URL returned in the parameter redirect_url. Your customers will then see EBANX Payment Page:  "
  },
  {
    "title": "Wait for the payment",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/guides/accept-payments/payment-page#undefined",
    "content": "Once your customer have completed the purchase, they are redirected to a \"Thank you page\" like the one below with the possibility to return to your Website.  infoThe return URL can be configured into your Dashboard or sent as a parameter in the request to ws/request in the parameter redirect_url. Learn more about notifications here If your customers don't complete the payment, it will be automatically canceled. "
  },
  {
    "title": "Cancel a payment#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/after-payments/cancel-payment",
    "content": "",
    "keywords": "Cancel payments"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Cancel a payment#",
    "url": "docs/payments/guides/after-payments/cancel-payment#about-this-guide",
    "content": "This guide quickly demonstrates how to cancel a pending or open payment in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Cancel a payment#",
    "url": "docs/payments/guides/after-payments/cancel-payment#how-it-works",
    "content": "To Cancel a payment throught EBANX Direct API, please follow the steps below.  Make sure that the payment status is equal pending or open You can only cancel a payment if its status is equal to (OP) open or (PE) pending . You can check the status of your payment using the end-point ws/query . You can learn more about this end-point in this quick guide . Confirmed payments Please, note that payments with status equal to CO (Confirmed) can only be refunded, not canceled. Cancel the payment using /ws/cancel end-point To cancel a payment, you just need to call the end-point /ws/cancel (from your server) with the following required fields: Field Description integration_key Your unique and secret integration key hash The payment hash (EBANX unique identifier) Please, check the example below: Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/cancel&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;hash=5476099e890c06ca6f02cae9da1b1faaf3c5929439076cb9&apos; A successful request will return a JSON response similar to the one below. Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5476099e890c06ca6f02cae9da1b1faaf3c5929439076cb9&quot; , &quot;merchant_payment_code&quot; : &quot;1461416920319&quot; , &quot;order_number&quot; : &quot;146&quot; , &quot;status&quot; : &quot;CA&quot; , &quot;status_date&quot; : &quot;2014-11-26 17:34:11&quot; , &quot;open_date&quot; : &quot;2014-11-25 10:45:56&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;204.45&quot; , &quot;amount_ext&quot; : &quot;87.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;currency_rate&quot; : &quot;2.3500&quot; , &quot;currency_ext&quot; : &quot;USD&quot; , &quot;due_date&quot; : &quot;2014-12-2&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;boleto&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null , } , &quot;operation&quot; : &quot;cancel&quot; , &quot;status&quot; : &quot;SUCCESS&quot; } Complete EBANX Direct API Reference The complete API reference for the end-point ws/cancel can be found here . We strongly recommend you to take a look in all the available options and examples.  "
  },
  {
    "title": "Canceling a payment via Dashboard",
    "type": 1,
    "pageTitle": "Cancel a payment#",
    "url": "docs/payments/guides/after-payments/cancel-payment#canceling-a-payment-via-dashboard",
    "content": "Alternativelly, you can also cancel an open payment using your EBANX Dashboard. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Cancel a payment#",
    "url": "docs/payments/guides/after-payments/cancel-payment#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Make sure that the payment status is equal pending or open ",
    "type": 1,
    "pageTitle": "Cancel a payment#",
    "url": "docs/payments/guides/after-payments/cancel-payment#undefined",
    "content": "You can only cancel a payment if its status is equal to (OP) open or (PE) pending. You can check the status of your payment using the end-point ws/query. You can learn more about this end-point in this quick guide. Confirmed paymentsPlease, note that payments with status equal to CO (Confirmed) can only be refunded, not canceled. "
  },
  {
    "title": "Cancel the payment using /ws/cancel end-point",
    "type": 1,
    "pageTitle": "Cancel a payment#",
    "url": "docs/payments/guides/after-payments/cancel-payment#undefined",
    "content": "To cancel a payment, you just need to call the end-point /ws/cancel (from your server) with the following required fields:  Field Description integration_key Your unique and secret integration key hash The payment hash (EBANX unique identifier)  Please, check the example below: Copycurl -X POST -G 'https://sandbox.ebanxpay.com/ws/cancel' \\ -d 'integration_key=your_test_integration_key' \\ -d 'hash=5476099e890c06ca6f02cae9da1b1faaf3c5929439076cb9' A successful request will return a JSON response similar to the one below. Copy{ \"payment\": { \"hash\": \"5476099e890c06ca6f02cae9da1b1faaf3c5929439076cb9\", \"merchant_payment_code\": \"1461416920319\", \"order_number\": \"146\", \"status\": \"CA\", \"status_date\": \"2014-11-26 17:34:11\", \"open_date\": \"2014-11-25 10:45:56\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"204.45\", \"amount_ext\": \"87.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"2.3500\", \"currency_ext\": \"USD\", \"due_date\": \"2014-12-2\", \"instalments\": \"1\", \"payment_type_code\": \"boleto\", \"pre_approved\": false, \"capture_available\": null, }, \"operation\": \"cancel\", \"status\": \"SUCCESS\"} Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/cancel can be found here. We strongly recommend you to take a look in all the available options and examples. "
  },
  {
    "title": "Refund a payment#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/after-payments/refund-payment",
    "content": "",
    "keywords": "Refund Payments"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#about-this-guide",
    "content": "This guide quickly demonstrates how to refund a confirmed payment in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#how-it-works",
    "content": "Basically, the refund process can only be triggered to already confirmed payments generated with your account. Payments with status open (OP) or pending (PE) cannot be refunded. To understand a little bit more how it works, take a look in the refund flow in the following diagram:  The merchant requests the refund through the Dashboard or the API. This refund request gets directly into EBANX refund queue, marked as Requested. EBANX then acknowledges the refund and the refund is marked as Pending.When the customer receives the money back (in his bank account or through his credit card), the refund transitions its state to Confirmed.  noteWhen the refund is Requested or Pending, it can be cancelled by the merchant. Please, keep in mind: Each payment can have many refunds, given that the sum of their amounts does not exceed the original payment amount. Cancelled refunds do not count toward this sum;Only confirmed payments (CO) can be refunded;The currency of the refund is the same as the original payment;Refunds are notified when the refund is pending and an email is sent to the customer asking for bank information and when the refund is confirmed; To Refund a payment throught EBANX Direct API, please follow the steps below.  Make sure that the payment status is equal confirmed You can only refund a payment if its status is equal to (CO) confirmed . You can check the status of your payment using the end-point ws/query . You can learn more about this end-point in this quick guide . Confirmed payments Please, note that payments with status equal to (OP) open or (PE) pending can only be canceled, not refunded. Refund the payment using /ws/refund end-point To refund a payment, you just need to call the end-point /ws/refund (from your server) with the following required fields: Parameter Description integration_key Your unique and secret integration key. operation The available operations are: request to request a new refund or cancel to cancel a refund. hash The payment hash (EBANX unique identifier). amount The amount to be refunded; expressed in the original payment currency. description Description of the refund reason. merchant_refund_code The ID of the refund on the merchant system. Unique refund_id The ID of the refund to be cancelled. Please, check the example below: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/refund&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;operation=request&apos; \\ -d &apos;merchant_refund_code=787653&apos; \\ -d &apos;hash=5ad9028b30eb8de099f9fe72b9763283c7cf4d35b6430221&apos; \\ -d &apos;amount=100.00&apos; \\ -d &apos;description=Order did not arrive&apos; A successful request will return a JSON response similar to the one below. Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5ad9028b30eb8de099f9fe72b9763283c7cf4d35b6430221&quot; , &quot;pin&quot; : &quot;253639240&quot; , &quot;country&quot; : &quot;br&quot; , &quot;merchant_payment_code&quot; : &quot;9dwdwdw1e31c4c234&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2018-04-19 20:57:07&quot; , &quot;open_date&quot; : &quot;2018-04-19 20:56:42&quot; , &quot;confirm_date&quot; : &quot;2018-04-19 20:57:07&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.38&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2018-04-22&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;itau&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null , &quot;refunds&quot; : [ { &quot;id&quot; : &quot;68682&quot; , &quot;merchant_refund_code&quot; : null , &quot;status&quot; : &quot;RE&quot; , &quot;request_date&quot; : &quot;2018-04-19 21:00:06&quot; , &quot;pending_date&quot; : null , &quot;confirm_date&quot; : null , &quot;cancel_date&quot; : null , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;description&quot; : &quot;Testing notifications&quot; } ] } , &quot;status&quot; : &quot;SUCCESS&quot; } Complete EBANX Direct API Reference The complete API reference for the end-point ws/refund can be found here . We strongly recommend you to take a look in all the available options and examples.  "
  },
  {
    "title": "Canceling a refund request",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#canceling-a-refund-request",
    "content": "If the refund is no more needed, you can also cancel its request using our APIs. A refund can be cancelled only if its status is equal to requested (RE) or pending (PE). If everything goes well the refund will be immediately cancelled.  noteIf a refund is cancelled, the customer will not receive the money and the merchant will not be charged. Customers are NOT notified about the refund cancellation. To cacel a refund throught EBANX Direct API, you just need to call the same end-point /ws/refund with the parameter operation equal to cancel as wel as its merchant_refund_code. Please, check the example below: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/refund' \\ -d 'integration_key=your_test_integration_key' \\ -d 'operation=cancel' \\ -d 'merchant_refund_code=3784756' Copy{ \"payment\": { \"hash\": \"5ad9028b30eb8de099f9fe72b9763283c7cf4d35b6430221\", \"pin\": \"253639240\", \"country\": \"br\", \"merchant_payment_code\": \"9dwdwdw1e31c4c234\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2018-04-19 20:57:07\", \"open_date\": \"2018-04-19 20:56:42\", \"confirm_date\": \"2018-04-19 20:57:07\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2018-04-22\", \"instalments\": \"1\", \"payment_type_code\": \"itau\", \"pre_approved\": false, \"capture_available\": null, \"refunds\": [ { \"id\": \"68682\", \"merchant_refund_code\": \"3784756\", \"status\": \"CA\", \"request_date\": \"2018-04-19 21:00:06\", \"pending_date\": null, \"confirm_date\": null, \"cancel_date\": \"2018-04-20 21:00:06\", \"amount_ext\": \"100.00\", \"description\": \"Test transaction\" } ] }, \"status\": \"SUCCESS\"} "
  },
  {
    "title": "Refunds using Dashboard",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#refunds-using-dashboard",
    "content": "Alternativelly, you can also refund a confirmed payment or cancel a refund using your EBANX Dashboard. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Make sure that the payment status is equal confirmed ",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#undefined",
    "content": "You can only refund a payment if its status is equal to (CO) confirmed. You can check the status of your payment using the end-point ws/query. You can learn more about this end-point in this quick guide. Confirmed paymentsPlease, note that payments with status equal to (OP) open or (PE) pending can only be canceled, not refunded. "
  },
  {
    "title": "Refund the payment using /ws/refund end-point",
    "type": 1,
    "pageTitle": "Refund a payment#",
    "url": "docs/payments/guides/after-payments/refund-payment#undefined",
    "content": "To refund a payment, you just need to call the end-point /ws/refund (from your server) with the following required fields:  Parameter Description integration_key Your unique and secret integration key. operation The available operations are: request to request a new refund or cancel to cancel a refund. hash The payment hash (EBANX unique identifier). amount The amount to be refunded; expressed in the original payment currency. description Description of the refund reason. merchant_refund_code The ID of the refund on the merchant system. Unique refund_id The ID of the refund to be cancelled.  Please, check the example below: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/refund' \\ -d 'integration_key=your_test_integration_key' \\ -d 'operation=request' \\ -d 'merchant_refund_code=787653' \\ -d 'hash=5ad9028b30eb8de099f9fe72b9763283c7cf4d35b6430221' \\ -d 'amount=100.00' \\ -d 'description=Order did not arrive' A successful request will return a JSON response similar to the one below. Copy{ \"payment\": { \"hash\": \"5ad9028b30eb8de099f9fe72b9763283c7cf4d35b6430221\", \"pin\": \"253639240\", \"country\": \"br\", \"merchant_payment_code\": \"9dwdwdw1e31c4c234\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2018-04-19 20:57:07\", \"open_date\": \"2018-04-19 20:56:42\", \"confirm_date\": \"2018-04-19 20:57:07\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2018-04-22\", \"instalments\": \"1\", \"payment_type_code\": \"itau\", \"pre_approved\": false, \"capture_available\": null, \"refunds\": [ { \"id\": \"68682\", \"merchant_refund_code\": null, \"status\": \"RE\", \"request_date\": \"2018-04-19 21:00:06\", \"pending_date\": null, \"confirm_date\": null, \"cancel_date\": null, \"amount_ext\": \"100.00\", \"description\": \"Testing notifications\" } ] }, \"status\": \"SUCCESS\"} Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/refund can be found here. We strongly recommend you to take a look in all the available options and examples. "
  },
  {
    "title": "Retrieve a payment#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/after-payments/retrieve-payment",
    "content": "",
    "keywords": "Retriece payments"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Retrieve a payment#",
    "url": "docs/payments/guides/after-payments/retrieve-payment#about-this-guide",
    "content": "This guide quickly demonstrates how to retrieve any payment from your account in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Retrieve a payment#",
    "url": "docs/payments/guides/after-payments/retrieve-payment#how-it-works",
    "content": "To Retrieve a payment throught EBANX Direct API, please follow the steps below.  Retrieve the payment using /ws/cancel end-point To retrieve a payment, you just need to call the end-point /ws/query (from your server) with the following required fields: info Please, note that to retrieve your payment, you can use either the hash or merchant_payment_code . Payment hash Merchant payment code Field Description integration_key Your unique and secret integration key hash The payment hash (EBANX unique identifier) Please, check the example below: Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/query&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;hash=5476099e890c06ca6f02cae9da1b1faaf3c5929439076cb9&apos; A successful request will return a JSON response similar to the one below. Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;54737a76ffc1e5a520b0ed9062213a810ef41dae990184c7&quot; , &quot;merchant_payment_code&quot; : &quot;1416854121&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2014-11-24 16:35:43&quot; , &quot;open_date&quot; : &quot;2014-11-24 16:35:34&quot; , &quot;confirm_date&quot; : &quot;2014-11-24 16:35:43&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;352.50&quot; , &quot;amount_ext&quot; : &quot;150.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;currency_rate&quot; : &quot;2.3500&quot; , &quot;currency_ext&quot; : &quot;USD&quot; , &quot;due_date&quot; : &quot;2014-12-01&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;bradesco&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null , &quot;refunds&quot; : [ { &quot;id&quot; : &quot;9283&quot; , &quot;merchant_refund_code&quot; : null , &quot;status&quot; : &quot;RE&quot; , &quot;request_date&quot; : &quot;2014-11-26 17:56:52&quot; , &quot;pending_date&quot; : null , &quot;confirm_date&quot; : null , &quot;cancel_date&quot; : null , &quot;paid_date&quot; : null , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;description&quot; : &quot;Order did not arrive&quot; } ] } , &quot;status&quot; : &quot;SUCCESS&quot; } Complete EBANX Direct API Reference The complete API reference for the end-point ws/query can be found here . We strongly recommend you to take a look in all the available options and examples.  "
  },
  {
    "title": "Retrieving a payment via Dashboard",
    "type": 1,
    "pageTitle": "Retrieve a payment#",
    "url": "docs/payments/guides/after-payments/retrieve-payment#retrieving-a-payment-via-dashboard",
    "content": "Alternativelly, you can also retrieve a payment using your EBANX Dashboard. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Retrieve a payment#",
    "url": "docs/payments/guides/after-payments/retrieve-payment#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Retrieve the payment using /ws/cancel end-point",
    "type": 1,
    "pageTitle": "Retrieve a payment#",
    "url": "docs/payments/guides/after-payments/retrieve-payment#undefined",
    "content": "To retrieve a payment, you just need to call the end-point /ws/query (from your server) with the following required fields: infoPlease, note that to retrieve your payment, you can use either the hash or merchant_payment_code.  Payment hash Merchant payment code Field Description integration_key Your unique and secret integration key hash The payment hash (EBANX unique identifier) Please, check the example below: Copy curl -X POST -G &apos;https://sandbox.ebanxpay.com/ws/query&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;hash=5476099e890c06ca6f02cae9da1b1faaf3c5929439076cb9&apos;  A successful request will return a JSON response similar to the one below. Copy{ \"payment\":{ \"hash\":\"54737a76ffc1e5a520b0ed9062213a810ef41dae990184c7\", \"merchant_payment_code\":\"1416854121\", \"order_number\":null, \"status\":\"CO\", \"status_date\":\"2014-11-24 16:35:43\", \"open_date\":\"2014-11-24 16:35:34\", \"confirm_date\":\"2014-11-24 16:35:43\", \"transfer_date\":null, \"amount_br\":\"352.50\", \"amount_ext\":\"150.00\", \"amount_iof\":\"0.00\", \"currency_rate\":\"2.3500\", \"currency_ext\":\"USD\", \"due_date\":\"2014-12-01\", \"instalments\":\"1\", \"payment_type_code\":\"bradesco\", \"pre_approved\":false, \"capture_available\":null, \"refunds\":[ { \"id\":\"9283\", \"merchant_refund_code\":null, \"status\":\"RE\", \"request_date\":\"2014-11-26 17:56:52\", \"pending_date\":null, \"confirm_date\":null, \"cancel_date\":null, \"paid_date\":null, \"amount_ext\":\"100.00\", \"description\":\"Order did not arrive\" } ] }, \"status\":\"SUCCESS\"} Complete EBANX Direct API ReferenceThe complete API reference for the end-point ws/query can be found here. We strongly recommend you to take a look in all the available options and examples. "
  },
  {
    "title": "Device Fingerprint#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/device-fingerprint",
    "content": "",
    "keywords": "Device fingerprint"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#about-this-guide",
    "content": "This page explains how to create a device ID using our javascript library, EBANX.js. This device ID is then associated with a payment when the customer completes a purchase. This information is used by anti-fraud tools to match the customer’s behavior against known fraudulent behavior to detect potential fraud attempts. If you are not integrated with EBANX Direct API yet, please take a look at this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here; "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#how-it-works",
    "content": "To create a device id and add it to your payment request, follow the steps below: Add EBANX.js to your webpageOur client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage:Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script>And initialize it with your Merchant's Configuration:Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" });Get the device ID using EBANX.jsCall the EBANX.deviceFingerprint.getSession method.CopyEBANX.deviceFingerprint.getSession() .then((session) => { // use the session to fullfil your payment }) .catch(error => { // handle any errors that can happen });EBANX.deviceFingerprint.getSession returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful token creation response contains the following field. The values will vary for each device:Copy//The session object created in the previous step will have the following fields:{ device_id: \"d7465b1f6b1aaeeab1771fe743e02f34\"}Add the device ID to your payment requestInclude the device ID you obtained in the previous step to your payment object in your Direct API call. For more information on our Direct API, click here!Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"birth_date\": \"12/04/1979\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"visa\", \"merchant_payment_code\": \"3d1e73b0bbe\", \"currency_code\": \"BRL\", \"instalments\": 1, \"device_id\":\"34c376b2767\", \"amount_total\": 100, \"creditcard\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" } }}'  "
  },
  {
    "title": "Live Sample",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#live-sample",
    "content": "Here's a sample of a device ID being generated using EBANX.js: See the Pen by ferpa2012 (@ferpa2012) on CodePen. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Add EBANX.js to your webpage",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#undefined",
    "content": "Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script> And initialize it with your Merchant's Configuration: Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" }); "
  },
  {
    "title": "Get the device ID using EBANX.js",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#undefined",
    "content": "Call the EBANX.deviceFingerprint.getSession method. CopyEBANX.deviceFingerprint.getSession() .then((session) => { // use the session to fullfil your payment }) .catch(error => { // handle any errors that can happen }); EBANX.deviceFingerprint.getSession returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful token creation response contains the following field. The values will vary for each device: Copy//The session object created in the previous step will have the following fields:{ device_id: \"d7465b1f6b1aaeeab1771fe743e02f34\"} "
  },
  {
    "title": "Add the device ID to your payment request",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint#undefined",
    "content": "Include the device ID you obtained in the previous step to your payment object in your Direct API call. For more information on our Direct API, click here! Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"birth_date\": \"12/04/1979\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"visa\", \"merchant_payment_code\": \"3d1e73b0bbe\", \"currency_code\": \"BRL\", \"instalments\": 1, \"device_id\":\"34c376b2767\", \"amount_total\": 100, \"creditcard\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" } }}'  "
  },
  {
    "title": "Device Fingerprint#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/device-fingerprint-old",
    "content": "",
    "keywords": "Device fingerprint"
  },
  {
    "title": "What is device fingerprint?",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint-old#what-is-device-fingerprint",
    "content": "Device fingerprinting is used to generate a device_id that uniquely identifies a customer’s device. This device_id is then associated with a payment when the customer completes a purchase. This information is used by anti-fraud tools to match the customer’s behavior against known fraudulent behavior to detect potential fraud attempts. "
  },
  {
    "title": "Why should I use it?",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint-old#why-should-i-use-it",
    "content": "A device fingerprint is an essential layer of protection that does not impact the customer experience on your website. A clever fraudster can easily disguise the IP address, and the device fingerprint can solely identify one fraudster using a list of credit cards in a list of fake profiles. "
  },
  {
    "title": "How do I use it?",
    "type": 1,
    "pageTitle": "Device Fingerprint#",
    "url": "docs/payments/guides/features/device-fingerprint-old#how-do-i-use-it",
    "content": "You can use this JavaScript on your checkout page: Copy <script type=\"text/javascript\" src=\"https://js.ebanx.com/ebanx-libjs-latest.min.js\"></script><script type=\"text/javascript\"> window.onload = function() { EBANX.config.setPublishableKey('1234'); EBANX.config.setCountry(\"br\"); EBANX.config.setMode('test'); EBANX.deviceFingerprint.setup(function(deviceId) { console.log(\"Device ID:\", deviceId); // jQuery example: $('#my-hidden-input').val(deviceId); }); }; </script>  Get this device ID and submit your checkout form. Add this parameter to your request when you are going to send it to us. Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"birth_date\": \"12/04/1979\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"visa\", \"merchant_payment_code\": \"3d1e73b0bbe\", \"currency_code\": \"BRL\", \"instalments\": 1, \"device_id\":\"34c376b2767\", \"amount_total\": 100, \"creditcard\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" } }}'  "
  },
  {
    "title": "Digital Wallets#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/digital-wallets",
    "content": "",
    "keywords": "e-wallet Digital Wallets"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "Digital Wallets#",
    "url": "docs/payments/guides/features/digital-wallets#product-overview",
    "content": "E-Wallets allow customers to pay for purchases with their chosen wallet by scanning a QR Code or simply confirming the transaction after logging into their accounts. By requiring customers’ access to his or hers app and account, this payment method reduces fraudulent chargebacks. On top of that, the checkout flow is easier: users don’t have to fill out credit card forms since all that information is already saved on their chosen wallets and used automatically.  infoSome e-wallets like Nequi does not allow the payment with credit or debit cards, just with balance. Some wallets also allow payment with balance, meaning clients can top up with Boleto Bancário or a simple wire transfer from their traditional bank account. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Digital Wallets#",
    "url": "docs/payments/guides/features/digital-wallets#how-it-works",
    "content": " Customer proceeds to checkout and starts the payment process;Merchant sends the payment information to EBANX;EBANX sends the payment information to the Digital Wallet;Digital Wallet returns a pending payment;EBANX returns a pending payment to the MerchantCustomer finalizes the transaction on the Digital Wallet;Digital Wallet sends the finalized payment to EBANX;EBANX sends the finalized payment to the Merchant; "
  },
  {
    "title": "Availability",
    "type": 1,
    "pageTitle": "Digital Wallets#",
    "url": "docs/payments/guides/features/digital-wallets#availability",
    "content": "This solution is currently available on the following countries and wallet brands: 🇧🇷 Brazil Digital Wallets Mercado Pago, Paypal, Picpay; Integration Methods Direct API, Payment Page, Shopify;  🇨🇴 Colombia Digital Wallets Nequi; Integration Methods Direct API, Payment Page;  "
  },
  {
    "title": "Integration Steps",
    "type": 1,
    "pageTitle": "Digital Wallets#",
    "url": "docs/payments/guides/features/digital-wallets#integration-steps",
    "content": "E-Wallets are already available to Direct API, Payment Page and Shopify. If you are already integrated with EBANX get in touch via integration@ebanx.com, otherwise fill this on-line form. For more details on how to use digital wallets with each integration method, check the following guides: API Integration Payment Page Integration Shopify "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Digital Wallets#",
    "url": "docs/payments/guides/features/digital-wallets#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Document Verification#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/doc-check",
    "content": "",
    "keywords": "Document Verification"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#about-this-guide",
    "content": "This page explains how to verify if the document provided by the customer is a valid one. This is very helpful to reduce the number of declined payments due to invalid document ID. If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here; "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#how-it-works",
    "content": "To check a document using EBANX.js, follow the steps below:  Add EBANX.js to your webpage Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy &lt;script type=&quot;text/javascript&quot; src=&quot;https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js&quot;&gt;&lt;/script&gt; And initialize it with your Merchant&apos;s Configuration: Copy EBANX . init ( { publicIntegrationKey : &quot;your_integration_key_goes_here&quot; , country : &quot;br&quot; , mode : &quot;test&quot; } ) ; Create an object with the document information Create an object with with the following fields: Copy const docInformation = { type : &quot;br_cpf&quot; , document : &quot;85351346893&quot; } ; The available document types are: Country Document Type Parameter Value Argentina CDI ar_cdi Argentina CUIL ar_cuil Argentina CUIT ar_cuit Argentina DNI ar_dni Brazil CPF br_cpf Brazil CNPJ br_cnpj Chile RUT cl_rut Colombia CC co_cc Colombia CE co_ce Colombia NIT co_nit Ecuador DOC ec_doc Peru DOC pe_doc Uruguay CI uy_ci Check if the document provided is valid Call the EBANX.utils.document.check function using the object created in the previous step. Copy EBANX . utils . document . check ( docInformation ) . then ( ( verificationData ) =&gt; { // use the verificationData object to fullfil your payment } ) . catch ( error =&gt; { // handle any errors that can happen } ) ; EBANX.utils.document.check returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful authentication response contains the following fields: Valid Document: Copy //The verificationData object created in the previous step will have the following fields: { &quot;status&quot; : &quot;success&quot; , &quot;data&quot; : { &quot;document&quot; : { &quot;isValid&quot; : true , &quot;maskedField&quot; : &quot;853.513.468-93&quot; } } } Invalid Document: Copy //The verificationData object created in the previous step will have the following fields: { &quot;status&quot; : &quot;success&quot; , &quot;data&quot; : { &quot;document&quot; : { &quot;isValid&quot; : false , &quot;maskedField&quot; : &quot;&quot; } } }  "
  },
  {
    "title": "Live sample",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#live-sample",
    "content": "Here's a quick sample of how you can use EBANX.js to verify a document number: See the Pen by ferpa2012 (@ferpa2012) on CodePen. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Add EBANX.js to your webpage",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#undefined",
    "content": "Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script> And initialize it with your Merchant's Configuration: Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" }); "
  },
  {
    "title": "Create an object with the document information",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#undefined",
    "content": "Create an object with with the following fields: Copyconst docInformation = { type: \"br_cpf\", document: \"85351346893\"}; The available document types are:  Country Document Type Parameter Value Argentina CDI ar_cdi Argentina CUIL ar_cuil Argentina CUIT ar_cuit Argentina DNI ar_dni Brazil CPF br_cpf Brazil CNPJ br_cnpj Chile RUT cl_rut Colombia CC co_cc Colombia CE co_ce Colombia NIT co_nit Ecuador DOC ec_doc Peru DOC pe_doc Uruguay CI uy_ci  "
  },
  {
    "title": "Check if the document provided is valid",
    "type": 1,
    "pageTitle": "Document Verification#",
    "url": "docs/payments/guides/features/doc-check#undefined",
    "content": "Call the EBANX.utils.document.check function using the object created in the previous step. CopyEBANX.utils.document.check(docInformation) .then((verificationData) => { // use the verificationData object to fullfil your payment }) .catch(error => { // handle any errors that can happen }); EBANX.utils.document.check returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful authentication response contains the following fields: Valid Document: Copy//The verificationData object created in the previous step will have the following fields:{ \"status\": \"success\", \"data\": { \"document\": { \"isValid\": true, \"maskedField\": \"853.513.468-93\" } }} Invalid Document: Copy//The verificationData object created in the previous step will have the following fields:{ \"status\": \"success\", \"data\": { \"document\": { \"isValid\": false, \"maskedField\": \"\" } }} "
  },
  {
    "title": "FX Tools#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/fx-tools",
    "content": "",
    "keywords": "Exchange Rate FX"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#about-this-guide",
    "content": "This guide quickly demonstrates the operations related with Foreign Exchange (FX) Rate in EBANX, how it works and how it can be integrated into your e-commerce. We will walk you through all possible flows to allow you to better deal with FX Rate in your EBANX integration. We will quicly describe how to: Get FX rate;Freeze FX rate; infoFX operations are only available in EBANX Direct API Integration. Are you not integrated yet? Please take a look in this basic guide about it. "
  },
  {
    "title": "Getting FX Rate",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#getting-fx-rate",
    "content": ""
  },
  {
    "title": "Freezing FX Rate",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#freezing-fx-rate",
    "content": "With EBANX Direct API, you are able to \"freeze\" the FX rate up to 24 hours with two API calls. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#how-it-works",
    "content": "With EBANX Direct API, you can get the current FX rate that will be used in your payment. To get the current FX rate, you just need to call the end-point /ws/exchange (from your server) with the following required fields.  Field Description integration_key Your unique and secret integration key currency_base_code Original currency code to be converted (ISO 4217 3 letter code) currency_code Target currency code (ISO 4217 3 letter code)  API ReferenceYou can check the complete API reference here Here is an example: Copycurl -X GET -G 'https://sandbox.ebanxpay.com/ws/exchange' \\ -d 'integration_key=your_test_integration_key' \\ -d 'currency_code=USD' -d 'currency_base_code=BRL' The response would be: Copy{ \"currency_rate\": { \"code\": \"USD\", \"base_code\": \"BRL\", \"name\": \"Real to US Dollar\", \"rate\": \"2.7731\" }, \"status\": \"SUCCESS\"} "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#what-you-will-need",
    "content": "Before start your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Integration with EBANX Direct API to process your payments;Fixed FX feature enabled to your account. If it is not the case, you can require it to our support team "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#how-it-works-1",
    "content": "To freeze the FX rate using EBANX Direc API, please follow the steps below.  Generate the FX token The very first step to freeze the FX rate is to generate a fx_token that will be used in all your following payments. To generate this token, you just need to call the end-point ws/fxtoken/get (POST request from your server) with the following required fields. Parameter What is integration_key Your unique and secret integration key. country Two letter country country code currency_from Original currency code (ISO 4217 3 letter code) currency_to Target currency code (ISO 4217 3 letter code) API Reference You can check the complete API reference here Check the example: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/fxtoken/get&apos; -d &apos;{ &quot;integration_key&quot;: INTEGRATION_KEY, &quot;country&quot;: &quot;co&quot;, &quot;currency_from&quot;: &quot;USD&quot;, &quot;currency_to&quot;: &quot;COP&quot; }&apos; A successful request will return a JSON response similar to the one below. Copy { &quot;fx_token&quot; : &quot;sandbox.20171025.USD.COP&quot; , &quot;currency_rate&quot; : 3.6 , &quot;currency_from&quot; : &quot;USD&quot; , &quot;currency_to&quot; : &quot;COP&quot; , &quot;expire_date&quot; : &quot;2017-10-25T10:59:59+00:00&quot; , &quot;new_currency_rate_available_at&quot; : &quot;2017-10-25T09:00:00+00:00&quot; } caution Please, note that the token has an expiration date/time and must be renewed with a new API call before its expiration. Call /ws/direct end-point with the generated token With the token that was generated in the step below, you can call normally call /ws/direct end-point (the same that you use to make your payments), sending the fx_token as an additional parameter. EBANX Direct API Reference You can check the complete EBANX Direct API reference here Check the example: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -d &apos;{ &quot;integration_key&quot;: &quot;INTEGRATION_KEY&quot;, &quot;fx_token&quot;: &quot;sandbox.20171025.USD.COP&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;merchant_payment_code&quot;: &quot;1508863196&quot;, &quot;amount_total&quot;: 10, &quot;currency_code&quot;: &quot;USD&quot;, &quot;country&quot;: &quot;co&quot;, &quot;email&quot;: &quot;customer@test.co&quot;, &quot;payment_type_code&quot;: &quot;baloto&quot;, &quot;name&quot;: &quot;Test Customer&quot;, &quot;document&quot;: &quot;12345678&quot;, &quot;phone_number&quot;: &quot;99999-99999&quot; } }&apos; The payment will be normally generated and a successful request will return a JSON response similar to the one below. Copy { &quot;redirect_url&quot; : null , &quot;payment&quot; : { &quot;hash&quot; : &quot;59ef82c854a2f6fd28ff865b05dc1412eba3f110b6c19f82&quot; , &quot;pin&quot; : &quot;020790537&quot; , &quot;merchant_payment_code&quot; : &quot;1508864653&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;PE&quot; , &quot;status_date&quot; : null , &quot;open_date&quot; : &quot;2017-10-24 18:13:28&quot; , &quot;confirm_date&quot; : null , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;36.00&quot; , &quot;amount_ext&quot; : &quot;10.00&quot; , &quot;amount_iof&quot; : &quot;0.00&quot; , &quot;currency_rate&quot; : &quot;3.6000&quot; , &quot;currency_ext&quot; : &quot;USD&quot; , &quot;due_date&quot; : &quot;2017-10-27&quot; , &quot;instalments&quot; : &quot;1&quot; , &quot;payment_type_code&quot; : &quot;baloto&quot; , &quot;baloto_url&quot; : &quot;...&quot; , &quot;voucher_id&quot; : &quot;20790537&quot; , &quot;pre_approved&quot; : false , &quot;capture_available&quot; : null } , &quot;status&quot; : &quot;SUCCESS&quot; }  "
  },
  {
    "title": "Generate the FX token",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#undefined",
    "content": "The very first step to freeze the FX rate is to generate a fx_token that will be used in all your following payments. To generate this token, you just need to call the end-point ws/fxtoken/get (POST request from your server) with the following required fields.  Parameter What is integration_key Your unique and secret integration key. country Two letter country country code currency_from Original currency code (ISO 4217 3 letter code) currency_to Target currency code (ISO 4217 3 letter code)  API ReferenceYou can check the complete API reference here Check the example: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/fxtoken/get' -d '{ \"integration_key\": INTEGRATION_KEY, \"country\": \"co\", \"currency_from\": \"USD\", \"currency_to\": \"COP\" }' A successful request will return a JSON response similar to the one below. Copy{ \"fx_token\": \"sandbox.20171025.USD.COP\", \"currency_rate\": 3.6, \"currency_from\": \"USD\", \"currency_to\": \"COP\", \"expire_date\": \"2017-10-25T10:59:59+00:00\", \"new_currency_rate_available_at\": \"2017-10-25T09:00:00+00:00\"} cautionPlease, note that the token has an expiration date/time and must be renewed with a new API call before its expiration. "
  },
  {
    "title": "Call /ws/direct end-point with the generated token",
    "type": 1,
    "pageTitle": "FX Tools#",
    "url": "docs/payments/guides/features/fx-tools#undefined",
    "content": "With the token that was generated in the step below, you can call normally call /ws/direct end-point (the same that you use to make your payments), sending the fx_token as an additional parameter. EBANX Direct API ReferenceYou can check the complete EBANX Direct API reference here Check the example: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\ -d '{ \"integration_key\": \"INTEGRATION_KEY\", \"fx_token\": \"sandbox.20171025.USD.COP\", \"operation\": \"request\", \"payment\": { \"merchant_payment_code\": \"1508863196\", \"amount_total\": 10, \"currency_code\": \"USD\", \"country\": \"co\", \"email\": \"customer@test.co\", \"payment_type_code\": \"baloto\", \"name\": \"Test Customer\", \"document\": \"12345678\", \"phone_number\": \"99999-99999\" } }' The payment will be normally generated and a successful request will return a JSON response similar to the one below. Copy { \"redirect_url\": null, \"payment\": { \"hash\": \"59ef82c854a2f6fd28ff865b05dc1412eba3f110b6c19f82\", \"pin\": \"020790537\", \"merchant_payment_code\": \"1508864653\", \"order_number\": null, \"status\": \"PE\", \"status_date\": null, \"open_date\": \"2017-10-24 18:13:28\", \"confirm_date\": null, \"transfer_date\": null, \"amount_br\": \"36.00\", \"amount_ext\": \"10.00\", \"amount_iof\": \"0.00\", \"currency_rate\": \"3.6000\", \"currency_ext\": \"USD\", \"due_date\": \"2017-10-27\", \"instalments\": \"1\", \"payment_type_code\": \"baloto\", \"baloto_url\": \"...\", \"voucher_id\": \"20790537\", \"pre_approved\": false, \"capture_available\": null }, \"status\": \"SUCCESS\"} "
  },
  {
    "title": "Get States by Country#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/get-states",
    "content": "",
    "keywords": "Document Verification"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#about-this-guide",
    "content": "This page explains how to get a list of states for the countries in Latin America using EBANX.js. This is a helpful tool to ensure you send data in the standard format and avoid denied transactions due to invalid state codes. If you are not integrated with EBANX Direct API yet, please take a look in this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here; "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#how-it-works",
    "content": "To get the list of states for a given country using EBANX.js, follow the steps below:  Add EBANX.js to your webpage Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy &lt;script type=&quot;text/javascript&quot; src=&quot;https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js&quot;&gt;&lt;/script&gt; And initialize it with your Merchant&apos;s Configuration: Copy EBANX . init ( { publicIntegrationKey : &quot;your_integration_key_goes_here&quot; , country : &quot;br&quot; , mode : &quot;test&quot; } ) ; Create an object with the country code Create an object with with the following field: Copy const options = { country : &quot;br&quot; } ; The available countries are: Country Country Code Argentina ar Brazil br Chile cl Mexico mx Peru pe Get the list of countries Call the EBANX.referenceData.states function using the object created in the previous step. Copy EBANX . referenceData . states ( options ) . get ( ) . then ( ( statesList ) =&gt; { // use the statesList object to fullfil your payment } ) . catch ( error =&gt; { // handle any errors that can happen } ) ; EBANX.referenceData.states returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful authentication response contains the following fields: Copy //The statesList object created in the previous step will have the following fields: { &quot;quantity&quot; : 27 , &quot;stateList&quot; : [ { &quot;stateCode&quot; : &quot;AC&quot; , &quot;stateName&quot; : &quot;Acre&quot; } , { &quot;stateCode&quot; : &quot;AL&quot; , &quot;stateName&quot; : &quot;Alagoas&quot; } , { &quot;stateCode&quot; : &quot;AP&quot; , &quot;stateName&quot; : &quot;Amap&#xE1;&quot; } , { &quot;stateCode&quot; : &quot;AM&quot; , &quot;stateName&quot; : &quot;Amazonas&quot; } , { &quot;stateCode&quot; : &quot;BA&quot; , &quot;stateName&quot; : &quot;Bahia&quot; } , { &quot;stateCode&quot; : &quot;CE&quot; , &quot;stateName&quot; : &quot;Cear&#xE1;&quot; } , { &quot;stateCode&quot; : &quot;DF&quot; , &quot;stateName&quot; : &quot;Distrito Federal&quot; } , { &quot;stateCode&quot; : &quot;ES&quot; , &quot;stateName&quot; : &quot;Esp&#xED;rito Santo&quot; } , { &quot;stateCode&quot; : &quot;GO&quot; , &quot;stateName&quot; : &quot;Goi&#xE1;s&quot; } , { &quot;stateCode&quot; : &quot;MA&quot; , &quot;stateName&quot; : &quot;Maranh&#xE3;o&quot; } , { &quot;stateCode&quot; : &quot;MT&quot; , &quot;stateName&quot; : &quot;Mato Grosso&quot; } , { &quot;stateCode&quot; : &quot;MS&quot; , &quot;stateName&quot; : &quot;Mato Grosso do Sul&quot; } , { &quot;stateCode&quot; : &quot;MG&quot; , &quot;stateName&quot; : &quot;Minas Gerais&quot; } , { &quot;stateCode&quot; : &quot;PA&quot; , &quot;stateName&quot; : &quot;Par&#xE1;&quot; } , { &quot;stateCode&quot; : &quot;PB&quot; , &quot;stateName&quot; : &quot;Para&#xED;ba&quot; } , { &quot;stateCode&quot; : &quot;PR&quot; , &quot;stateName&quot; : &quot;Paran&#xE1;&quot; } , { &quot;stateCode&quot; : &quot;PE&quot; , &quot;stateName&quot; : &quot;Pernambuco&quot; } , { &quot;stateCode&quot; : &quot;PI&quot; , &quot;stateName&quot; : &quot;Piau&#xED;&quot; } , { &quot;stateCode&quot; : &quot;RJ&quot; , &quot;stateName&quot; : &quot;Rio de Janeiro&quot; } , { &quot;stateCode&quot; : &quot;RN&quot; , &quot;stateName&quot; : &quot;Rio Grande do Norte&quot; } , { &quot;stateCode&quot; : &quot;RS&quot; , &quot;stateName&quot; : &quot;Rio Grande do Sul&quot; } , { &quot;stateCode&quot; : &quot;RO&quot; , &quot;stateName&quot; : &quot;Rond&#xF4;nia&quot; } , { &quot;stateCode&quot; : &quot;RR&quot; , &quot;stateName&quot; : &quot;Roraima&quot; } , { &quot;stateCode&quot; : &quot;SC&quot; , &quot;stateName&quot; : &quot;Santa Catarina&quot; } , { &quot;stateCode&quot; : &quot;SP&quot; , &quot;stateName&quot; : &quot;S&#xE3;o Paulo&quot; } , { &quot;stateCode&quot; : &quot;SE&quot; , &quot;stateName&quot; : &quot;Sergipe&quot; } , { &quot;stateCode&quot; : &quot;TO&quot; , &quot;stateName&quot; : &quot;Tocantins&quot; } ] }  "
  },
  {
    "title": "Live sample",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#live-sample",
    "content": "Here's a quick sample of how you can use EBANX.js to get a state list: See the Pen by ferpa2012 (@ferpa2012) on CodePen. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Add EBANX.js to your webpage",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#undefined",
    "content": "Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script> And initialize it with your Merchant's Configuration: Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" }); "
  },
  {
    "title": "Create an object with the country code",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#undefined",
    "content": "Create an object with with the following field: Copyconst options = { country: \"br\"}; The available countries are:  Country Country Code Argentina ar Brazil br Chile cl Mexico mx Peru pe  "
  },
  {
    "title": "Get the list of countries",
    "type": 1,
    "pageTitle": "Get States by Country#",
    "url": "docs/payments/guides/features/get-states#undefined",
    "content": "Call the EBANX.referenceData.states function using the object created in the previous step. CopyEBANX.referenceData.states(options).get() .then((statesList) => { // use the statesList object to fullfil your payment }) .catch(error => { // handle any errors that can happen }); EBANX.referenceData.states returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful authentication response contains the following fields: Copy//The statesList object created in the previous step will have the following fields: { \"quantity\": 27, \"stateList\": [ { \"stateCode\": \"AC\", \"stateName\": \"Acre\" }, { \"stateCode\": \"AL\", \"stateName\": \"Alagoas\" }, { \"stateCode\": \"AP\", \"stateName\": \"Amapá\" }, { \"stateCode\": \"AM\", \"stateName\": \"Amazonas\" }, { \"stateCode\": \"BA\", \"stateName\": \"Bahia\" }, { \"stateCode\": \"CE\", \"stateName\": \"Ceará\" }, { \"stateCode\": \"DF\", \"stateName\": \"Distrito Federal\" }, { \"stateCode\": \"ES\", \"stateName\": \"Espírito Santo\" }, { \"stateCode\": \"GO\", \"stateName\": \"Goiás\" }, { \"stateCode\": \"MA\", \"stateName\": \"Maranhão\" }, { \"stateCode\": \"MT\", \"stateName\": \"Mato Grosso\" }, { \"stateCode\": \"MS\", \"stateName\": \"Mato Grosso do Sul\" }, { \"stateCode\": \"MG\", \"stateName\": \"Minas Gerais\" }, { \"stateCode\": \"PA\", \"stateName\": \"Pará\" }, { \"stateCode\": \"PB\", \"stateName\": \"Paraíba\" }, { \"stateCode\": \"PR\", \"stateName\": \"Paraná\" }, { \"stateCode\": \"PE\", \"stateName\": \"Pernambuco\" }, { \"stateCode\": \"PI\", \"stateName\": \"Piauí\" }, { \"stateCode\": \"RJ\", \"stateName\": \"Rio de Janeiro\" }, { \"stateCode\": \"RN\", \"stateName\": \"Rio Grande do Norte\" }, { \"stateCode\": \"RS\", \"stateName\": \"Rio Grande do Sul\" }, { \"stateCode\": \"RO\", \"stateName\": \"Rondônia\" }, { \"stateCode\": \"RR\", \"stateName\": \"Roraima\" }, { \"stateCode\": \"SC\", \"stateName\": \"Santa Catarina\" }, { \"stateCode\": \"SP\", \"stateName\": \"São Paulo\" }, { \"stateCode\": \"SE\", \"stateName\": \"Sergipe\" }, { \"stateCode\": \"TO\", \"stateName\": \"Tocantins\" } ]} "
  },
  {
    "title": "Installments#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/installments",
    "content": "",
    "keywords": "Installments Instalments"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#about-this-guide",
    "content": "This page explains how to configure, use installments and calculate the interest rates applied to them. Instalments are a payment plan applied on a purchase. Rather than paying outright, Latin American customers have a strong preference to pay for a purchase in parcels spread throughout the months. If you are not integrated with EBANX Payment Page yet, please take a look in the product overview to check the available payment methods and features. Are you not sure if EBANX Payment Page is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Credit Card payment method configured in your EBANX Dashboard. Installments enabled on your account. Contact your account manager and our integration team for more details. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#how-it-works",
    "content": "Apply Interest RatesAs described in your agreement, each installment number has its own interest rate. You can use this agreement values to calculate the final amount. Before sending the payment request to EBANX, you need to calculate the final amount of the payment based on the installment number chosen by the customer.Here's an example of the calculation: amount = (((interest_rate + 100) / 100) * (orderTotal));infoThe EBANX API expects the final value, with interest rates, so, make sure you calculate it before sending your request to Direct API.If you are working with a e-commerce module, such as WooCommerce and Magento, you may notice that some of them have the option for you to put the interest rate manually on the configurations of the module. You have to keep that number 0 (zero) since you will apply the interest rate on each instalment by code.Send the payment request with installmentsYou can use installments in a few different ways, depending on the integration method your are using:Payment Page using an installment range This instalment parameter can be a range of values you offer to your customer.The range will be the minimum and maximum instalment number (1-12, 1-6, 1-3, etc).Here's an example:Copycurl -X POST 'https://sandbox.ebanx.com/ws/request' \\ -d 'integration_key=your_test_integration_key' \\ -d 'name=José Silva' \\ -d 'email=josesilva@example.com' \\ -d 'country=br' \\ -d 'payment_type_code=_creditcard' \\ -d 'merchant_payment_code=84e886adea7' \\ -d 'currency_code=USD' \\ -d 'instalments=1-12' \\ -d 'amount=100' Payment Page using an locked value Alternatively, you can send a locked value that will be used on your request.Copycurl -X POST 'https://sandbox.ebanx.com/ws/request' \\ -d 'integration_key=your_test_integration_key' \\ -d 'name=José Silva' \\ -d 'email=josesilva@example.com' \\ -d 'country=br' \\ -d 'payment_type_code=_creditcard' \\ -d 'merchant_payment_code=84e886adea7' \\ -d 'currency_code=USD' \\ -d 'instalments=6' \\ -d 'amount=100' Direct API When using Direct API, you need to provide the exact number of instalments. Here's an example:Copycurl -X POST 'https://sandbox.ebanx.com/ws/direct' \\ -d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"visa\", \"merchant_payment_code\": \"9e3775c2772\", \"currency_code\": \"BRL\", \"instalments\": 3, \"amount_total\": 100, \"creditcard\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" } } }'  "
  },
  {
    "title": "Frequently Asked Questions about Installments",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#frequently-asked-questions-about-installments",
    "content": "Do I need to send the interest rate of my instalments in the payment request?No, you just need to calculate the final amount with the interest rate and send to EBANX the final amount and the instalment number chosen.Do I need charge the customer monthly to apply the instalments?No, the bank of the customer will make the charges.Can I apply instalments on any payment methods?No, only credit card payments have this feature.Do I need to use strictly the interest rate values that are on my agreement?The interest rates on your agreement are the ones that will be charge on a payment with instalments on your settlement, that's why we recommend our merchant to use those. But you can choose to apply the interest rate value that you want. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Apply Interest Rates",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#undefined",
    "content": "As described in your agreement, each installment number has its own interest rate. You can use this agreement values to calculate the final amount. Before sending the payment request to EBANX, you need to calculate the final amount of the payment based on the installment number chosen by the customer. Here's an example of the calculation: amount = (((interest_rate + 100) / 100) * (orderTotal)); infoThe EBANX API expects the final value, with interest rates, so, make sure you calculate it before sending your request to Direct API. If you are working with a e-commerce module, such as WooCommerce and Magento, you may notice that some of them have the option for you to put the interest rate manually on the configurations of the module. You have to keep that number 0 (zero) since you will apply the interest rate on each instalment by code. "
  },
  {
    "title": "Send the payment request with installments",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#undefined",
    "content": "You can use installments in a few different ways, depending on the integration method your are using: Payment Page using an installment range This instalment parameter can be a range of values you offer to your customer.The range will be the minimum and maximum instalment number (1-12, 1-6, 1-3, etc).Here's an example:Copycurl -X POST 'https://sandbox.ebanx.com/ws/request' \\ -d 'integration_key=your_test_integration_key' \\ -d 'name=José Silva' \\ -d 'email=josesilva@example.com' \\ -d 'country=br' \\ -d 'payment_type_code=_creditcard' \\ -d 'merchant_payment_code=84e886adea7' \\ -d 'currency_code=USD' \\ -d 'instalments=1-12' \\ -d 'amount=100'  Payment Page using an locked value Alternatively, you can send a locked value that will be used on your request.Copycurl -X POST 'https://sandbox.ebanx.com/ws/request' \\ -d 'integration_key=your_test_integration_key' \\ -d 'name=José Silva' \\ -d 'email=josesilva@example.com' \\ -d 'country=br' \\ -d 'payment_type_code=_creditcard' \\ -d 'merchant_payment_code=84e886adea7' \\ -d 'currency_code=USD' \\ -d 'instalments=6' \\ -d 'amount=100'  Direct API When using Direct API, you need to provide the exact number of instalments. Here's an example:Copycurl -X POST 'https://sandbox.ebanx.com/ws/direct' \\ -d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"visa\", \"merchant_payment_code\": \"9e3775c2772\", \"currency_code\": \"BRL\", \"instalments\": 3, \"amount_total\": 100, \"creditcard\": { \"card_number\": \"4111111111111111\", \"card_name\": \"José Silva\", \"card_due_date\": \"12/2019\", \"card_cvv\": \"123\" } } }'  "
  },
  {
    "title": "Do I need to send the interest rate of my instalments in the payment request?",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#undefined",
    "content": "No, you just need to calculate the final amount with the interest rate and send to EBANX the final amount and the instalment number chosen. "
  },
  {
    "title": "Do I need charge the customer monthly to apply the instalments?",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#undefined",
    "content": "No, the bank of the customer will make the charges. "
  },
  {
    "title": "Can I apply instalments on any payment methods?",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#undefined",
    "content": "No, only credit card payments have this feature. "
  },
  {
    "title": "Do I need to use strictly the interest rate values that are on my agreement?",
    "type": 1,
    "pageTitle": "Installments#",
    "url": "docs/payments/guides/features/installments#undefined",
    "content": "The interest rates on your agreement are the ones that will be charge on a payment with instalments on your settlement, that's why we recommend our merchant to use those. But you can choose to apply the interest rate value that you want. "
  },
  {
    "title": "Payments Notification#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/payment-notifications",
    "content": "",
    "keywords": "Payment notification"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#about-this-guide",
    "content": "This guide shows you how to work with payment notifications. Due to the nature of some payment methods, payments will not always be confirmed instantly which is the case of all cash payments for an example. We'll guide you through the steps to handle this type of calls. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#how-it-works",
    "content": " Verify the notification signature When a payment status is changed to confirmed (CO) or cancelled (CA), EBANX sends a notification to your system through the Notification URL that you should set in your Dashboard. For more details on setting your notification URL, you can refer to the Settings Tab on your EBANX Dashboard. EBANX signs every notification request using a private certificate and send the signature in the HTTP headers. The merchant can verify if the request really came from EBANX by validating the digital signature using our public certificate. The available certificates and their fingerprints are shown on the table below: Fingerprint Certificate 4ABAD89CF66B99998465470550EB15E3E271A246 Download EBANX will send the following headers in the notification request: Copy X&#xAD;-Signature&#xAD;Type: rsa,sha1 X&#xAD;-Signature&#xAD;Fingerprint: 4ABAD89CF66B99998465470550EB15E3E271A246 X-&#xAD;Signature&#xAD;Content: xh5hstzZt5Rf5ihNzbfFfkmN89askd .. .DrHJAnzHgaf2vzA == Parameter Description X&#xAD;-Signature&#xAD;Type The signing algorithm. EBANX will always use RSA/SHA1. X&#xAD;-Signature&#xAD;Fingerprint The signature fingerprint. It indicates which certificate was used to sign the notification. X&#xAD;-&#xAD;Signature&#xAD;Content The signed payload, encoded as a Base64 string. The signature can be validated in PHP as follows: Copy $cert = file_get_contents ( &apos;ebanx-notifications-public.pem&apos; ) ; $data = file_get_contents ( &quot;php://input&quot; ) ; $signature = base64_decode ( $_SERVER [ &apos;HTTP_X_SIGNATURE_CONTENT&apos; ] ) ; // http://php.net/manual/en/function.openssl-verify.php $result = openssl_verify ( $data , $signature , $cert ) ; if ( $result === 1 ) { echo &quot;OK, signature is correct.&quot; ; } else { echo &quot;ERROR, the signature is incorrect.&quot; ; } Get the payment hash codes from the notification The notification will contain the following parameters: Parameter Description operation The value is always payment_status_change. notification_type Event that triggered the notification hash_codes A single hash or an array of hashes separated by commas. And notification_type can have the following values: update : The payment status has changed from PE(Pending) to CO(Confirmed) or CA(Cancelled); chargeback : A chargeback was issued for this payment; refund : A refund was issued for this payment; chargeback_credit : A chargeback credit was issued for this payment; Here&apos;s a sample of a notification: Copy operation = payment_status_change &amp; notification_type = update &amp; hash_codes = 53ad936c0dfb7b008d57bf7d396c83a28d24869949fdc84f Query the payments using the /ws/query end-point and the hash codes received in the notification To query a payment, you just need to call the end-point /ws/query (from your server) with the following required fields: Field Description integration_key Your unique and secret integration key hash The payment hash (EBANX unique identifier) Here&apos;s an example of a payment query: Copy curl -X GET &apos;https://sandbox.ebanxpay.com/ws/query?integration_key=1231000&amp;hash=5a15e30b970d9f9f4bc33466e42e92515c7a7ed755dc1e45&apos; The EBANX server will send a JSON object as a response, including the payment status. Here&#x2019;s an example: Copy { &quot;payment&quot; : { &quot;hash&quot; : &quot;5a15e30b970d9f9f4bc33466e42e92515c7a7ed755dc1e45&quot; , &quot;pin&quot; : &quot;020593132&quot; , &quot;merchant_payment_code&quot; : &quot;1120a8eb178&quot; , &quot;order_number&quot; : null , &quot;status&quot; : &quot;CO&quot; , &quot;status_date&quot; : &quot;2017-11-22 20:50:18&quot; , &quot;open_date&quot; : &quot;2017-11-22 20:50:18&quot; , &quot;confirm_date&quot; : &quot;2017-11-22 20:50:18&quot; , &quot;transfer_date&quot; : null , &quot;amount_br&quot; : &quot;100.38&quot; , &quot;amount_ext&quot; : &quot;100.00&quot; , &quot;amount_iof&quot; : &quot;0.38&quot; , &quot;currency_rate&quot; : &quot;1.0000&quot; , &quot;currency_ext&quot; : &quot;BRL&quot; , &quot;due_date&quot; : &quot;2017-11-25&quot; , &quot;instalments&quot; : &quot;3&quot; , &quot;payment_type_code&quot; : &quot;visa&quot; , &quot;details&quot; : { &quot;billing_descriptor&quot; : &quot;&quot; } , &quot;transaction_status&quot; : { &quot;acquirer&quot; : &quot;EBANX&quot; , &quot;code&quot; : &quot;OK&quot; , &quot;description&quot; : &quot;Sandbox - Test credit card, transaction captured&quot; , &quot;authcode&quot; : &quot;45101&quot; } , &quot;pre_approved&quot; : true , &quot;capture_available&quot; : false } , &quot;status&quot; : &quot;SUCCESS&quot; } Let EBANX know you received our response Reply the notification with an HTTP 200 status. We suggest to print any message showing that you got the notification, indicating that the notification was successful.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Verify the notification signature",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#undefined",
    "content": "When a payment status is changed to confirmed (CO) or cancelled (CA), EBANX sends a notification to your system through the Notification URL that you should set in your Dashboard. For more details on setting your notification URL, you can refer to the Settings Tab on your EBANX Dashboard. EBANX signs every notification request using a private certificate and send the signature in the HTTP headers. The merchant can verify if the request really came from EBANX by validating the digital signature using our public certificate. The available certificates and their fingerprints are shown on the table below:  Fingerprint Certificate 4ABAD89CF66B99998465470550EB15E3E271A246 Download  EBANX will send the following headers in the notification request: CopyX­-Signature­Type: rsa,sha1X­-Signature­Fingerprint: 4ABAD89CF66B99998465470550EB15E3E271A246X-­Signature­Content: xh5hstzZt5Rf5ihNzbfFfkmN89askd...DrHJAnzHgaf2vzA==  Parameter Description X&#xAD;-Signature&#xAD;Type The signing algorithm. EBANX will always use RSA/SHA1. X&#xAD;-Signature&#xAD;Fingerprint The signature fingerprint. It indicates which certificate was used to sign the notification. X&#xAD;-&#xAD;Signature&#xAD;Content The signed payload, encoded as a Base64 string.  The signature can be validated in PHP as follows: Copy$cert = file_get_contents('ebanx-notifications-public.pem');$data = file_get_contents(\"php://input\");$signature = base64_decode($_SERVER['HTTP_X_SIGNATURE_CONTENT']); // http://php.net/manual/en/function.openssl-verify.php$result = openssl_verify($data, $signature, $cert); if ($result === 1){ echo \"OK, signature is correct.\";}else{ echo \"ERROR, the signature is incorrect.\";} "
  },
  {
    "title": "Get the payment hash codes from the notification",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#undefined",
    "content": "The notification will contain the following parameters:  Parameter Description operation The value is always payment_status_change. notification_type Event that triggered the notification hash_codes A single hash or an array of hashes separated by commas.  And notification_type can have the following values: update: The payment status has changed from PE(Pending) to CO(Confirmed) or CA(Cancelled);chargeback: A chargeback was issued for this payment;refund: A refund was issued for this payment;chargeback_credit: A chargeback credit was issued for this payment; Here's a sample of a notification: Copyoperation=payment_status_change&notification_type=update&hash_codes=53ad936c0dfb7b008d57bf7d396c83a28d24869949fdc84f "
  },
  {
    "title": "Query the payments using the /ws/query end-point and the hash codes received in the notification",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#undefined",
    "content": "To query a payment, you just need to call the end-point /ws/query (from your server) with the following required fields:  Field Description integration_key Your unique and secret integration key hash The payment hash (EBANX unique identifier)  Here's an example of a payment query: Copycurl -X GET 'https://sandbox.ebanxpay.com/ws/query?integration_key=1231000&hash=5a15e30b970d9f9f4bc33466e42e92515c7a7ed755dc1e45'  The EBANX server will send a JSON object as a response, including the payment status. Here’s an example: Copy{ \"payment\": { \"hash\": \"5a15e30b970d9f9f4bc33466e42e92515c7a7ed755dc1e45\", \"pin\": \"020593132\", \"merchant_payment_code\": \"1120a8eb178\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2017-11-22 20:50:18\", \"open_date\": \"2017-11-22 20:50:18\", \"confirm_date\": \"2017-11-22 20:50:18\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-11-25\", \"instalments\": \"3\", \"payment_type_code\": \"visa\", \"details\": { \"billing_descriptor\": \"\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Sandbox - Test credit card, transaction captured\", \"authcode\": \"45101\" }, \"pre_approved\": true, \"capture_available\": false }, \"status\": \"SUCCESS\"} "
  },
  {
    "title": "Let EBANX know you received our response",
    "type": 1,
    "pageTitle": "Payments Notification#",
    "url": "docs/payments/guides/features/payment-notifications#undefined",
    "content": "Reply the notification with an HTTP 200 status. We suggest to print any message showing that you got the notification, indicating that the notification was successful. "
  },
  {
    "title": "Sub Accounts#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/sub-accounts",
    "content": "",
    "keywords": "Sub accounts"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Sub Accounts#",
    "url": "docs/payments/guides/features/sub-accounts#about-this-guide",
    "content": "This page explains how to use sub accounts on your payments. This feature is useful for when you have multiple websites processing payments under the same account in EBANX. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Sub Accounts#",
    "url": "docs/payments/guides/features/sub-accounts#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Sub Accounts enabled. Contact the EBANX Integration Team at integration@ebanx.com to enable it. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Sub Accounts#",
    "url": "docs/payments/guides/features/sub-accounts#how-it-works",
    "content": " Provide the Sub Account Information When using sub accounts, you need to provide a few extra fields: Parameter Description payment.sub_account An object containing the sub account&#x2019;s name. Required for payments where the sub-account feature is being used. payment.sub_account.name Name of the sub-account that will be showed in the cash payment and e-mails. payment.sub_account.image_url URL of the logo of the sub-account. PS: It MUST be an HTTPS URL. Otherwise, you will receive an error message. Send the payment request with the sub account This feature is available in both Direct API and Payment Page. Request using Direct API # Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/direct&apos; \\ -d &apos;request_body={ &quot;integration_key&quot;: &quot;your_test_integration_key&quot;, &quot;operation&quot;: &quot;request&quot;, &quot;payment&quot;: { &quot;name&quot;: &quot;Jos&#xE9; Silva&quot;, &quot;email&quot;: &quot;jose@example.com&quot;, &quot;document&quot;: &quot;853.513.468-93&quot;, &quot;address&quot;: &quot;Rua E&quot;, &quot;street_number&quot;: &quot;1040&quot;, &quot;city&quot;: &quot;Maracana&#xFA;&quot;, &quot;state&quot;: &quot;CE&quot;, &quot;zipcode&quot;: &quot;61919-230&quot;, &quot;country&quot;: &quot;br&quot;, &quot;phone_number&quot;: &quot;8522847035&quot;, &quot;payment_type_code&quot;: &quot;boleto&quot;, &quot;merchant_payment_code&quot;: &quot;17c0c4ef790&quot;, &quot;currency_code&quot;: &quot;BRL&quot;, &quot;amount_total&quot;: 100, &quot;sub_account&quot;: { &quot;name&quot;:&quot;Loja de Teste&quot;, &quot;image_url&quot;:&quot;https://www.colourbox.com/preview/9155263-store-front.jpg&quot; } } }&apos; Request using Payment Page # Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/request&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;name=Jos&#xE9; Silva&apos; \\ -d &apos;email=josesilva@example.com&apos; \\ -d &apos;country=br&apos; \\ -d &apos;payment_type_code=boleto&apos; \\ -d &apos;merchant_payment_code=d59cb7166e7&apos; \\ -d &apos;currency_code=BRL&apos; \\ -d &apos;amount=100&apos; \\ -d &apos;sub_acc_name=Merchant+Test+Name&apos; \\ -d &apos;sub_acc_image_url=https://www.colourbox.com/preview/9155263-store-front.jpg&apos;  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Sub Accounts#",
    "url": "docs/payments/guides/features/sub-accounts#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Provide the Sub Account Information",
    "type": 1,
    "pageTitle": "Sub Accounts#",
    "url": "docs/payments/guides/features/sub-accounts#undefined",
    "content": "When using sub accounts, you need to provide a few extra fields:  Parameter Description payment.sub_account An object containing the sub account&#x2019;s name. Required for payments where the sub-account feature is being used. payment.sub_account.name Name of the sub-account that will be showed in the cash payment and e-mails. payment.sub_account.image_url URL of the logo of the sub-account. PS: It MUST be an HTTPS URL. Otherwise, you will receive an error message.  "
  },
  {
    "title": "Send the payment request with the sub account",
    "type": 1,
    "pageTitle": "Sub Accounts#",
    "url": "docs/payments/guides/features/sub-accounts#undefined",
    "content": "This feature is available in both Direct API and Payment Page. Request using Direct API# Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/direct' \\-d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"boleto\", \"merchant_payment_code\": \"17c0c4ef790\", \"currency_code\": \"BRL\", \"amount_total\": 100, \"sub_account\": { \"name\":\"Loja de Teste\", \"image_url\":\"https://www.colourbox.com/preview/9155263-store-front.jpg\" } }}' Request using Payment Page# Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/request' \\-d 'integration_key=your_test_integration_key' \\-d 'name=José Silva' \\-d 'email=josesilva@example.com' \\-d 'country=br' \\-d 'payment_type_code=boleto' \\-d 'merchant_payment_code=d59cb7166e7' \\-d 'currency_code=BRL' \\-d 'amount=100'\\-d 'sub_acc_name=Merchant+Test+Name'\\-d 'sub_acc_image_url=https://www.colourbox.com/preview/9155263-store-front.jpg' "
  },
  {
    "title": "3D Secure#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/threedsecure-2",
    "content": "",
    "keywords": "3D Secure 3DS"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "3D Secure#",
    "url": "docs/payments/guides/features/threedsecure-2#product-overview",
    "content": "3D Secure, or 3DS, is a technical standard that adds a layer of security in online credit and debit card transactions, protecting the buyer's against unauthorised use. During the checkout process, if the cardholder is enrolled in 3D Secure, the issuing bank will decide whether the cardholder's identity can be verified using data supplied regarding the cardholder and their device, or if an additional authentication process is necessary. If additional authentication is necessary, a process provided by the issuing bank will begin to verify the cardholder’s identity via SMS one-time passcode, the issuing bank's mobile app, biometric methods, or other means. One of the main advantages of the protocol is the shift in liability of fraudulent chargebacks. If the transaction was authenticated, the liability of the transaction shifts from the merchant to the issuer. Unlike the 3DS 1.0, 3DS 2.0 simplifies the payment process by providing a larger set of cardholder information to the issuer, allowing for improved risk assessment and the ability to skip authentication challenge processes altogether for low risk transactions, leading to lower abandonment rates and better user experience. "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "3D Secure#",
    "url": "docs/payments/guides/features/threedsecure-2#who-is-this-for",
    "content": "3DS is required for debit cards transactions in Brazil, so, if you are looking to use this payment method, 3DS is a must. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "3D Secure#",
    "url": "docs/payments/guides/features/threedsecure-2#how-it-works",
    "content": " Merchant authenticates transaction using its own external authenticator;Merchant gets the Encrypted Authentication Data;Merchant requests a payment to EBANX using the Cryptogram data;EBANX process the transactions and return the result. noteWe provide a 3DS Authenticator in our EBANX JS Javascript library, but, you can use any authenticator of your choice. "
  },
  {
    "title": "Availability",
    "type": 1,
    "pageTitle": "3D Secure#",
    "url": "docs/payments/guides/features/threedsecure-2#availability",
    "content": "EBANX supports 3DS Authentication for the following countries and payment methods: 🇧🇷 Brazil Debit cards Visa, Mastercard, Elo;  "
  },
  {
    "title": "Integration Steps",
    "type": 1,
    "pageTitle": "3D Secure#",
    "url": "docs/payments/guides/features/threedsecure-2#integration-steps",
    "content": "For more details on how to 3DS with each integration method, check the following guides: API Integration Payment Page Integration "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "3D Secure#",
    "url": "docs/payments/guides/features/threedsecure-2#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Card Tokenization#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/guides/features/tokenization",
    "content": "",
    "keywords": "Tokenization"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#about-this-guide",
    "content": "This page explains how to create a credit card token using our javascript library, EBANX.js, and our Direct API. Tokens allow merchants to perform transactions without sending raw credit card information to their server. If you are not integrated with EBANX Direct API yet, please take a look at this basic guide about it. Are you not sure if EBANX Direct API is the best option for your e-commerce? Please, talk with one of our integration specialists. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here;Credit Cards or Debit Cards enabled in your EBANX Dashboard. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#how-it-works",
    "content": "There are two options to create a credit card token: EBANX.js: In this method, you'll generate the token on the client side, using our EBANX.js javascript library and send the token to your API call.Direct API: In this method, you'll use only our Direct API to create the token and add it to your payment. "
  },
  {
    "title": "Live Sample",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#live-sample",
    "content": "Here's a sample of a token being generated using EBANX.js: See the Pen by ferpa2012 (@ferpa2012) on CodePen. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Create a token using EBANX.js",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#create-a-token-using-ebanxjs",
    "content": "Add EBANX.js to your webpageOur client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage:Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script>And initialize it with your Merchant's Configuration:Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" });Create an object with your payment informationCreate an object with with the following fields:Copyconst tokenizeOptions = { \"card\": { \"number\": \"4111111111111111\", \"dueDate\": \"12/2025\", \"holderName\": \"JOAO DA SILVA\" }, \"paymentTypeCode\": \"creditcard\", \"countryCode\": \"br\",};Create the token using EBANX.jsCall the EBANX.cardTokenizer.tokenize function passing the object created in the previous step.CopyEBANX.cardTokenizer.tokenize(tokenizeOptions) .then((tokenizedCard) => { // use the tokenizedCard to fullfil your payment }) .catch(error => { // handle any errors that can happen });EBANX.cardTokenizer.tokenize returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful token creation response contains the following fields. The values will vary for each token creation:Copy//The tokenizedCard object created in the previous step will have the following fields:{ payment_type_code: \"visa\" token: \"c7957fc8d0e92c8fa859120ccbf24ef03486dc2cbc9081447bf883a6c495c71fdcd85b77db23373ae3ab76910a8857eb7788540c190a7160195d51de016699f6\"}Add the token to your payment requestInclude the token you obtained in the previous step to your card object in your Direct API call. For more information on our Direct API, click here!Copy//If you're using old Javascript syntax, the spread syntax will not work. So in this case you can set the card properties individually. \"card\": { ...tokenizedCard //spread of the object returned by EBANX.cardTokenizer.tokenize.} "
  },
  {
    "title": "Add EBANX.js to your webpage",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#undefined",
    "content": "Our client SDK enables you to securely collect payment information from your customers. Add the following script to your webpage: Copy<script type=\"text/javascript\" src=\"https://ebanx-js.ebanx.com/v1.0.0/dist/ebanx.js\"></script> And initialize it with your Merchant's Configuration: Copy EBANX.init({ publicIntegrationKey: \"your_integration_key_goes_here\", country: \"br\", mode: \"test\" }); "
  },
  {
    "title": "Create an object with your payment information",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#undefined",
    "content": "Create an object with with the following fields: Copyconst tokenizeOptions = { \"card\": { \"number\": \"4111111111111111\", \"dueDate\": \"12/2025\", \"holderName\": \"JOAO DA SILVA\" }, \"paymentTypeCode\": \"creditcard\", \"countryCode\": \"br\",}; "
  },
  {
    "title": "Create the token using EBANX.js",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#undefined",
    "content": "Call the EBANX.cardTokenizer.tokenize function passing the object created in the previous step. CopyEBANX.cardTokenizer.tokenize(tokenizeOptions) .then((tokenizedCard) => { // use the tokenizedCard to fullfil your payment }) .catch(error => { // handle any errors that can happen }); EBANX.cardTokenizer.tokenize returns a Promise object, so, make sure you handle the asynchrounous call properly by using a callback function. A successful token creation response contains the following fields. The values will vary for each token creation: Copy//The tokenizedCard object created in the previous step will have the following fields:{ payment_type_code: \"visa\" token: \"c7957fc8d0e92c8fa859120ccbf24ef03486dc2cbc9081447bf883a6c495c71fdcd85b77db23373ae3ab76910a8857eb7788540c190a7160195d51de016699f6\"} "
  },
  {
    "title": "Add the token to your payment request",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#undefined",
    "content": "Include the token you obtained in the previous step to your card object in your Direct API call. For more information on our Direct API, click here! Copy//If you're using old Javascript syntax, the spread syntax will not work. So in this case you can set the card properties individually. \"card\": { ...tokenizedCard //spread of the object returned by EBANX.cardTokenizer.tokenize.} "
  },
  {
    "title": "Create a token using Direct API",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#create-a-token-using-direct-api",
    "content": "Call the /ws/token to create the tokenUsing the /ws/token API call, pass the credit card information, country, payment type and your integration key. Here's an example:Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/token' \\ -d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"payment_type_code\": \"creditcard\", \"country\": \"br\", \"card\": { \"card_number\": \"4111111111111111\", \"card_name\": \"Jose da Silva\", \"card_due_date\": \"10/2020\", \"card_cvv\": \"123\" }}'A successful API call will return the following JSON object:Copy{ \"status\": \"SUCCESS\", \"payment_type_code\": \"visa\", \"token\": \"b81cc06bcf0d013c3688eb1b229dc155cd23b5d18781bee0fb246537cb42f151117ae7f06617cae384d4829c82151983177c87584686fad5e497dde1d0871862\", \"masked_card_number\": \"411111xxxxxx1111\"}Add the token to your payment requestInclude the token you obtained in the previous step to your card object in your Direct API call. For more information on our Direct API, click here!Copy\"card\": { \"token\": \"b81cc06bcf0d013c3688eb1b229dc155cd23b5d18781bee0fb246537cb42f151117ae7f06617cae384d4829c82151983177c87584686fad5e497dde1d0871862\"} "
  },
  {
    "title": "Call the /ws/token to create the token",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#undefined",
    "content": "Using the /ws/token API call, pass the credit card information, country, payment type and your integration key. Here's an example: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/token' \\ -d 'request_body={ \"integration_key\": \"your_test_integration_key\", \"payment_type_code\": \"creditcard\", \"country\": \"br\", \"card\": { \"card_number\": \"4111111111111111\", \"card_name\": \"Jose da Silva\", \"card_due_date\": \"10/2020\", \"card_cvv\": \"123\" }}' A successful API call will return the following JSON object: Copy{ \"status\": \"SUCCESS\", \"payment_type_code\": \"visa\", \"token\": \"b81cc06bcf0d013c3688eb1b229dc155cd23b5d18781bee0fb246537cb42f151117ae7f06617cae384d4829c82151983177c87584686fad5e497dde1d0871862\", \"masked_card_number\": \"411111xxxxxx1111\"} "
  },
  {
    "title": "Add the token to your payment request",
    "type": 1,
    "pageTitle": "Card Tokenization#",
    "url": "docs/payments/guides/features/tokenization#undefined",
    "content": "Include the token you obtained in the previous step to your card object in your Direct API call. For more information on our Direct API, click here! Copy\"card\": { \"token\": \"b81cc06bcf0d013c3688eb1b229dc155cd23b5d18781bee0fb246537cb42f151117ae7f06617cae384d4829c82151983177c87584686fad5e497dde1d0871862\"} "
  },
  {
    "title": "Direct API Integration#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/ebanx-direct",
    "content": "",
    "keywords": "API"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "Direct API Integration#",
    "url": "docs/payments/integration-methods/ebanx-direct#product-overview",
    "content": "The Direct API of EBANX is the transparent checkout (with no redirect) solution that allows you to accept payments by all payment methods and countries directly on your domain. Your customers will benefit from a smoother user experience as they can complete the checkout without the need to leave the store's front end. There are some requirements to follow before making the integration that you can learn here. "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "Direct API Integration#",
    "url": "docs/payments/integration-methods/ebanx-direct#who-is-this-for",
    "content": "Direct API is the recommended solution if you want to control the entire user experience on your e-commerce, without redirects to a third-party checkout page. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Direct API Integration#",
    "url": "docs/payments/integration-methods/ebanx-direct#how-it-works",
    "content": " Customer proceeds to checkout in Merchant website;Merchant requests Payment through Direct API;EBANX replies with a payment JSON object;Merchant replies to customer with status of the payment; "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "Direct API Integration#",
    "url": "docs/payments/integration-methods/ebanx-direct#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With our Payment Page integration, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Cash/voucher payment Rapipago, Pagofacil; Additional features Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇴 Bolivia Cash/voucher payment PagosNet; Get to know more To know more about Bolivian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Debit cards Visa, Master, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Digital Wallets Mercado Pago, Paypal, Picpay; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Debit with 3DS 2.0, Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Cash/voucher payment Multicaja, Servipag, Sencillito; Alternative methods Multicaja, Servipag; Additional features Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master, AMEX, Diners; Cash/voucher payment Baloto, Efecty; Digital Wallets Nequi; Alternative methods PSE; Additional features Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇪🇨 Ecuador Cash/voucher payment Safety Pay; Get to know more To know more about Ecuadorian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Alternative methods SPEI; Additional features Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Cash/voucher payment PagoEfectivo, SafetyPay; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  🇺🇾 Uruguay Credit cards Visa, Master, Diners, Oca, Lider, Creditel; Debit cards Visa; Pre-Paid Mi dinero, Prex; Get to know more To know more about Uruguay Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about those payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Still have doubts?",
    "type": 1,
    "pageTitle": "Direct API Integration#",
    "url": "docs/payments/integration-methods/ebanx-direct#still-have-doubts",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "What's next?",
    "type": 1,
    "pageTitle": "Direct API Integration#",
    "url": "docs/payments/integration-methods/ebanx-direct#whats-next",
    "content": "Request an accountIntegration guide for Direct API "
  },
  {
    "title": "EBANX Payment Page#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/ebanx-payment-page",
    "content": "",
    "keywords": "Payment page"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#product-overview",
    "content": "The EBANX Payment Page is one of our easiest and simpler integrations. It works with any kind of e-commerce, by seamlessly connecting with your shopping cart. You pick which payments options will be shown at the checkout among more than 30 local payment methods.  When a customer picks one of the EBANX payment methods, it will be redirected to the external checkout where very quickly it can complete the payment.  Once the customer has completed all fields and successfully paid the order, it will be redirected back to your store.  "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#who-is-this-for",
    "content": "EBANX Payment Page is the best option if you don't want to host your own check-out page. It's the quickest option to get your business up and running within LatAm. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#how-it-works",
    "content": " Customer proceeds to checkout in Merchant website;Merchant requests Payment Page link throught API;EBANX Generates an URL to that specific payment and returns it to Merchant;Merchant redirect customer to the link returned by EBANX;Customer is redirected to EBANX Payment page to make his/her payment;After the payment response, customer is redirected to the callback URL informed in the first request. "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With our Payment Page integration, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Cash/voucher payment Rapipago, Pagofacil; Additional features Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇴 Bolivia Cash/voucher payment PagosNet; Get to know more To know more about Bolivian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Debit cards Visa, Master, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Digital Wallets Mercado Pago, Paypal, Picpay; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Debit with 3DS 2.0, Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Cash/voucher payment Multicaja, Servipag, Sencillito; Alternative methods Multicaja, Servipag; Additional features Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master, AMEX, Diners; Cash/voucher payment Baloto, Efecty; Digital Wallets Nequi; Alternative methods PSE; Additional features Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇪🇨 Ecuador Cash/voucher payment Safety Pay; Get to know more To know more about Ecuadorian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Alternative methods SPEI; Additional features Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Cash/voucher payment PagoEfectivo, SafetyPay; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  🇺🇾 Uruguay Credit cards Visa, Master, Diners, Oca, Lider, Creditel; Debit cards Visa; Pre-Paid Mi dinero, Prex; Get to know more To know more about Uruguay Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about those payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Restrictions",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#restrictions",
    "content": "Please note EBANX Payment Page does not support recurring payments via credit card tokenization. "
  },
  {
    "title": "Still have doubts?",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#still-have-doubts",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "What's next?",
    "type": 1,
    "pageTitle": "EBANX Payment Page#",
    "url": "docs/payments/integration-methods/ebanx-payment-page#whats-next",
    "content": "Request an accountIntegration guide for Payment page "
  },
  {
    "title": "Google Pay#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/google-pay",
    "content": "",
    "keywords": "Google Pay"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Google Pay#",
    "url": "docs/payments/integration-methods/google-pay#about-this-guide",
    "content": "This page explains how to use Google Pay to process payments using our Direct API. With Google Pay your customers can pay for their purchases with the cards and information already saved in their Google Accounts, along with data saved on their Android Pay, Chrome and YouTube accounts. "
  },
  {
    "title": "Availability",
    "type": 1,
    "pageTitle": "Google Pay#",
    "url": "docs/payments/integration-methods/google-pay#availability",
    "content": "Google Pay integration with EBANX is available to the following countries and payment methods: 🇧🇷 Brazil Available payment methods#creditcard: Credit CardsAvailable currencies#BRL: Brazillian ReaisEUR: EurosUSD: US Dollars  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Google Pay#",
    "url": "docs/payments/integration-methods/google-pay#how-it-works",
    "content": " To complete an integration using Google Pay, follow the steps below. Setup your integration with GoogleTo start processing payments with Google Pay, you need to integrate with Google via Web or SKD.During the integration you will see that some parameters are required to process Google Pay through EBANX, these include:Information for gatewayMerchantId – You will need to access your Dashboard Account, click on your “Username”, then on “Account Settings” and on “Integration”. It is the way you will see your gateway merchant ID in the “Secret Keys” area. If you have any questions, send an email to the Integration Team;The parameter gateway should be filled with ebanx;Mandatory fields: Name, address, phone, and email.infoTo offer support for tokenized debit or credit combo cards from Brazil, the countryCode in TransactionInfo must be BR, and both the credit and debit networks need to be specified in the request, property allowedCardNetworks.The following networks are supported: VISA, ELECTRON, MASTERCARD, MAESTRO, ELO and ELO_DEBITAdd the Google Pay token to your Direct API CallWhen you receive the customer’s information sent from Google and build the request body, make sure to send the “token” that you received from Google in the google_pay parameter like the example below.infoImportant to know: This parameter expects a string, so there’s no need to parse it to JSON.Pay AttentionThe CPF (government issued identification document in Brazil) is not a required field for Google, but, it is required for EBANX, so don’t forget to ask your customer about it, because Google will not provide it to you otherwise.Copy curl -X POST 'https://api.ebanxpay.com/ws/direct'\\ -d 'request_body={ \"integration_key\": \"your_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"creditcard\", \"merchant_payment_code\": \"<%= random_order_id %>\", \"currency_code\": \"BRL\", \"amount_total\": 100, \"card\": { \"card_name\": \"José Silva\", \"google_pay\": \"{\\\"signature\\\":\\\"MEUCIFU/vJavw2HKB4bHbVxZp1JqaIdUa5R1ENbk59MG + fHFAiEA1UBu7ZS1YC1v + Go6ScIbel / XyBKVt29Qr1mSdObWIig\\\\ u003d\\ \",\\\"protoc olVersion\\ \":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\ \"ZkxOdAiV2EJXbNRkU1izADoLPyQtidbSvAC4HxnAGJPkFcnFbwwMVKHeXYjmkGbIjAg 3 uzIqsds1G5NrDMzwwztdwmPQ0BjE3lIhVASIg1iljIiNQzcTkhHqTMc01Rs9yn3w2T9W gws2UGJ42YEnkeiVPjQfM3NvIAmxwCA8CAWrYZFmQfQCUGHK6H0dZolvjGGI8YtNwaImo 4 aC6YMCo4t9FfwT + pITZdS9BfIMmjx2iXzjZF1Iy + c53lwzVVFEljGF5mh6cHEzZdKCVj F5U11tKt6MybAkEU6yxEqOfdjp41FwjcJ3SknlzrDBrFXqL66cq + xtfCGTPfRvzs7SnFE h5MKtzg14VmAQ0TyoQpZuBvrhRnmWxkQU4yzj4q6wCX2VSDO4M4KVvSpVUVTCWVydPmdn hFKzL84uVU2YKV8dxjGz7VJNOlF4sJH + G158Ru + w\\\\\\\\ u003d\\\\\\ \",\\\\\\\"ephemeralPu blicKey\\\\\\ \":\\\\\\\"BF1s3ATPQMJkfCvLmOAgG9oTcF+P9Wdh5WNJyGeMjcywjEtBhfFdG HOkZTZR + poT2LQjBrRADtWkD5yFuEEV7w\\\\\\\\ u003d\\\\\\ \",\\\\\\\"tag\\\\\\\":\\\\\\\"SP4tH1 HxhSTbcNEhmFfEgSRHW7G46B1J3m / FEl6mPzg\\\\\\\\ u003d\\\\\\ \"}\\\"}\" } }}' A successful request will return a JSON response similar to the one below.Copy { \"payment\": { \"hash\": \"5a1c6820f28a2fd24c11a1dcde32e79c01c9814b66183cc3\", \"pin\": \"467872297\", \"merchant_payment_code\": \"80b83352839\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2017-11-27 19:31:43\", \"open_date\": \"2017-11-27 19:31:43\", \"confirm_date\": \"2017-11-27 19:31:43\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-11-30\", \"instalments\": \"1\", \"payment_type_code\": \"visa\", \"details\": { \"billing_descriptor\": \"YOUR DESCRIPTOR\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Accepted\", \"authcode\": \"82656\" }, \"pre_approved\": true, \"capture_available\": false }, \"status\": \"SUCCESS\"}  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Google Pay#",
    "url": "docs/payments/integration-methods/google-pay#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Setup your integration with Google",
    "type": 1,
    "pageTitle": "Google Pay#",
    "url": "docs/payments/integration-methods/google-pay#undefined",
    "content": "To start processing payments with Google Pay, you need to integrate with Google via Web or SKD. During the integration you will see that some parameters are required to process Google Pay through EBANX, these include: Information for gatewayMerchantId – You will need to access your Dashboard Account, click on your “Username”, then on “Account Settings” and on “Integration”. It is the way you will see your gateway merchant ID in the “Secret Keys” area. If you have any questions, send an email to the Integration Team;The parameter gateway should be filled with ebanx;Mandatory fields: Name, address, phone, and email. infoTo offer support for tokenized debit or credit combo cards from Brazil, the countryCode in TransactionInfo must be BR, and both the credit and debit networks need to be specified in the request, property allowedCardNetworks.The following networks are supported: VISA, ELECTRON, MASTERCARD, MAESTRO, ELO and ELO_DEBIT "
  },
  {
    "title": "Add the Google Pay token to your Direct API Call",
    "type": 1,
    "pageTitle": "Google Pay#",
    "url": "docs/payments/integration-methods/google-pay#undefined",
    "content": "When you receive the customer’s information sent from Google and build the request body, make sure to send the “token” that you received from Google in the google_pay parameter like the example below. infoImportant to know: This parameter expects a string, so there’s no need to parse it to JSON. Pay AttentionThe CPF (government issued identification document in Brazil) is not a required field for Google, but, it is required for EBANX, so don’t forget to ask your customer about it, because Google will not provide it to you otherwise. Copy curl -X POST 'https://api.ebanxpay.com/ws/direct'\\ -d 'request_body={ \"integration_key\": \"your_integration_key\", \"operation\": \"request\", \"payment\": { \"name\": \"José Silva\", \"email\": \"jose@example.com\", \"document\": \"853.513.468-93\", \"address\": \"Rua E\", \"street_number\": \"1040\", \"city\": \"Maracanaú\", \"state\": \"CE\", \"zipcode\": \"61919-230\", \"country\": \"br\", \"phone_number\": \"8522847035\", \"payment_type_code\": \"creditcard\", \"merchant_payment_code\": \"<%= random_order_id %>\", \"currency_code\": \"BRL\", \"amount_total\": 100, \"card\": { \"card_name\": \"José Silva\", \"google_pay\": \"{\\\"signature\\\":\\\"MEUCIFU/vJavw2HKB4bHbVxZp1JqaIdUa5R1ENbk59MG + fHFAiEA1UBu7ZS1YC1v + Go6ScIbel / XyBKVt29Qr1mSdObWIig\\\\ u003d\\ \",\\\"protoc olVersion\\ \":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\ \"ZkxOdAiV2EJXbNRkU1izADoLPyQtidbSvAC4HxnAGJPkFcnFbwwMVKHeXYjmkGbIjAg 3 uzIqsds1G5NrDMzwwztdwmPQ0BjE3lIhVASIg1iljIiNQzcTkhHqTMc01Rs9yn3w2T9W gws2UGJ42YEnkeiVPjQfM3NvIAmxwCA8CAWrYZFmQfQCUGHK6H0dZolvjGGI8YtNwaImo 4 aC6YMCo4t9FfwT + pITZdS9BfIMmjx2iXzjZF1Iy + c53lwzVVFEljGF5mh6cHEzZdKCVj F5U11tKt6MybAkEU6yxEqOfdjp41FwjcJ3SknlzrDBrFXqL66cq + xtfCGTPfRvzs7SnFE h5MKtzg14VmAQ0TyoQpZuBvrhRnmWxkQU4yzj4q6wCX2VSDO4M4KVvSpVUVTCWVydPmdn hFKzL84uVU2YKV8dxjGz7VJNOlF4sJH + G158Ru + w\\\\\\\\ u003d\\\\\\ \",\\\\\\\"ephemeralPu blicKey\\\\\\ \":\\\\\\\"BF1s3ATPQMJkfCvLmOAgG9oTcF+P9Wdh5WNJyGeMjcywjEtBhfFdG HOkZTZR + poT2LQjBrRADtWkD5yFuEEV7w\\\\\\\\ u003d\\\\\\ \",\\\\\\\"tag\\\\\\\":\\\\\\\"SP4tH1 HxhSTbcNEhmFfEgSRHW7G46B1J3m / FEl6mPzg\\\\\\\\ u003d\\\\\\ \"}\\\"}\" } }}'  A successful request will return a JSON response similar to the one below. Copy { \"payment\": { \"hash\": \"5a1c6820f28a2fd24c11a1dcde32e79c01c9814b66183cc3\", \"pin\": \"467872297\", \"merchant_payment_code\": \"80b83352839\", \"order_number\": null, \"status\": \"CO\", \"status_date\": \"2017-11-27 19:31:43\", \"open_date\": \"2017-11-27 19:31:43\", \"confirm_date\": \"2017-11-27 19:31:43\", \"transfer_date\": null, \"amount_br\": \"100.38\", \"amount_ext\": \"100.00\", \"amount_iof\": \"0.38\", \"currency_rate\": \"1.0000\", \"currency_ext\": \"BRL\", \"due_date\": \"2017-11-30\", \"instalments\": \"1\", \"payment_type_code\": \"visa\", \"details\": { \"billing_descriptor\": \"YOUR DESCRIPTOR\" }, \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"OK\", \"description\": \"Accepted\", \"authcode\": \"82656\" }, \"pre_approved\": true, \"capture_available\": false }, \"status\": \"SUCCESS\"}  "
  },
  {
    "title": "Payments by Link#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/payments-by-link",
    "content": "",
    "keywords": "Payments by Link"
  },
  {
    "title": "Product Overview",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#product-overview",
    "content": "Using on-demand payments, you can manually generate payment links on your Dashboard and send it to your customers. That way, your customer just need to access the link and complete the payment on our EBANX Payment Page. infoAll EBANX Merchant Accounts have this option enabled by default. "
  },
  {
    "title": "Who is this for",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#who-is-this-for",
    "content": "Payments by Link is a great option for merchants that have ad-hoc payments that can be sent manually, as the need shows up. Since it comes by default with your dashboard, no integration or coding is needed to use this feature. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#how-it-works",
    "content": " Login in EBANX Dashboard Access your EBANX Dashboard . Find the Payment Link option At the top of your Dashboard, click &quot;+ Create&quot;. If you already have our Payout solution, click on &quot;+ Create&quot; + &quot;Payment Link&quot;. Create the payment link Fill the required fields and click &quot;Request payment&quot;: Below you can find the available options to generate your payment link: Field Description Customer email The customer email address, where the payment link will be sent (optional). Send email If checked, EBANX will send an email to the customer with a link to the complete the payment. Country Select the country of the customer. The payment currency and the available payment methods will change depending on each country. Currency The currency of the requested payment amount. Only the USD and the customers&apos; country local currency will be available. Amount The amount to be paid by the customer. The decimal separator is the comma (e.g., 59,90). Order number A reference number of the payment (optional). Payment method The options of payment methods may be different because the availability of payment methods depend on the selected country and your contract. Due date Payment due date, for boletos with USD currency only. Max number instalments Payment instalments, for credit cards only. A number will change according to on your contract. Use it! If you checked &quot;Send Email&quot; and filled the other fields correctly, you&apos;ll be sent to a confirmation page, and you&apos;ll see the following message: &#xA0; info It&apos;s important to know that the payment URL will expire after two days if the customer doesn&apos;t complete the checkout.  "
  },
  {
    "title": "Available features and methods of payments",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#available-features-and-methods-of-payments",
    "content": "EBANX supports key payment methods within Latin America. With Payments by Link, you can offer any of the payment methods and features listed below. 🇦🇷 Argentina Credit cards Visa, Master, AMEX, Diners, Cabal, Naranja; Debit cards Visa (Electron), Master (Maestro), Cabal; Cash/voucher payment Rapipago, Pagofacil; Additional features Up to 12 installments in credit cards; Get to know more To know more about Argentinian Payment Methods, check EBANX Business Page  🇧🇴 Bolivia Cash/voucher payment PagosNet; Get to know more To know more about Bolivian Payment Methods, check EBANX Business Page  🇧🇷 Brazil Credit cards Visa, Master, AMEX, Diners, ELO, Hipercard; Debit cards Visa, Master, ELO, Hipercard; Cash/voucher payment Boleto Bancário; Alternative methods Online Debit (Banco do Brasil, Itaú, Bradesco and Banrisul), Bank transfer; Additional features Debit with 3DS 2.0, Up to 12 installments in credit cards; Get to know more To know more about Brazilian Payment Methods, check EBANX Business Page  🇨🇱 Chile Credit cards Visa, Master, AMEX, Diners, Magna; Debit cards Visa, Master (Maestro); Cash/voucher payment Multicaja, Servipag, Sencillito; Alternative methods Multicaja, Servipag; Additional features Up to 48 installments in credit cards; Get to know more To know more about Chilean Payment Methods, check EBANX Business Page  🇨🇴 Colombia Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master, AMEX, Diners; Cash/voucher payment Baloto, Efecty; Digital Wallets Nequi; Alternative methods PSE; Additional features Up to 36 installments in credit cards; Get to know more To know more about Colombian Payment Methods, check EBANX Business Page  🇪🇨 Ecuador Cash/voucher payment Safety Pay; Get to know more To know more about Ecuadorian Payment Methods, check EBANX Business Page  🇲🇽 Mexico Credit cards Visa, Master, AMEX, Carnet; Debit cards Visa, Master, AMEX, Carnet; Cash/voucher payment Oxxo; Alternative methods SPEI; Additional features Up to 12 installments in credit cards; Get to know more To know more about Mexican Payment Methods, check EBANX Business Page  🇵🇪 Peru Credit cards Visa, Master, AMEX, Diners; Debit cards Visa, Master; Cash/voucher payment PagoEfectivo, SafetyPay; Get to know more To know more about Peruvian Payment Methods, check EBANX Business Page  🇺🇾 Uruguay Credit cards Visa, Master, Diners, Oca, Lider, Creditel; Debit cards Visa; Pre-Paid Mi dinero, Prex; Get to know more To know more about Uruguay Payment Methods, check EBANX Business Page  Questions about this section? If you have any questions about those payment methods or features, please please get in touch with our support team at [integration@ebanx.com]. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Login in EBANX Dashboard",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#undefined",
    "content": "Access your EBANX Dashboard.  "
  },
  {
    "title": "Find the Payment Link option",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#undefined",
    "content": "At the top of your Dashboard, click \"+ Create\".  If you already have our Payout solution, click on \"+ Create\" + \"Payment Link\".  "
  },
  {
    "title": "Create the payment link",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#undefined",
    "content": "Fill the required fields and click \"Request payment\":  Below you can find the available options to generate your payment link:  Field Description Customer email The customer email address, where the payment link will be sent (optional). Send email If checked, EBANX will send an email to the customer with a link to the complete the payment. Country Select the country of the customer. The payment currency and the available payment methods will change depending on each country. Currency The currency of the requested payment amount. Only the USD and the customers&apos; country local currency will be available. Amount The amount to be paid by the customer. The decimal separator is the comma (e.g., 59,90). Order number A reference number of the payment (optional). Payment method The options of payment methods may be different because the availability of payment methods depend on the selected country and your contract. Due date Payment due date, for boletos with USD currency only. Max number instalments Payment instalments, for credit cards only. A number will change according to on your contract.  "
  },
  {
    "title": "Use it!",
    "type": 1,
    "pageTitle": "Payments by Link#",
    "url": "docs/payments/integration-methods/payments-by-link#undefined",
    "content": "If you checked \"Send Email\" and filled the other fields correctly, you'll be sent to a confirmation page, and you'll see the following message:   infoIt's important to know that the payment URL will expire after two days if the customer doesn't complete the checkout. "
  },
  {
    "title": "Magento extension#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/plugins/magento",
    "content": "",
    "keywords": "Magento"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#about-this-guide",
    "content": "This guide will guide you through the steps to setup EBANX as a payment gateway on your Magento store. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#how-it-works",
    "content": " Update your merchant settings Access the&#xA0; Dashboard , go to&#xA0; Settings &#xA0;and change the following fields, where {YOUR_SITE} is your store URL: Status Change Notification URL:&#xA0; {YOUR_SITE}/ebanx/payment/notify Response URL:&#xA0; {YOUR_SITE}/ebanx/payment/return Install the extension Download the EBANX Magento extension and extract its contents to the root folder of your Magento installation. You may want to move it to your computer and then upload the content to your server. Flush Magento Cache Go to your store administrative area. If you have cache enabled, you will need to flush it at System &gt; Cache Management, by clicking on the button &quot;Flush Magento Cache&quot;. Now, you will see EBANX settings at System &gt; Configuration &gt; Payment Methods &gt; EBANX. Additional step if using an old version of EBANX Magento Extension caution This step is only required if you have older versions of the EBANX Magento Extension already installed. After installation, access again &quot;System&quot; &gt; &quot;Configuration&quot; &gt; &quot;Advanced&quot; &gt; &quot;Advanced&quot;. Search for &quot;EBANX Standard&quot;, &quot;EBANX EBANX&quot; and &quot;EBANX Express&quot; that correspond to the old version and select &quot;Disable&quot;. info After the update, it&apos;s essential to let only &quot;EBANX Gateway&quot; activated, like this image below: Update the extension settings Enable the EBANX payment extension and add the integration key the EBANX integration team gave you. You will need to use different keys in test and production modes. Here&apos;s a summary of the items available for configuration Parameter Description Mode Sandbox or live. Sandbox Integration Key Unique test mode key, keep it safe and do not expose this information. Sandbox Public Integration Key General test mode key. You can do a token operation using this, key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this you do not have to deal directly with the credit card information of your customer. Live Integration Key Once you have completed the process of integration with EBANX, you will receive a unique live mode key which will allow you to operate with our services; it is essential to keep all the information safe and not exposed. Live Public Integration Key&#xA0; General live mode key. Just like the Sandbox Public Integration Key, you can do a token operation using this key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this, you do not have to deal directly with the credit card information of your customer. Enable Debug Log Record all errors that occur when executing a transaction. Checkout For CPF -- individuals/CNPJ -- companies -- to process with the EBANX Plugin in Brazil there a few mandatory fields such as CPF identification for individuals and CNPJ for companies. Payment Methods Select payment methods for each country. Payment Methods Visualisation Show payment methods logo for better conversion at your checkout. Enable instalments Enable or disable instalments. Your merchant account must be allowed to process credit card payments with instalments. Maximum n&#xB0; of Instalments The number of instalments that are enabled. Minimum Instalment (USD) Minimum Instalment value Interest rates&#xA0; Enables/disables interest rates to customer Interest&#xA0; Add and configure different interest rates for each number of instalments. Days to Expiration The due date for printable slips (boleto/boletas, etc.). You must ask EBANX to change this limit for your account. Paid Payment Status The paid order status. The standard option is &quot;Processing&quot;. Pending Payment Status The new order status. The standard option is &quot;On Hold&quot;. Requested Payment Status The new order status. The standard option is &quot;Pending&quot;. Cancelled Payment Status The cancelled order status. The standard option is &quot;Canceled&quot;. Mandatory Fields Processing with EBANX requires a few mandatory fields that need to be included in your checkout when processing to Brazil and Chile, such as CPF, CNPJ, DNI, and RUT. You can choose to: replace your TAX/VAT fields and name it as these mandataries field or add your own field.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com.Alternatively, you can check our FAQ at the end of this page for further questions. "
  },
  {
    "title": "Update your merchant settings",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#undefined",
    "content": "Access the Dashboard, go to Settings and change the following fields, where {YOUR_SITE} is your store URL: Status Change Notification URL: {YOUR_SITE}/ebanx/payment/notifyResponse URL: {YOUR_SITE}/ebanx/payment/return  "
  },
  {
    "title": "Install the extension",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#undefined",
    "content": "Download the EBANX Magento extension and extract its contents to the root folder of your Magento installation. You may want to move it to your computer and then upload the content to your server. "
  },
  {
    "title": "Flush Magento Cache",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#undefined",
    "content": "Go to your store administrative area. If you have cache enabled, you will need to flush it at System > Cache Management, by clicking on the button \"Flush Magento Cache\". Now, you will see EBANX settings at System > Configuration > Payment Methods > EBANX. "
  },
  {
    "title": "Additional step if using an old version of EBANX Magento Extension",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#undefined",
    "content": "cautionThis step is only required if you have older versions of the EBANX Magento Extension already installed. After installation, access again \"System\" > \"Configuration\" > \"Advanced\" > \"Advanced\". Search for \"EBANX Standard\", \"EBANX EBANX\" and \"EBANX Express\" that correspond to the old version and select \"Disable\". infoAfter the update, it's essential to let only \"EBANX Gateway\" activated, like this image below:  "
  },
  {
    "title": "Update the extension settings",
    "type": 1,
    "pageTitle": "Magento extension#",
    "url": "docs/payments/integration-methods/plugins/magento#undefined",
    "content": "Enable the EBANX payment extension and add the integration key the EBANX integration team gave you. You will need to use different keys in test and production modes.  Here's a summary of the items available for configuration  Parameter Description Mode Sandbox or live. Sandbox Integration Key Unique test mode key, keep it safe and do not expose this information. Sandbox Public Integration Key General test mode key. You can do a token operation using this, key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this you do not have to deal directly with the credit card information of your customer. Live Integration Key Once you have completed the process of integration with EBANX, you will receive a unique live mode key which will allow you to operate with our services; it is essential to keep all the information safe and not exposed. Live Public Integration Key&#xA0; General live mode key. Just like the Sandbox Public Integration Key, you can do a token operation using this key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this, you do not have to deal directly with the credit card information of your customer. Enable Debug Log Record all errors that occur when executing a transaction. Checkout For CPF -- individuals/CNPJ -- companies -- to process with the EBANX Plugin in Brazil there a few mandatory fields such as CPF identification for individuals and CNPJ for companies. Payment Methods Select payment methods for each country. Payment Methods Visualisation Show payment methods logo for better conversion at your checkout. Enable instalments Enable or disable instalments. Your merchant account must be allowed to process credit card payments with instalments. Maximum n&#xB0; of Instalments The number of instalments that are enabled. Minimum Instalment (USD) Minimum Instalment value Interest rates&#xA0; Enables/disables interest rates to customer Interest&#xA0; Add and configure different interest rates for each number of instalments. Days to Expiration The due date for printable slips (boleto/boletas, etc.). You must ask EBANX to change this limit for your account. Paid Payment Status The paid order status. The standard option is &quot;Processing&quot;. Pending Payment Status The new order status. The standard option is &quot;On Hold&quot;. Requested Payment Status The new order status. The standard option is &quot;Pending&quot;. Cancelled Payment Status The cancelled order status. The standard option is &quot;Canceled&quot;. Mandatory Fields Processing with EBANX requires a few mandatory fields that need to be included in your checkout when processing to Brazil and Chile, such as CPF, CNPJ, DNI, and RUT. You can choose to: replace your TAX/VAT fields and name it as these mandataries field or add your own field.  "
  },
  {
    "title": "Magento 2 extension#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/plugins/magento2",
    "content": "",
    "keywords": "Magento"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#about-this-guide",
    "content": "This guide will guide you through the steps to setup EBANX as a payment gateway on your Magento store. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#how-it-works",
    "content": " Update your merchant settings Access the&#xA0; Dashboard &#xA0;inserting your username and password. Go to&#xA0; Settings &#xA0;and change the following fields, where {YOUR_SITE} is your store URL: Status Change Notification URL:&#xA0; {YOUR_SITE}/digitalhub_ebanx/notification/status Response URL:&#xA0; {YOUR_SITE}/digitalhub_ebanx/return/status Install the extension Download the&#xA0; EBANX Magento 2 extension &#xA0;and extract its contents to the root folder of your Magento installation. You may want to extract it in your computer and then upload its contents to your server. Upload the folder app/code and merge them. Open the terminal from the Magento 2 folder and run the command: Copy php bin/magento setup:upgrade Remove the content of the folder pub/static and run the command: Copy php bin/magento setup:static-content:deploy Now run the command: Copy php bin/magento indexer:reindex And the composer: Copy composer require ebanx/ebanx Set the permissions that you use on your project to the new files. Flush Magento Cache If necessary, you have to flush the cache at System &gt; Cache Management, by clicking on the button &quot;Flush Magento Cache&quot;. Update the extension settings You will see EBANX settings at System &gt; Configuration &gt; Sales &gt; Payment Methods &gt; EBANX. Enable the EBANX payment extension and add the integration key you were given by the EBANX integration team. You will need to use different keys in test and production modes. Change the other settings as needed. The EBANX extension configuration has three sections: EBANX, the general configurations of the extension; EBANX Express, the transparent checkout for credit cards configuration; and EBANX Standard, the default checkout configuration. Below you will find a detailed description of all availabe settings: EBANX Standard -- Checkout settings Setting Description Enabled Enables or disables the EBANX Standard extension. Title The title of the payment method, which will be shown on Magento&apos;s checkout page. Integration key They integration key. It&apos;ll be different for test and production environments. Test mode Enable or disable the test mode. Due date Due date for printable slips (boleto/boletas, etc). You must ask EBANX to change this limit for your account. Payment currency The currency to be used in the payment -- it can be either the currency shown to the customer or the one used in the backend of the store (base currency). Open order status The open order status. Standard option is &quot;Pending&quot;. Paid order status The paid order status. Standard option is &quot;Complete&quot;. Canceled order status The paid order status. Standard option is &quot;Canceled&quot;. EBANX Express -- Transparent credit card checkout settings Setting Description Enabled Enables or disables the EBANX Express extension. Title The title of the payment method, which will be shown on Magento&apos;s checkout page. Integration key They integration key. It&apos;ll be different for test and production environments. Test mode Enable or disable the test mode. Instalments number The number of instalments that are enabled. Enable instalments Enable or disable instalments. Your merchant account must be allowed to process credit card payments with instalments. Payment currency The currency to be used in the payment -- it can be either the currency shown to the customer or the one used in the backend of the store (base currency).  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com.Alternatively, you can check our FAQ at the end of this page for further questions. "
  },
  {
    "title": "Update your merchant settings",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#undefined",
    "content": "Access the Dashboard inserting your username and password. Go to Settings and change the following fields, where {YOUR_SITE} is your store URL: Status Change Notification URL: {YOUR_SITE}/digitalhub_ebanx/notification/statusResponse URL: {YOUR_SITE}/digitalhub_ebanx/return/status  "
  },
  {
    "title": "Install the extension",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#undefined",
    "content": "Download the EBANX Magento 2 extension and extract its contents to the root folder of your Magento installation. You may want to extract it in your computer and then upload its contents to your server. Upload the folder app/code and merge them.Open the terminal from the Magento 2 folder and run the command: Copyphp bin/magento setup:upgradeRemove the content of the folder pub/static and run the command: Copyphp bin/magento setup:static-content:deployNow run the command: Copyphp bin/magento indexer:reindexAnd the composer: Copycomposer require ebanx/ebanxSet the permissions that you use on your project to the new files. "
  },
  {
    "title": "Flush Magento Cache",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#undefined",
    "content": "If necessary, you have to flush the cache at System > Cache Management, by clicking on the button \"Flush Magento Cache\".   "
  },
  {
    "title": "Update the extension settings",
    "type": 1,
    "pageTitle": "Magento 2 extension#",
    "url": "docs/payments/integration-methods/plugins/magento2#undefined",
    "content": "You will see EBANX settings at System > Configuration > Sales > Payment Methods > EBANX. Enable the EBANX payment extension and add the integration key you were given by the EBANX integration team. You will need to use different keys in test and production modes. Change the other settings as needed. The EBANX extension configuration has three sections: EBANX, the general configurations of the extension; EBANX Express, the transparent checkout for credit cards configuration; and EBANX Standard, the default checkout configuration. Below you will find a detailed description of all availabe settings:  EBANX Standard -- Checkout settings  Setting Description Enabled Enables or disables the EBANX Standard extension. Title The title of the payment method, which will be shown on Magento&apos;s checkout page. Integration key They integration key. It&apos;ll be different for test and production environments. Test mode Enable or disable the test mode. Due date Due date for printable slips (boleto/boletas, etc). You must ask EBANX to change this limit for your account. Payment currency The currency to be used in the payment -- it can be either the currency shown to the customer or the one used in the backend of the store (base currency). Open order status The open order status. Standard option is &quot;Pending&quot;. Paid order status The paid order status. Standard option is &quot;Complete&quot;. Canceled order status The paid order status. Standard option is &quot;Canceled&quot;.  EBANX Express -- Transparent credit card checkout settings  Setting Description Enabled Enables or disables the EBANX Express extension. Title The title of the payment method, which will be shown on Magento&apos;s checkout page. Integration key They integration key. It&apos;ll be different for test and production environments. Test mode Enable or disable the test mode. Instalments number The number of instalments that are enabled. Enable instalments Enable or disable instalments. Your merchant account must be allowed to process credit card payments with instalments. Payment currency The currency to be used in the payment -- it can be either the currency shown to the customer or the one used in the backend of the store (base currency).  "
  },
  {
    "title": "PrestaShop Module#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/plugins/prestashop",
    "content": "",
    "keywords": "PrestaShop"
  },
  {
    "title": "1. Update your merchant settings",
    "type": 1,
    "pageTitle": "PrestaShop Module#",
    "url": "docs/payments/integration-methods/plugins/prestashop#1-update-your-merchant-settings",
    "content": "1.1 Access the Dashboard inserting your username and password.  "
  },
  {
    "title": "2. Install the extension",
    "type": 1,
    "pageTitle": "PrestaShop Module#",
    "url": "docs/payments/integration-methods/plugins/prestashop#2-install-the-extension",
    "content": "2.1 Click the link to download the EBANX Standard PrestaShop module or the [EBANX Express PrestaShop module](EBANX Express PrestaShop module). The EBANX Express can process local payment methods for Brazil through EBANX Direct but you need to have the SSL Certificate on your site to process credit cards. The EBANX Standard can process all the payment methods through EBANX Payment Page and you don’t need an SSL Certificate. Please note that using EBANX Standard does not allow to make payments with installment. Do you want to work with both? No problem! 2.2 In your Prestashop Admin panel, click on “Modules and Services” on your left menu. 2.3 Click on the button “Add a new module” and select the .zip with the EBANX module, then upload the file. 2.4 Now you will be able to see and search for the EBANX module on the modules list. 2.5 Find the EBANX module and click the Install button. If you have succeeded to install the module, you will be redirected to its settings page. 2.6 Now, in your Prestashop Admin panel, click on “Payment” under “Modules and Services” on your left menu. 2.7 At the end of the page on the “Country Restrictions”, select the countries that you have available for the EBANX modules.   "
  },
  {
    "title": "3. Update the extension settings",
    "type": 1,
    "pageTitle": "PrestaShop Module#",
    "url": "docs/payments/integration-methods/plugins/prestashop#3-update-the-extension-settings",
    "content": "3.1 Go to your store admin area. 3.2 Visit the EBANX PrestaShop module settings at Modules > Modules, find the EBANX module and click on Configure.  3.3 Add the integration key the EBANX integration team gave you. You will need to use different keys in test and production modes. 3.4 Change the other settings if needed. Below you will find a detailed description of all available parameters:  Parameter Description Integration key They integration key. It&#x2019;ll be different for test and production environments. Test mode Enable or disable the test mode. Enable boleto payments Enables the boleto payment method (Brazil). Enable TEF payments Enables the TEF (bank transfer) payment method (Brazil). Enable credit card payments Enables the credit cards payment method (Brazil). Installments Enable or disable installments. Your merchant account must be allowed to process payments with installments. Max installments The maximum number of installments. It must range from 1 to 12. Interest rate for each installments (%) The instalments interest rate for each instalment. We recommend you to use the values of your agreement.  "
  },
  {
    "title": "Shopify#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/plugins/shopify",
    "content": "",
    "keywords": "Shopify"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#about-this-guide",
    "content": "This guide will guide you through the process of setting up EBANX as a payment gateway on your Shopify store as well as covering some additional items such as Digital Marketing data and common troubleshooting scenarios. "
  },
  {
    "title": "Availability per Country",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#availability-per-country",
    "content": "The following table details which Checkout experience is available for each country we process in Shopify.  Country Gateway Checkout Type Brazil Checkout via EBANX Transparent Checkout * Mexico Checkout via EBANX Transparent Checkout * Colombia Checkout via EBANX Transparent Checkout * Peru Checkout via EBANX EBANX Payment Page Chile Checkout via EBANX EBANX Payment Page Argentina Checkout via EBANX EBANX Payment Page Ecuador Not Available Yet - Bolivia Not Available Yet -  info*Transparent Checkout will be enabled by installing an App in your store. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#how-it-works",
    "content": ""
  },
  {
    "title": "Digital marketing data",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#digital-marketing-data",
    "content": ""
  },
  {
    "title": "Troubleshooting",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#troubleshooting",
    "content": "Here are some common troubleshooting scenarios that might show up during your integration: INTERNAL SERVER ERROR is appearing when the user is redirected.# What may be causing this error: Your integration or Shopify keys are not correct. Double-check your keys in your EBANX dashboard;You are processing with a not allowed currency. We only accept USD, BRL and EUR, except for transparent checkout, where we don’t work with EUR yet;The country you are trying to process is not enabled in your merchant account; My transparent checkout is not working even after 10 minutes.# Double-check your app status by following these steps: Access your Shopify admin panel, then go to “Apps”;Click in the EBANX App (Sell in LATAM – EBANX Checkout);Re-enter your integration key;If you don’t see “EBANX Optimized Checkout is Installed on your store!”, send an email to integration@ebanx.com;If you do get the successful message, then double-check if your gateway is eligible for the transparent checkout. I can’t find the EBANX gateway in the “alternative payment methods” section.# Before looking for the gateway, please make sure that you clicked in the link shown in the installation process and that you have installed it. I can’t find my Shopify Key in EBANX Dashboard# Please send an email to our integration team – integration@ebanx.com "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com.Alternatively, you can check our FAQ at the end of this page for further questions. "
  },
  {
    "title": "Installation Process",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#installation-process",
    "content": "Follow the steps below to setup EBANX as your payment provider on Shopify: Go to the Payment Providers screenIn your Shopify administrative panel click on “Settings” then select “Payment providers”.Install Checkout via EBANXClick in this gateway called Checkout via EBANX to install. This gateway will automatically bring all payment methods available for your store based on your contract.Important to know: With this single gateway, all payment methods for all countries will be set automatically. You don’t need to install any other gateway. The single gateway “Checkout via EBANX” must be installed only once.Checkout via EBANX (for all countries) Configure Checkout via EBANX with your Integration keysBack to the “Payment providers” screen, you’re going to scroll down until you see the “Chose alternative payment method” button and click over it. In the page has loaded you’re going to search for the same getaway names that you’ve chose at step #2 and click over them.Next, you’ll need to get your Public Integration Key, as well as your EBANX Shopify Key, both available at the Integration section of your EBANX Dashboard. In case you don’t have access to the dashboard yet please fill out this form.infoImportant to know: To simplify the view we have placed only Visa and Mastercard brands, however, others brand will also be available.Set up Form OptionsClick on “Settings” again, then on “Checkout” to set your Form options as the image bellow. This process is mandatory in order to ensure that your checkout will work properly. Don’t forget to click on “Save” once you’re done with the configuration.Test your new integrationLastly, access your store and go through a regular purchase flow in order to confirm that the gateways that you’ve just installed are appearing as payment options. In the case they are not, please send an e-mail to integration@ebanx.com asking for support.Additional configuration for selling physical goods in BrazilSince January 2020, the Brazilian Tax Authorities require that all imported packages to document the Brazilian customer identification number (CPF or CNPJ). If you sell products that require shipping to Brazil, please follow this last step.CPF additional configurationIf your store has the Enable CPF/CNPJ field flag already checked, please remove it. Do not worries, CPF/CNPJ will be requested as normally at your checkout. To access this configuration please go to:Settings > Checkout > Order ProcessinginfoImportant to know: This additional step is mandatory for Brazil. In case your Shopify store does not have this option, you do not need to do anything else at this step. "
  },
  {
    "title": "Go to the Payment Providers screen",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "In your Shopify administrative panel click on “Settings” then select “Payment providers”. "
  },
  {
    "title": "Install Checkout via EBANX",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Click in this gateway called Checkout via EBANX to install. This gateway will automatically bring all payment methods available for your store based on your contract. Important to know: With this single gateway, all payment methods for all countries will be set automatically. You don’t need to install any other gateway. The single gateway “Checkout via EBANX” must be installed only once. Checkout via EBANX (for all countries)  "
  },
  {
    "title": "Configure Checkout via EBANX with your Integration keys",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Back to the “Payment providers” screen, you’re going to scroll down until you see the “Chose alternative payment method” button and click over it. In the page has loaded you’re going to search for the same getaway names that you’ve chose at step #2 and click over them. Next, you’ll need to get your Public Integration Key, as well as your EBANX Shopify Key, both available at the Integration section of your EBANX Dashboard. In case you don’t have access to the dashboard yet please fill out this form. infoImportant to know: To simplify the view we have placed only Visa and Mastercard brands, however, others brand will also be available. "
  },
  {
    "title": "Set up Form Options",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Click on “Settings” again, then on “Checkout” to set your Form options as the image bellow. This process is mandatory in order to ensure that your checkout will work properly. Don’t forget to click on “Save” once you’re done with the configuration.  "
  },
  {
    "title": "Test your new integration",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Lastly, access your store and go through a regular purchase flow in order to confirm that the gateways that you’ve just installed are appearing as payment options. In the case they are not, please send an e-mail to integration@ebanx.com asking for support. "
  },
  {
    "title": "Additional configuration for selling physical goods in Brazil",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Since January 2020, the Brazilian Tax Authorities require that all imported packages to document the Brazilian customer identification number (CPF or CNPJ). If you sell products that require shipping to Brazil, please follow this last step. CPF additional configuration If your store has the Enable CPF/CNPJ field flag already checked, please remove it. Do not worries, CPF/CNPJ will be requested as normally at your checkout. To access this configuration please go to: Settings > Checkout > Order Processing  infoImportant to know: This additional step is mandatory for Brazil. In case your Shopify store does not have this option, you do not need to do anything else at this step. "
  },
  {
    "title": "Transparent Checkout",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#transparent-checkout",
    "content": "DISCLAIMERYour transparent checkout will only work if you have the following gateway installed: Checkout via EBANX. Transparent checkout is a game-changer for merchants operating in Latin America using Shopify’s platform because it enables them to sell in the way that people in our region most like to do it: feeling safe. Therefore, with a seamless checkout solution you’ll be able to achieve higher payment conversion rates and less checkout abandonment rate. In order to have the transparent checkout working at your store, you must go through the following steps: Install Transparent CheckoutGo to our Sell in LATAM – EBANX Checkout installation page and click on “Install unlisted app”Set up your Integration KeyThen, get your Integration Key, at the Integration section of your EBANX Dashboard, place it at the respective field at Shopify and click over “Login”. In case you don’t have access to the dashboard, please go through the Installation Process section of this documentation.If you go back to the app’s interface you’re going to be asked for your key again, but that’s solely to verify the status of your app, if you have ever logged in with your integration key the installation process has already been completed.notePlease note that your transparent checkout might take up to ten minutes to start to work. "
  },
  {
    "title": "Install Transparent Checkout",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Go to our Sell in LATAM – EBANX Checkout installation page and click on “Install unlisted app” "
  },
  {
    "title": "Set up your Integration Key",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Then, get your Integration Key, at the Integration section of your EBANX Dashboard, place it at the respective field at Shopify and click over “Login”. In case you don’t have access to the dashboard, please go through the Installation Process section of this documentation. If you go back to the app’s interface you’re going to be asked for your key again, but that’s solely to verify the status of your app, if you have ever logged in with your integration key the installation process has already been completed. notePlease note that your transparent checkout might take up to ten minutes to start to work. "
  },
  {
    "title": "Facebook Ads Manager",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#facebook-ads-manager",
    "content": "noteThis walkthrough is only valid in case you’re selling to Brazil and using our transparent checkout through our app extension. If you do not attend to both these requirements please get in touch with integration@ebanx.com asking for support to set up your Facebook pixel. Else, if you sell to Brazil but haven’t installed the app yet please go through the Transparent Checkout section of this documentation. Set up your Pixel IDGo to your Shopify admin area and click on “Online Store”, then click on “Preferences”.At the Facebook Pixel section paste your pixel ID, then scroll down and click on “Save”.Request and setup the Additional ScriptSend an e-mail to integration@ebanx.com and ask for your Facebook pixel additional script.Once our team gets back to you, go back to your Shopify admin area, click on “Settings”, then click on “Checkout”, scroll down to the Order processing section and paste your code at the Additional script field. Then click on “Save”.Setup the Custom ConversionGo to your Facebook Ads Manager and Create a Custom Conversion for the “VoucherGenerate” event that our transparent checkout sends. This is going to be the conversion that will measure how many of your customers chose to pay by cash and generated a payment voucher.cautionAccording to Facebook, the metrics you’re going to be able to find with custom events are not reliable for campaign optimisation and look alike campaigns. EBANX does not take any responsibility for campaign investments or its outcomes.Then, go to your Campaigns dashboard and follow the steps to Customize Columns in Ads Manager to add your new custom conversion to your view. If you wish to have visibility on your cash payment’s actual conversion rates, you’re going to need to create and upload offline event data to your Facebook Ads Manager. You may also like to check Shopify’s instructions on how to Export orders to a CSV file and Facebook’s guide on How to Format Customer Lists. noteAs soon as Facebook makes their Server-Side API public the 7th step of this walkthrough won’t be necessary anymore and we’ll send your cash payment conversions straight to your Ads Manager.If you are not using our Transparent Checkout, you can just register your pixel in Shopify, then send an email to integration@ebanx.com with your Pixel ID. "
  },
  {
    "title": "Set up your Pixel ID",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Go to your Shopify admin area and click on “Online Store”, then click on “Preferences”. At the Facebook Pixel section paste your pixel ID, then scroll down and click on “Save”. "
  },
  {
    "title": "Request and setup the Additional Script",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Send an e-mail to integration@ebanx.com and ask for your Facebook pixel additional script. Once our team gets back to you, go back to your Shopify admin area, click on “Settings”, then click on “Checkout”, scroll down to the Order processing section and paste your code at the Additional script field. Then click on “Save”. "
  },
  {
    "title": "Setup the Custom Conversion",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Go to your Facebook Ads Manager and Create a Custom Conversion for the “VoucherGenerate” event that our transparent checkout sends. This is going to be the conversion that will measure how many of your customers chose to pay by cash and generated a payment voucher. cautionAccording to Facebook, the metrics you’re going to be able to find with custom events are not reliable for campaign optimisation and look alike campaigns. EBANX does not take any responsibility for campaign investments or its outcomes. Then, go to your Campaigns dashboard and follow the steps to Customize Columns in Ads Manager to add your new custom conversion to your view. "
  },
  {
    "title": "Google Analytics",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#google-analytics",
    "content": "Set up your UA-IDGo to your Shopify admin area and click on “Online Store”, then click on “Preferences”.At the Google Analytics section paste your UA-ID, then scroll down and click on “Save”.Set up your goals and funnelsGo to your Google Analytics account and Set up your goals and funnels to properly receive the “VoucherGenerate” event that we send at Shopify’s thank you page. This is going to be the conversion that will measure how many of your customers chose to pay by cash and generated a payment voucher.Track your events on Google AnalyticsWhen your cash payment gets paid and confirmed you’re going to receive an event named “PurchaseComplete” at your Google Analytics account. This is the event that is going to give you visibility on your cash payment’s actual conversion rates. If you need to know more About Events please check Google’s help center. "
  },
  {
    "title": "Set up your UA-ID",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Go to your Shopify admin area and click on “Online Store”, then click on “Preferences”. At the Google Analytics section paste your UA-ID, then scroll down and click on “Save”. "
  },
  {
    "title": "Set up your goals and funnels",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "Go to your Google Analytics account and Set up your goals and funnels to properly receive the “VoucherGenerate” event that we send at Shopify’s thank you page. This is going to be the conversion that will measure how many of your customers chose to pay by cash and generated a payment voucher. "
  },
  {
    "title": "Track your events on Google Analytics",
    "type": 1,
    "pageTitle": "Shopify#",
    "url": "docs/payments/integration-methods/plugins/shopify#undefined",
    "content": "When your cash payment gets paid and confirmed you’re going to receive an event named “PurchaseComplete” at your Google Analytics account. This is the event that is going to give you visibility on your cash payment’s actual conversion rates. If you need to know more About Events please check Google’s help center. "
  },
  {
    "title": "WooCommerce Plugin#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/plugins/woocommerce",
    "content": "",
    "keywords": "WooCommerce"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#about-this-guide",
    "content": "This guide will guide you through the steps to setup EBANX as a payment gateway on your WooCommerce store.  "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#how-it-works",
    "content": "noteBefore installing our plugin, you can test by yourself in our demonstration page. Access here and have the same experience as your customer. Important!If you are using our old plugin for Woocommerce, please uninstall it before using the new one.  Install the plugin There are two installation methods you can choose from: Via Browser # The easiest and quickest option to install the EBANX plugin for WooCommerce is an automatic installation that can be done without leaving your web browser. To do it, log in to the WordPress Dashboard and follow the steps: Open your admin page in WordPress. Go to Plugins &gt; Add new and search for &quot;EBANX Payment Gateway&quot;. Click on &quot;Install Now&quot; button. Wait and once the plugin is installed, tap on &quot;Activate&quot;. On this step, your plugin is already installed. You have to go to EBANX Settings placed on the sidebar to configure your checkout page. Doing this is time to fill out your information. You need to insert your Integration Keys found on your Dashboard Account, check the payment methods and the other options. See an example in the video below: Via Github # You can find our repository here. To view step-by-step installation via GitHub instructions&#xA0; click here . To install manually, download our plugin and upload it to your web server via an FTP application. Visit the&#xA0; WordPress codex &#xA0;for further instructions. Get your Integration Key from your Dashboard At the&#xA0; EBANX Dashboard , tap on your user name on the right corner, then Account Settings and Integration to find your Integration Keys. Look an example of the page you will find: Setup your Integration Key Go to your WooCommerce and click on EBANX Settings in sidebar admin menu. Add the integration key you&apos;ve found on the EBANX Dashboard. You will need to use different keys in test (sandbox) and production (live) modes. Our plugin already comes with set settings, but you can change them according to your necessity. Setting Description Sandbox Integration Key Unique test mode key, keep it safe and do not expose this information. Sandbox Public Integration Key General test mode key. You can do a token operation using this, key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this, you do not have to deal directly with the credit card information of your customer. Live Integration Key Once you have completed the process of integration with EBANX, you will receive a unique live mode key which will allow you to operate with our services; it is essential to keep all the information safe and not exposed. Live Public Integration Key&#xA0; General live mode key. Just like the Sandbox Public Integration Key, you can do a token operation using this key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this, you do not have to deal directly with the credit card information of your customer. EBANX Sandbox Mark or unmark the box to go into sandbox mode and live. EBANX Sandbox is a testing environment that mimics the live environment. Use it to make payments requirements to see how your eCommerce processes them. Debug Log Mark or unmark the box to choose to record all errors that occur when executing a transaction. Enable Payment Methods Enable the payment methods for your checkout and make sure that the payment methods chosen are included in your agreement. Check the list below for the payment methods available in each country: Country Payment methods Brazil Boleto EBANX, Domestic Credit Card and Bank Transfer (TEF) Mexico OXXO, Credit and Debit Cards and SPEI Argentina Cup&#xF3;n de Pago Colombia PSE (Pago Seguros en L&#xED;nea), Baloto and Credit Cards Chile ServiPag, Sencillito, WebPay, Multicaja Peru SafetyPay and PagoEfectivo Ecuador Cash and Bank transfer The following image show how it will appear in your administrative area: Payment Options # Credit Card # Save Card Data: Choose to allow your customer to save their credit and debit card data for future purchases.(TEF) One-click Payment: Choose to allow your customer to complete payments in one-click using credit cards saved. Enable Auto Capture: Automatically capture payments from your customers, just for the credit card. Otherwise, you will need to capture the payment going to WooCommerce -&gt; Orders. Not captured payments will be cancelled within four days. Maximum Number of Installments: Establish the maximum number of installments in which your customer can pay, as consented to your contract. Only Colombia supports more than 12. Minimum Installment (USD): Set the minimum installment value during checkout. The minimum EBANX allows for BRL is 5 and MXN is 100, lower values in these currencies will be ignored. Interest Rates: Enable and set a custom interest rate for your customers according to the number of Installments you allow the payment. Cash Payments # Days to Expiration: Define the maximum number of days on which your customer can complete the payment of Boleto, OXXO, Sencillito, PagoEfectivo, and SafetyPay. Additional Settings In the advanced options, you can select features that will help your client to have a better experience in their shops. Enable Checkout for # In order to process with the EBANX Plugin in Brazil there a few mandatory fields such as CPF identification for individuals and CNPJ for companies. Checkout Manager # If you make use of a Checkout Manager, please identify the HTML name attribute of the fields. Total Local Amount # Show your customer the total purchase amount in local currency at the checkout. Exchange Rate # Show your customer the currency exchange rate of the day. IOF on Local Amount # Apply IOF (Brazilian Tax on Financial Operations) when calculating the price in BRL on the checkout.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com.Alternatively, you can check our FAQ at the end of this page for further questions. "
  },
  {
    "title": "Install the plugin",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#undefined",
    "content": "There are two installation methods you can choose from: Via Browser# The easiest and quickest option to install the EBANX plugin for WooCommerce is an automatic installation that can be done without leaving your web browser. To do it, log in to the WordPress Dashboard and follow the steps: Open your admin page in WordPress. Go to Plugins > Add new and search for \"EBANX Payment Gateway\".Click on \"Install Now\" button.Wait and once the plugin is installed, tap on \"Activate\".On this step, your plugin is already installed. You have to go to EBANX Settings placed on the sidebar to configure your checkout page.Doing this is time to fill out your information. You need to insert your Integration Keys found on your Dashboard Account, check the payment methods and the other options. See an example in the video below:  Via Github# You can find our repository here. To view step-by-step installation via GitHub instructions click here. To install manually, download our plugin and upload it to your web server via an FTP application. Visit the WordPress codex for further instructions. "
  },
  {
    "title": "Get your Integration Key from your Dashboard",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#undefined",
    "content": "At the EBANX Dashboard, tap on your user name on the right corner, then Account Settings and Integration to find your Integration Keys. Look an example of the page you will find:  "
  },
  {
    "title": "Setup your Integration Key",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#undefined",
    "content": "Go to your WooCommerce and click on EBANX Settings in sidebar admin menu. Add the integration key you've found on the EBANX Dashboard. You will need to use different keys in test (sandbox) and production (live) modes.  Our plugin already comes with set settings, but you can change them according to your necessity.  Setting Description Sandbox Integration Key Unique test mode key, keep it safe and do not expose this information. Sandbox Public Integration Key General test mode key. You can do a token operation using this, key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this, you do not have to deal directly with the credit card information of your customer. Live Integration Key Once you have completed the process of integration with EBANX, you will receive a unique live mode key which will allow you to operate with our services; it is essential to keep all the information safe and not exposed. Live Public Integration Key&#xA0; General live mode key. Just like the Sandbox Public Integration Key, you can do a token operation using this key instead of the integration key when the request is from the client of your customer (browser, app, etc.). By doing this, you do not have to deal directly with the credit card information of your customer. EBANX Sandbox Mark or unmark the box to go into sandbox mode and live. EBANX Sandbox is a testing environment that mimics the live environment. Use it to make payments requirements to see how your eCommerce processes them. Debug Log Mark or unmark the box to choose to record all errors that occur when executing a transaction.  "
  },
  {
    "title": "Enable Payment Methods",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#undefined",
    "content": "Enable the payment methods for your checkout and make sure that the payment methods chosen are included in your agreement. Check the list below for the payment methods available in each country:  Country Payment methods Brazil Boleto EBANX, Domestic Credit Card and Bank Transfer (TEF) Mexico OXXO, Credit and Debit Cards and SPEI Argentina Cup&#xF3;n de Pago Colombia PSE (Pago Seguros en L&#xED;nea), Baloto and Credit Cards Chile ServiPag, Sencillito, WebPay, Multicaja Peru SafetyPay and PagoEfectivo Ecuador Cash and Bank transfer  The following image show how it will appear in your administrative area:  Payment Options# Credit Card# Save Card Data: Choose to allow your customer to save their credit and debit card data for future purchases.(TEF)One-click Payment: Choose to allow your customer to complete payments in one-click using credit cards saved.Enable Auto Capture: Automatically capture payments from your customers, just for the credit card. Otherwise, you will need to capture the payment going to WooCommerce -> Orders. Not captured payments will be cancelled within four days.Maximum Number of Installments: Establish the maximum number of installments in which your customer can pay, as consented to your contract. Only Colombia supports more than 12.Minimum Installment (USD): Set the minimum installment value during checkout. The minimum EBANX allows for BRL is 5 and MXN is 100, lower values in these currencies will be ignored.Interest Rates: Enable and set a custom interest rate for your customers according to the number of Installments you allow the payment. Cash Payments# Days to Expiration: Define the maximum number of days on which your customer can complete the payment of Boleto, OXXO, Sencillito, PagoEfectivo, and SafetyPay. "
  },
  {
    "title": "Additional Settings",
    "type": 1,
    "pageTitle": "WooCommerce Plugin#",
    "url": "docs/payments/integration-methods/plugins/woocommerce#undefined",
    "content": "In the advanced options, you can select features that will help your client to have a better experience in their shops. Enable Checkout for# In order to process with the EBANX Plugin in Brazil there a few mandatory fields such as CPF identification for individuals and CNPJ for companies. Checkout Manager# If you make use of a Checkout Manager, please identify the HTML name attribute of the fields. Total Local Amount# Show your customer the total purchase amount in local currency at the checkout. Exchange Rate# Show your customer the currency exchange rate of the day. IOF on Local Amount# Apply IOF (Brazilian Tax on Financial Operations) when calculating the price in BRL on the checkout. "
  },
  {
    "title": "Spreedly Integration#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/integration-methods/spreedly",
    "content": "",
    "keywords": "Spreedly"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#about-this-guide",
    "content": "This guide explains how you can use EBANX as a payment gateway of choice on Spreedly to process credit cards in Argentina, Brazil, Colombia, Chile, Mexico and Peru. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#how-it-works",
    "content": " "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Setting up the integration",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#setting-up-the-integration",
    "content": " Add EBANX as a payment gateway The first step is to call Spreedly&#x2019;s gateway endpoint to create a token for the EBANX gateway to be called afterwards. Endpoint: https://core.spreedly.com/v1/gateways.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST Basic parameters: # Parameter Description gateway_type This should be set as ebanx. integration_key Your unique and secret integration key. Examples of request and response: Copy { &quot;gateway&quot; : { &quot;gateway_type&quot; : &quot;ebanx&quot; , &quot;integration_key&quot; : &quot;your_ebanx_integration_key&gt;&quot; } } Copy { &quot;gateway&quot; : { &quot;token&quot; : &quot;52THAMCzd27iwRl9N1Onlp7xkYk&quot; , &quot;gateway_type&quot; : &quot;test&quot; , &quot;description&quot; : null , &quot;payment_methods&quot; : [ &quot;credit_card&quot; , &quot;sprel&quot; , &quot;third_party_token&quot; , &quot;bank_account&quot; , &quot;apple_pay&quot; , &quot;android_pay&quot; , &quot;google_pay&quot; , &quot;sepa_direct_debit&quot; ] , &quot;state&quot; : &quot;retained&quot; , &quot;created_at&quot; : &quot;2019-12-23T19:49:47Z&quot; , &quot;updated_at&quot; : &quot;2019-12-23T19:49:47Z&quot; , &quot;name&quot; : &quot;EBANX&quot; , &quot;characteristics&quot; : [ &quot;purchase&quot; , &quot;authorize&quot; , &quot;capture&quot; , &quot;credit&quot; , &quot;general_credit&quot; , &quot;void&quot; , &quot;adjust&quot; , &quot;verify&quot; , &quot;reference_purchase&quot; , &quot;purchase_via_preauthorization&quot; , &quot;offsite_purchase&quot; , &quot;offsite_authorize&quot; , &quot;3dsecure_purchase&quot; , &quot;3dsecure_authorize&quot; , &quot;store&quot; , &quot;remove&quot; , &quot;reference_authorization&quot; , &quot;3dsecure_2_purchase&quot; , &quot;3dsecure_2_authorize&quot; ] , &quot;credentials&quot; : [ ] , &quot;gateway_settings&quot; : { } , &quot;gateway_specific_fields&quot; : [ ] , &quot;redacted&quot; : false } } Create a payment method Next, collect the customer information and send it to Spreedly in order to create a payment method. This operation will generate a token that will be utilized in the future to charge the customer. Endpoint: https://core.spreedly.com/v1/payment_methods.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST This endpoint accepts the following parameters: Basic parameters: # Parameter Description payment_method.credit_card.first_name Customer&#x2019;s First Name payment_method.credit_card.last_name Customer&#x2019;s Last Name payment_method.credit_card.number Credit Card number payment_method.credit_card.verification_value Credit Card security code (CVV) payment_method.credit_card.month Credit Card expiration month payment_method.credit_card.year Credit Card expiration year payment_method.credit_card.address1 Customer address, first the street number and then street name. e.g.: 2323 Rua E payment_method.credit_card.address2 Address complement, e.g. Apartment 302 payment_method.credit_card.city Customer City payment_method.credit_card.state Customer State. For Brazil it must be the 2-letter code of the corresponding state payment_method.credit_card.zip Customer Zipcode payment_method.credit_card.country 2 letter country code. Accepted values are: br : Brazil , mx : Mexico , pe : Peru , co : Colombia , cl : Chile , ar : Argentina payment_method.credit_card.retain_on_success Boolean - Flag if the payment method must be retained. payment_method.email Customer email. payment_method.metadata Optional metadata  "
  },
  {
    "title": "Add EBANX as a payment gateway",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#undefined",
    "content": "The first step is to call Spreedly’s gateway endpoint to create a token for the EBANX gateway to be called afterwards. Endpoint: https://core.spreedly.com/v1/gateways.json Authorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/json Method: POST  Basic parameters:#  Parameter Description gateway_type This should be set as ebanx. integration_key Your unique and secret integration key.  Examples of request and response: Copy { \"gateway\": { \"gateway_type\": \"ebanx\", \"integration_key\": \"your_ebanx_integration_key>\" } }Copy{ \"gateway\": { \"token\": \"52THAMCzd27iwRl9N1Onlp7xkYk\", \"gateway_type\": \"test\", \"description\": null, \"payment_methods\": [ \"credit_card\", \"sprel\", \"third_party_token\", \"bank_account\", \"apple_pay\", \"android_pay\", \"google_pay\", \"sepa_direct_debit\" ], \"state\": \"retained\", \"created_at\": \"2019-12-23T19:49:47Z\", \"updated_at\": \"2019-12-23T19:49:47Z\", \"name\": \"EBANX\", \"characteristics\": [ \"purchase\", \"authorize\", \"capture\", \"credit\", \"general_credit\", \"void\", \"adjust\", \"verify\", \"reference_purchase\", \"purchase_via_preauthorization\", \"offsite_purchase\", \"offsite_authorize\", \"3dsecure_purchase\", \"3dsecure_authorize\", \"store\", \"remove\", \"reference_authorization\", \"3dsecure_2_purchase\", \"3dsecure_2_authorize\" ], \"credentials\": [], \"gateway_settings\": {}, \"gateway_specific_fields\": [], \"redacted\": false }} "
  },
  {
    "title": "Create a payment method",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#undefined",
    "content": "Next, collect the customer information and send it to Spreedly in order to create a payment method. This operation will generate a token that will be utilized in the future to charge the customer. Endpoint: https://core.spreedly.com/v1/payment_methods.json Authorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/json Method: POST  This endpoint accepts the following parameters: Basic parameters:#  Parameter Description payment_method.credit_card.first_name Customer&#x2019;s First Name payment_method.credit_card.last_name Customer&#x2019;s Last Name payment_method.credit_card.number Credit Card number payment_method.credit_card.verification_value Credit Card security code (CVV) payment_method.credit_card.month Credit Card expiration month payment_method.credit_card.year Credit Card expiration year payment_method.credit_card.address1 Customer address, first the street number and then street name. e.g.: 2323 Rua E payment_method.credit_card.address2 Address complement, e.g. Apartment 302 payment_method.credit_card.city Customer City payment_method.credit_card.state Customer State. For Brazil it must be the 2-letter code of the corresponding state payment_method.credit_card.zip Customer Zipcode payment_method.credit_card.country 2 letter country code. Accepted values are: br : Brazil , mx : Mexico , pe : Peru , co : Colombia , cl : Chile , ar : Argentina payment_method.credit_card.retain_on_success Boolean - Flag if the payment method must be retained. payment_method.email Customer email. payment_method.metadata Optional metadata  "
  },
  {
    "title": "Using the integration",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#using-the-integration",
    "content": "Now that you have the payment method created and the token in hands, you are able to send calls to EBANX API via Spreedly to charge the customer’s credit card (with or without pre-authorization) or refund a previous charge.  Charging a payment In order to charge a credit card, replace the gateway_token you generated on step 1 in the endpoint URL, and send the payment_method_token generated on step 2 inside the request token alongside the amount and currency_code . info If you plan to reutilize a payment method for future charges, always set the retain_on_success flag as true. In order to charge installments, you need to send the parameter instalments inside the transaction.gateway_specific_fields.ebanx node. In case the parameter is not sent, EBANX API will default the value to 1. On some countries you might need to send the parameter document inside the transaction.gateway_specific.fields.ebanx node. Refer to the table below for field requirements across EBANX supported countries: EBANX Mandatory Fields Endpoint: https://core.spreedly.com/v1/gateways/ &lt; gateway_token &gt;/purchase.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST This endpoint accepts the following parameters: Basic parameters: # Parameter Description transaction.payment_method_token Spreedly payment method token transaction.amount Amount to be charged. No decimals utilized, i.e. to charge 0.5 send the amount as 50 transaction.currency_code 3 letter currency code. Accepted values are: USD: US Dollars, BRL: Brazilian Reais, MXN: Mexican Pesos, PEN: Peruvian Soles, COP: Colombian Pesos, CLP: Chilean Pesos, ARS: Argentinian Pesos transaction.retain_on_success Flag if the payment method must be retained. transaction.gateway_specific_fields.ebanx.document Customer document, required in Argentina, Brazil, Colombia and Chile transaction.gateway_specific_fields.ebanx.instalments Number of installments, accepted values are: Brazil: 1 &#x2013; 12, Mexico: 1,3,6,9,12 , Peru: 1 &#x2013; 48, Colombia: 1 &#x2013; 36, Chile: 1 &#x2013; 48, Argentina: 1,2,3,6,9,12 Examples of request and response: Copy { &quot;transaction&quot; : { &quot;payment_method_token&quot; : &quot;FqqnAg5zkZ28L16Ip5hgW0UPMvL&quot; , &quot;amount&quot; : 50 , &quot;currency_code&quot; : &quot;BRL&quot; , &quot;retain_on_success&quot; : &quot;true&quot; , &quot;gateway_specific_fields&quot; : { &quot;ebanx&quot; : { &quot;document&quot; : &quot;05912050023&quot; , &quot;instalments&quot; : 6 } } } Copy { &quot;transaction&quot; : { &quot;on_test_gateway&quot; : false , &quot;created_at&quot; : &quot;2019-12-26T13:33:23Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:33:25Z&quot; , &quot;succeeded&quot; : true , &quot;state&quot; : &quot;succeeded&quot; , &quot;token&quot; : &quot;S4nGYs7R1Eg1ecXxsdasd2231vSa54LS7QpnOv&quot; , &quot;transaction_type&quot; : &quot;Purchase&quot; , &quot;order_id&quot; : null , &quot;ip&quot; : null , &quot;description&quot; : null , &quot;email&quot; : null , &quot;merchant_name_descriptor&quot; : null , &quot;merchant_location_descriptor&quot; : null , &quot;gateway_specific_fields&quot; : { &quot;ebanx&quot; : { &quot;document&quot; : &quot;05912050023&quot; , &quot;instalments&quot; : 6 } } , &quot;gateway_specific_response_fields&quot; : { } , &quot;gateway_transaction_id&quot; : &quot;5e04b6a4f58cbf41221e718fbe34edf01011c12d5c666b8bf1e131&quot; , &quot;gateway_latency_ms&quot; : 2045 , &quot;warning&quot; : null , &quot;amount&quot; : 50 , &quot;currency_code&quot; : &quot;BRL&quot; , &quot;retain_on_success&quot; : false , &quot;payment_method_added&quot; : false , &quot;dynamically_routed&quot; : false , &quot;message_key&quot; : &quot;messages.transaction_succeeded&quot; , &quot;message&quot; : &quot;Succeeded!&quot; , &quot;gateway_token&quot; : &quot;6UBEDxgdqxj2oi5rMN6ojUvOGYhmV5pL&quot; , &quot;gateway_type&quot; : &quot;ebanx&quot; , &quot;response&quot; : { &quot;success&quot; : true , &quot;message&quot; : &quot;Accepted&quot; , &quot;avs_code&quot; : null , &quot;avs_message&quot; : null , &quot;cvv_code&quot; : null , &quot;cvv_message&quot; : null , &quot;pending&quot; : false , &quot;result_unknown&quot; : false , &quot;error_code&quot; : &quot;OK&quot; , &quot;error_detail&quot; : null , &quot;cancelled&quot; : false , &quot;fraud_review&quot; : null , &quot;created_at&quot; : &quot;2019-12-26T13:33:25Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:33:25Z&quot; } , &quot;shipping_address&quot; : { &quot;name&quot; : &quot;Andre Peixoto&quot; , &quot;address1&quot; : null , &quot;address2&quot; : null , &quot;city&quot; : null , &quot;state&quot; : null , &quot;zip&quot; : null , &quot;country&quot; : null , &quot;phone_number&quot; : null } , &quot;api_urls&quot; : [ { &quot;referencing_transaction&quot; : [ ] } ] , &quot;attempt_3dsecure&quot; : false , &quot;payment_method&quot; : { &quot;token&quot; : &quot;FqqnAg5zkZ28L16Ip5hgW0UPMvL&quot; , &quot;created_at&quot; : &quot;2019-12-26T13:33:07Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:33:07Z&quot; , &quot;email&quot; : &quot;username@domain.com&quot; , &quot;data&quot; : null , &quot;storage_state&quot; : &quot;cached&quot; , &quot;test&quot; : false , &quot;metadata&quot; : { &quot;key&quot; : &quot;H2jhkn328903n&quot; , &quot;another_key&quot; : 123 , &quot;final_key&quot; : true } , &quot;callback_url&quot; : null , &quot;last_four_digits&quot; : &quot;6571&quot; , &quot;first_six_digits&quot; : &quot;523284&quot; , &quot;card_type&quot; : &quot;master&quot; , &quot;first_name&quot; : &quot;firstName&quot; , &quot;last_name&quot; : &quot;lastName&quot; , &quot;month&quot; : 3 , &quot;year&quot; : 2026 , &quot;address1&quot; : &quot;2323 Rua E&quot; , &quot;address2&quot; : &quot;ap 508&quot; , &quot;city&quot; : &quot;Curitiba&quot; , &quot;state&quot; : &quot;PR&quot; , &quot;zip&quot; : &quot;82590100&quot; , &quot;country&quot; : &quot;br&quot; , &quot;phone_number&quot; : null , &quot;company&quot; : null , &quot;full_name&quot; : &quot;firstName lastName&quot; , &quot;eligible_for_card_updater&quot; : true , &quot;shipping_address1&quot; : null , &quot;shipping_address2&quot; : null , &quot;shipping_city&quot; : null , &quot;shipping_state&quot; : null , &quot;shipping_zip&quot; : null , &quot;shipping_country&quot; : null , &quot;shipping_phone_number&quot; : null , &quot;payment_method_type&quot; : &quot;credit_card&quot; , &quot;errors&quot; : [ ] , &quot;fingerprint&quot; : &quot;32f7843658f578df1f702c14d524def4f594&quot; , &quot;verification_value&quot; : &quot;XXX&quot; , &quot;number&quot; : &quot;XXXX-XXXX-XXXX-1111&quot; } } } Pre-authorizing a payment The request structure is the same as if you were charging a payment token, however it is sent to a different endpoint. After pre-authorizing the payment you need to either capture or void the payment. If you don&#x2019;t, the pending authorization will be automatically cancelled after 4 days. Find the details below: Endpoint: https://core.spreedly.com/v1/gateways/ &lt; gateway_token &gt;/authorize.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST info Pre-authorization is not supported in Colombia. Examples of request and response: Copy { &quot;transaction&quot; : { &quot;payment_method_token&quot; : &quot;KvDbD9YT6KadLFXroDTKCz7PNuL&quot; , &quot;amount&quot; : 200 , &quot;currency_code&quot; : &quot;BRL&quot; , &quot;retain_on_success&quot; : &quot;true&quot; , &quot;gateway_specific_fields&quot; : { &quot;ebanx&quot; : { &quot;document&quot; : &quot;05912050023&quot; , &quot;instalments&quot; : 6 } } } } Copy { &quot;transaction&quot; : { &quot;on_test_gateway&quot; : false , &quot;created_at&quot; : &quot;2019-12-23T17:57:55Z&quot; , &quot;updated_at&quot; : &quot;2019-12-23T17:57:57Z&quot; , &quot;succeeded&quot; : true , &quot;state&quot; : &quot;succeeded&quot; , &quot;token&quot; : &quot;JK7QJjyAOITvjHnhwAg9at5JD28&quot; , &quot;transaction_type&quot; : &quot;Authorization&quot; , &quot;order_id&quot; : null , &quot;ip&quot; : null , &quot;description&quot; : null , &quot;email&quot; : null , &quot;merchant_name_descriptor&quot; : null , &quot;merchant_location_descriptor&quot; : null , &quot;gateway_specific_fields&quot; : { &quot;ebanx&quot; : { &quot;document&quot; : &quot;05912058905&quot; , &quot;instalments&quot; : 1 } } , &quot;gateway_specific_response_fields&quot; : { } , &quot;gateway_transaction_id&quot; : &quot;5e0100243571c1ad2a80862c809c6008b1abc2d01fa5e129&quot; , &quot;gateway_latency_ms&quot; : 2072 , &quot;warning&quot; : null , &quot;amount&quot; : 200 , &quot;currency_code&quot; : &quot;BRL&quot; , &quot;retain_on_success&quot; : false , &quot;payment_method_added&quot; : false , &quot;dynamically_routed&quot; : false , &quot;message_key&quot; : &quot;messages.transaction_succeeded&quot; , &quot;message&quot; : &quot;Succeeded!&quot; , &quot;gateway_token&quot; : &quot;6UBEDxgdq5rMN41f6ojUvOGYhmV5pL&quot; , &quot;gateway_type&quot; : &quot;ebanx&quot; , &quot;response&quot; : { &quot;success&quot; : true , &quot;message&quot; : &quot;Accepted&quot; , &quot;avs_code&quot; : null , &quot;avs_message&quot; : null , &quot;cvv_code&quot; : null , &quot;cvv_message&quot; : null , &quot;pending&quot; : false , &quot;result_unknown&quot; : false , &quot;error_code&quot; : &quot;OK&quot; , &quot;error_detail&quot; : null , &quot;cancelled&quot; : false , &quot;fraud_review&quot; : null , &quot;created_at&quot; : &quot;2019-12-23T17:57:57Z&quot; , &quot;updated_at&quot; : &quot;2019-12-23T17:57:57Z&quot; } , &quot;shipping_address&quot; : { &quot;name&quot; : &quot;firstName lastName&quot; , &quot;address1&quot; : null , &quot;address2&quot; : null , &quot;city&quot; : null , &quot;state&quot; : null , &quot;zip&quot; : null , &quot;country&quot; : null , &quot;phone_number&quot; : null } , &quot;api_urls&quot; : [ { &quot;referencing_transaction&quot; : [ ] } ] , &quot;attempt_3dsecure&quot; : false , &quot;payment_method&quot; : { &quot;token&quot; : &quot;KvDbD9YT6KadLFXroDTKCz7PNuL&quot; , &quot;created_at&quot; : &quot;2019-12-23T17:57:48Z&quot; , &quot;updated_at&quot; : &quot;2019-12-23T17:57:48Z&quot; , &quot;email&quot; : &quot;username@domain.com&quot; , &quot;data&quot; : null , &quot;storage_state&quot; : &quot;cached&quot; , &quot;test&quot; : false , &quot;metadata&quot; : { &quot;key&quot; : &quot;H2jhkn328903n&quot; , &quot;another_key&quot; : 123 , &quot;final_key&quot; : true } , &quot;callback_url&quot; : null , &quot;last_four_digits&quot; : &quot;1111&quot; , &quot;first_six_digits&quot; : &quot;411111&quot; , &quot;card_type&quot; : &quot;visa&quot; , &quot;first_name&quot; : &quot;firstName&quot; , &quot;last_name&quot; : &quot;lastName&quot; , &quot;month&quot; : 3 , &quot;year&quot; : 2026 , &quot;address1&quot; : &quot;2323 Rua E&quot; , &quot;address2&quot; : &quot;2332&quot; , &quot;city&quot; : &quot;Curitiba&quot; , &quot;state&quot; : &quot;PR&quot; , &quot;zip&quot; : &quot;82590100&quot; , &quot;country&quot; : &quot;br&quot; , &quot;phone_number&quot; : null , &quot;company&quot; : null , &quot;full_name&quot; : &quot;firstName lastName&quot; , &quot;eligible_for_card_updater&quot; : true , &quot;shipping_address1&quot; : null , &quot;shipping_address2&quot; : null , &quot;shipping_city&quot; : null , &quot;shipping_state&quot; : null , &quot;shipping_zip&quot; : null , &quot;shipping_country&quot; : null , &quot;shipping_phone_number&quot; : null , &quot;payment_method_type&quot; : &quot;credit_card&quot; , &quot;errors&quot; : [ ] , &quot;fingerprint&quot; : &quot;32f7843658f578df1f702c14d524def4f594&quot; , &quot;verification_value&quot; : &quot;XXX&quot; , &quot;number&quot; : &quot;XXXX-XXXX-XXXX-1111&quot; } } } i) Capture a pre-authorized payment To capture a payment that has been previously pre-authorized, send the transaction_token from the payment on the endpoint URL below: Endpoint: https://core.spreedly.com/v1/transactions/ &lt; transaction_token&gt;/capture.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST Example of response: Copy { &quot;transaction&quot; : { &quot;on_test_gateway&quot; : false , &quot;created_at&quot; : &quot;2019-12-23T17:58:07Z&quot; , &quot;updated_at&quot; : &quot;2019-12-23T17:58:08Z&quot; , &quot;succeeded&quot; : true , &quot;state&quot; : &quot;succeeded&quot; , &quot;token&quot; : &quot;ZOCdZppB4KVomu1U2pohjqFXe2R&quot; , &quot;transaction_type&quot; : &quot;Capture&quot; , &quot;order_id&quot; : null , &quot;ip&quot; : null , &quot;description&quot; : null , &quot;email&quot; : null , &quot;merchant_name_descriptor&quot; : null , &quot;merchant_location_descriptor&quot; : null , &quot;gateway_specific_fields&quot; : null , &quot;gateway_specific_response_fields&quot; : { } , &quot;gateway_transaction_id&quot; : &quot;5e0100243571c1ad2a80862c809c6008b1abc2d01fa5e129&quot; , &quot;gateway_latency_ms&quot; : 1019 , &quot;warning&quot; : null , &quot;amount&quot; : 100 , &quot;currency_code&quot; : &quot;BRL&quot; , &quot;message_key&quot; : &quot;messages.transaction_succeeded&quot; , &quot;message&quot; : &quot;Succeeded!&quot; , &quot;gateway_token&quot; : &quot;6UBEDxgdq5rMN6ojUvOGYhmV5pL&quot; , &quot;gateway_type&quot; : &quot;ebanx&quot; , &quot;response&quot; : { &quot;success&quot; : true , &quot;message&quot; : &quot;Accepted&quot; , &quot;avs_code&quot; : null , &quot;avs_message&quot; : null , &quot;cvv_code&quot; : null , &quot;cvv_message&quot; : null , &quot;pending&quot; : false , &quot;result_unknown&quot; : false , &quot;error_code&quot; : &quot;OK&quot; , &quot;error_detail&quot; : null , &quot;cancelled&quot; : false , &quot;fraud_review&quot; : null , &quot;created_at&quot; : &quot;2019-12-23T17:58:08Z&quot; , &quot;updated_at&quot; : &quot;2019-12-23T17:58:08Z&quot; } , &quot;shipping_address&quot; : { &quot;name&quot; : null , &quot;address1&quot; : null , &quot;address2&quot; : null , &quot;city&quot; : null , &quot;state&quot; : null , &quot;zip&quot; : null , &quot;country&quot; : null , &quot;phone_number&quot; : null } , &quot;api_urls&quot; : [ { &quot;referencing_transaction&quot; : [ ] } ] , &quot;reference_token&quot; : &quot;JK7QJjyAOITvjHnhwAg9at5JD28&quot; } } Cancel a pre-authorized payment To cancel a payment that has been previously pre-authorized, send the transaction_token from the payment on the endpoint URL below: Endpoint: https://core.spreedly.com/v1/transactions/ &lt; transaction_token &gt;/void.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST Example of response: Copy { &quot;transaction&quot; : { &quot;on_test_gateway&quot; : false , &quot;created_at&quot; : &quot;2019-12-26T13:58:49Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:58:50Z&quot; , &quot;succeeded&quot; : true , &quot;state&quot; : &quot;succeeded&quot; , &quot;token&quot; : &quot;YZwhbdMuXhm1fjHUmxYBIOhQz44&quot; , &quot;transaction_type&quot; : &quot;Void&quot; , &quot;order_id&quot; : null , &quot;ip&quot; : null , &quot;description&quot; : null , &quot;email&quot; : null , &quot;merchant_name_descriptor&quot; : null , &quot;merchant_location_descriptor&quot; : null , &quot;gateway_specific_fields&quot; : { } , &quot;gateway_specific_response_fields&quot; : { } , &quot;gateway_transaction_id&quot; : &quot;5e04bc5c222315003614d0562497fef31abaf95742eaeb60&quot; , &quot;gateway_latency_ms&quot; : 939 , &quot;warning&quot; : null , &quot;message_key&quot; : &quot;messages.transaction_succeeded&quot; , &quot;message&quot; : &quot;Succeeded!&quot; , &quot;gateway_token&quot; : &quot;6UBEDxgdq5rMN6ojUvOGYhmV5pL&quot; , &quot;gateway_type&quot; : &quot;ebanx&quot; , &quot;response&quot; : { &quot;success&quot; : true , &quot;message&quot; : &quot;Accepted&quot; , &quot;avs_code&quot; : null , &quot;avs_message&quot; : null , &quot;cvv_code&quot; : null , &quot;cvv_message&quot; : null , &quot;pending&quot; : false , &quot;result_unknown&quot; : false , &quot;error_code&quot; : &quot;OK&quot; , &quot;error_detail&quot; : null , &quot;cancelled&quot; : false , &quot;fraud_review&quot; : null , &quot;created_at&quot; : &quot;2019-12-26T13:58:50Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:58:50Z&quot; } , &quot;shipping_address&quot; : { &quot;name&quot; : null , &quot;address1&quot; : null , &quot;address2&quot; : null , &quot;city&quot; : null , &quot;state&quot; : null , &quot;zip&quot; : null , &quot;country&quot; : null , &quot;phone_number&quot; : null } , &quot;reference_token&quot; : &quot;4D3vekKe4rzPC7MFpDAayVRKMUn&quot; } } Refunding a payment In order to refund a previous charge, send the transaction_token on the URL below and the description inside the node gateway_specific_fields.ebanx Endpoint: https://core.spreedly.com/v1/transactions/ &lt; transaction_token &gt;/credit.json Authorization: Basic environment_key : access_secret_key Header: Content-Type: application/json Method: POST info You can do partial refunds by sending the amount parameter. If you don&apos;t send it, a full refund will be issued. Copy { &quot;gateway_specific_fields&quot; : { &quot;ebanx&quot; : { &quot;description&quot; : &quot;refund test&quot; } } } Copy { &quot;transaction&quot; : { &quot;on_test_gateway&quot; : false , &quot;created_at&quot; : &quot;2019-12-26T13:35:04Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:35:04Z&quot; , &quot;succeeded&quot; : true , &quot;state&quot; : &quot;succeeded&quot; , &quot;token&quot; : &quot;FlNg020qlFkVy6Ztj5q1YZwadEF&quot; , &quot;transaction_type&quot; : &quot;Credit&quot; , &quot;order_id&quot; : null , &quot;ip&quot; : null , &quot;description&quot; : null , &quot;email&quot; : null , &quot;merchant_name_descriptor&quot; : null , &quot;merchant_location_descriptor&quot; : null , &quot;gateway_specific_fields&quot; : { &quot;ebanx&quot; : { &quot;description&quot; : &quot;refund test&quot; } } , &quot;gateway_specific_response_fields&quot; : { } , &quot;gateway_transaction_id&quot; : &quot;5e04b6a4f58cbf718fbe34edf01011c12d5c666b8bf1e131&quot; , &quot;gateway_latency_ms&quot; : 248 , &quot;warning&quot; : null , &quot;amount&quot; : 50 , &quot;currency_code&quot; : &quot;BRL&quot; , &quot;message_key&quot; : &quot;messages.transaction_succeeded&quot; , &quot;message&quot; : &quot;Succeeded!&quot; , &quot;gateway_token&quot; : &quot;6UBEDxgdq5rMN6ojUvOGYhmV5pL&quot; , &quot;gateway_type&quot; : &quot;ebanx&quot; , &quot;response&quot; : { &quot;success&quot; : true , &quot;message&quot; : &quot;Accepted&quot; , &quot;avs_code&quot; : null , &quot;avs_message&quot; : null , &quot;cvv_code&quot; : null , &quot;cvv_message&quot; : null , &quot;pending&quot; : false , &quot;result_unknown&quot; : false , &quot;error_code&quot; : &quot;OK&quot; , &quot;error_detail&quot; : null , &quot;cancelled&quot; : false , &quot;fraud_review&quot; : null , &quot;created_at&quot; : &quot;2019-12-26T13:35:04Z&quot; , &quot;updated_at&quot; : &quot;2019-12-26T13:35:04Z&quot; } , &quot;shipping_address&quot; : { &quot;name&quot; : null , &quot;address1&quot; : null , &quot;address2&quot; : null , &quot;city&quot; : null , &quot;state&quot; : null , &quot;zip&quot; : null , &quot;country&quot; : null , &quot;phone_number&quot; : null } , &quot;api_urls&quot; : [ ] , &quot;reference_token&quot; : &quot;S4nGYs7R1Eg1ecvSa54LS7QpnOv&quot; } }  "
  },
  {
    "title": "Charging a payment",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#undefined",
    "content": "In order to charge a credit card, replace the gateway_token you generated on step 1 in the endpoint URL, and send the payment_method_token generated on step 2 inside the request token alongside the amount and currency_code. infoIf you plan to reutilize a payment method for future charges, always set the retain_on_success flag as true. In order to charge installments, you need to send the parameter instalments inside the transaction.gateway_specific_fields.ebanx node. In case the parameter is not sent, EBANX API will default the value to 1. On some countries you might need to send the parameter document inside the transaction.gateway_specific.fields.ebanx node. Refer to the table below for field requirements across EBANX supported countries:  EBANX Mandatory Fields Endpoint: https://core.spreedly.com/v1/gateways/< gateway_token >/purchase.jsonAuthorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/jsonMethod: POST This endpoint accepts the following parameters: Basic parameters:#  Parameter Description transaction.payment_method_token Spreedly payment method token transaction.amount Amount to be charged. No decimals utilized, i.e. to charge 0.5 send the amount as 50 transaction.currency_code 3 letter currency code. Accepted values are: USD: US Dollars, BRL: Brazilian Reais, MXN: Mexican Pesos, PEN: Peruvian Soles, COP: Colombian Pesos, CLP: Chilean Pesos, ARS: Argentinian Pesos transaction.retain_on_success Flag if the payment method must be retained. transaction.gateway_specific_fields.ebanx.document Customer document, required in Argentina, Brazil, Colombia and Chile transaction.gateway_specific_fields.ebanx.instalments Number of installments, accepted values are: Brazil: 1 &#x2013; 12, Mexico: 1,3,6,9,12 , Peru: 1 &#x2013; 48, Colombia: 1 &#x2013; 36, Chile: 1 &#x2013; 48, Argentina: 1,2,3,6,9,12  Examples of request and response: Copy{ \"transaction\": { \"payment_method_token\": \"FqqnAg5zkZ28L16Ip5hgW0UPMvL\", \"amount\": 50, \"currency_code\": \"BRL\", \"retain_on_success\": \"true\", \"gateway_specific_fields\": { \"ebanx\":{ \"document\":\"05912050023\", \"instalments\": 6 } }}Copy{ \"transaction\": { \"on_test_gateway\": false, \"created_at\": \"2019-12-26T13:33:23Z\", \"updated_at\": \"2019-12-26T13:33:25Z\", \"succeeded\": true, \"state\": \"succeeded\", \"token\": \"S4nGYs7R1Eg1ecXxsdasd2231vSa54LS7QpnOv\", \"transaction_type\": \"Purchase\", \"order_id\": null, \"ip\": null, \"description\": null, \"email\": null, \"merchant_name_descriptor\": null, \"merchant_location_descriptor\": null, \"gateway_specific_fields\": { \"ebanx\": { \"document\": \"05912050023\", \"instalments\": 6 } }, \"gateway_specific_response_fields\": {}, \"gateway_transaction_id\": \"5e04b6a4f58cbf41221e718fbe34edf01011c12d5c666b8bf1e131\", \"gateway_latency_ms\": 2045, \"warning\": null, \"amount\": 50, \"currency_code\": \"BRL\", \"retain_on_success\": false, \"payment_method_added\": false, \"dynamically_routed\": false, \"message_key\": \"messages.transaction_succeeded\", \"message\": \"Succeeded!\", \"gateway_token\": \"6UBEDxgdqxj2oi5rMN6ojUvOGYhmV5pL\", \"gateway_type\": \"ebanx\", \"response\": { \"success\": true, \"message\": \"Accepted\", \"avs_code\": null, \"avs_message\": null, \"cvv_code\": null, \"cvv_message\": null, \"pending\": false, \"result_unknown\": false, \"error_code\": \"OK\", \"error_detail\": null, \"cancelled\": false, \"fraud_review\": null, \"created_at\": \"2019-12-26T13:33:25Z\", \"updated_at\": \"2019-12-26T13:33:25Z\" }, \"shipping_address\": { \"name\": \"Andre Peixoto\", \"address1\": null, \"address2\": null, \"city\": null, \"state\": null, \"zip\": null, \"country\": null, \"phone_number\": null }, \"api_urls\": [ { \"referencing_transaction\": [] } ], \"attempt_3dsecure\": false, \"payment_method\": { \"token\": \"FqqnAg5zkZ28L16Ip5hgW0UPMvL\", \"created_at\": \"2019-12-26T13:33:07Z\", \"updated_at\": \"2019-12-26T13:33:07Z\", \"email\": \"username@domain.com\", \"data\": null, \"storage_state\": \"cached\", \"test\": false, \"metadata\": { \"key\": \"H2jhkn328903n\", \"another_key\": 123, \"final_key\": true }, \"callback_url\": null, \"last_four_digits\": \"6571\", \"first_six_digits\": \"523284\", \"card_type\": \"master\", \"first_name\": \"firstName\", \"last_name\": \"lastName\", \"month\": 3, \"year\": 2026, \"address1\": \"2323 Rua E\", \"address2\": \"ap 508\", \"city\": \"Curitiba\", \"state\": \"PR\", \"zip\": \"82590100\", \"country\": \"br\", \"phone_number\": null, \"company\": null, \"full_name\": \"firstName lastName\", \"eligible_for_card_updater\": true, \"shipping_address1\": null, \"shipping_address2\": null, \"shipping_city\": null, \"shipping_state\": null, \"shipping_zip\": null, \"shipping_country\": null, \"shipping_phone_number\": null, \"payment_method_type\": \"credit_card\", \"errors\": [], \"fingerprint\": \"32f7843658f578df1f702c14d524def4f594\", \"verification_value\": \"XXX\", \"number\": \"XXXX-XXXX-XXXX-1111\" } }} "
  },
  {
    "title": "Pre-authorizing a payment",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#undefined",
    "content": "The request structure is the same as if you were charging a payment token, however it is sent to a different endpoint. After pre-authorizing the payment you need to either capture or void the payment. If you don’t, the pending authorization will be automatically cancelled after 4 days. Find the details below: Endpoint: https://core.spreedly.com/v1/gateways/< gateway_token >/authorize.jsonAuthorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/jsonMethod: POST infoPre-authorization is not supported in Colombia. Examples of request and response: Copy{ \"transaction\": { \"payment_method_token\": \"KvDbD9YT6KadLFXroDTKCz7PNuL\", \"amount\": 200, \"currency_code\": \"BRL\", \"retain_on_success\": \"true\", \"gateway_specific_fields\": { \"ebanx\":{ \"document\":\"05912050023\", \"instalments\": 6 } } } }Copy{ \"transaction\": { \"on_test_gateway\": false, \"created_at\": \"2019-12-23T17:57:55Z\", \"updated_at\": \"2019-12-23T17:57:57Z\", \"succeeded\": true, \"state\": \"succeeded\", \"token\": \"JK7QJjyAOITvjHnhwAg9at5JD28\", \"transaction_type\": \"Authorization\", \"order_id\": null, \"ip\": null, \"description\": null, \"email\": null, \"merchant_name_descriptor\": null, \"merchant_location_descriptor\": null, \"gateway_specific_fields\": { \"ebanx\": { \"document\": \"05912058905\", \"instalments\": 1 } }, \"gateway_specific_response_fields\": {}, \"gateway_transaction_id\": \"5e0100243571c1ad2a80862c809c6008b1abc2d01fa5e129\", \"gateway_latency_ms\": 2072, \"warning\": null, \"amount\": 200, \"currency_code\": \"BRL\", \"retain_on_success\": false, \"payment_method_added\": false, \"dynamically_routed\": false, \"message_key\": \"messages.transaction_succeeded\", \"message\": \"Succeeded!\", \"gateway_token\": \"6UBEDxgdq5rMN41f6ojUvOGYhmV5pL\", \"gateway_type\": \"ebanx\", \"response\": { \"success\": true, \"message\": \"Accepted\", \"avs_code\": null, \"avs_message\": null, \"cvv_code\": null, \"cvv_message\": null, \"pending\": false, \"result_unknown\": false, \"error_code\": \"OK\", \"error_detail\": null, \"cancelled\": false, \"fraud_review\": null, \"created_at\": \"2019-12-23T17:57:57Z\", \"updated_at\": \"2019-12-23T17:57:57Z\" }, \"shipping_address\": { \"name\": \"firstName lastName\", \"address1\": null, \"address2\": null, \"city\": null, \"state\": null, \"zip\": null, \"country\": null, \"phone_number\": null }, \"api_urls\": [ { \"referencing_transaction\": [] } ], \"attempt_3dsecure\": false, \"payment_method\": { \"token\": \"KvDbD9YT6KadLFXroDTKCz7PNuL\", \"created_at\": \"2019-12-23T17:57:48Z\", \"updated_at\": \"2019-12-23T17:57:48Z\", \"email\": \"username@domain.com\", \"data\": null, \"storage_state\": \"cached\", \"test\": false, \"metadata\": { \"key\": \"H2jhkn328903n\", \"another_key\": 123, \"final_key\": true }, \"callback_url\": null, \"last_four_digits\": \"1111\", \"first_six_digits\": \"411111\", \"card_type\": \"visa\", \"first_name\": \"firstName\", \"last_name\": \"lastName\", \"month\": 3, \"year\": 2026, \"address1\": \"2323 Rua E\", \"address2\": \"2332\", \"city\": \"Curitiba\", \"state\": \"PR\", \"zip\": \"82590100\", \"country\": \"br\", \"phone_number\": null, \"company\": null, \"full_name\": \"firstName lastName\", \"eligible_for_card_updater\": true, \"shipping_address1\": null, \"shipping_address2\": null, \"shipping_city\": null, \"shipping_state\": null, \"shipping_zip\": null, \"shipping_country\": null, \"shipping_phone_number\": null, \"payment_method_type\": \"credit_card\", \"errors\": [], \"fingerprint\": \"32f7843658f578df1f702c14d524def4f594\", \"verification_value\": \"XXX\", \"number\": \"XXXX-XXXX-XXXX-1111\" } }} i) Capture a pre-authorized payment To capture a payment that has been previously pre-authorized, send the transaction_token from the payment on the endpoint URL below: Endpoint: https://core.spreedly.com/v1/transactions/< transaction_token>/capture.jsonAuthorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/jsonMethod: POST Example of response: Copy{ \"transaction\": { \"on_test_gateway\": false, \"created_at\": \"2019-12-23T17:58:07Z\", \"updated_at\": \"2019-12-23T17:58:08Z\", \"succeeded\": true, \"state\": \"succeeded\", \"token\": \"ZOCdZppB4KVomu1U2pohjqFXe2R\", \"transaction_type\": \"Capture\", \"order_id\": null, \"ip\": null, \"description\": null, \"email\": null, \"merchant_name_descriptor\": null, \"merchant_location_descriptor\": null, \"gateway_specific_fields\": null, \"gateway_specific_response_fields\": {}, \"gateway_transaction_id\": \"5e0100243571c1ad2a80862c809c6008b1abc2d01fa5e129\", \"gateway_latency_ms\": 1019, \"warning\": null, \"amount\": 100, \"currency_code\": \"BRL\", \"message_key\": \"messages.transaction_succeeded\", \"message\": \"Succeeded!\", \"gateway_token\": \"6UBEDxgdq5rMN6ojUvOGYhmV5pL\", \"gateway_type\": \"ebanx\", \"response\": { \"success\": true, \"message\": \"Accepted\", \"avs_code\": null, \"avs_message\": null, \"cvv_code\": null, \"cvv_message\": null, \"pending\": false, \"result_unknown\": false, \"error_code\": \"OK\", \"error_detail\": null, \"cancelled\": false, \"fraud_review\": null, \"created_at\": \"2019-12-23T17:58:08Z\", \"updated_at\": \"2019-12-23T17:58:08Z\" }, \"shipping_address\": { \"name\": null, \"address1\": null, \"address2\": null, \"city\": null, \"state\": null, \"zip\": null, \"country\": null, \"phone_number\": null }, \"api_urls\": [ { \"referencing_transaction\": [] } ], \"reference_token\": \"JK7QJjyAOITvjHnhwAg9at5JD28\" }} "
  },
  {
    "title": "Cancel a pre-authorized payment",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#undefined",
    "content": "To cancel a payment that has been previously pre-authorized, send the transaction_token from the payment on the endpoint URL below: Endpoint: https://core.spreedly.com/v1/transactions/< transaction_token >/void.json Authorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/json Method: POST  Example of response: Copy{ \"transaction\": { \"on_test_gateway\": false, \"created_at\": \"2019-12-26T13:58:49Z\", \"updated_at\": \"2019-12-26T13:58:50Z\", \"succeeded\": true, \"state\": \"succeeded\", \"token\": \"YZwhbdMuXhm1fjHUmxYBIOhQz44\", \"transaction_type\": \"Void\", \"order_id\": null, \"ip\": null, \"description\": null, \"email\": null, \"merchant_name_descriptor\": null, \"merchant_location_descriptor\": null, \"gateway_specific_fields\": {}, \"gateway_specific_response_fields\": {}, \"gateway_transaction_id\": \"5e04bc5c222315003614d0562497fef31abaf95742eaeb60\", \"gateway_latency_ms\": 939, \"warning\": null, \"message_key\": \"messages.transaction_succeeded\", \"message\": \"Succeeded!\", \"gateway_token\": \"6UBEDxgdq5rMN6ojUvOGYhmV5pL\", \"gateway_type\": \"ebanx\", \"response\": { \"success\": true, \"message\": \"Accepted\", \"avs_code\": null, \"avs_message\": null, \"cvv_code\": null, \"cvv_message\": null, \"pending\": false, \"result_unknown\": false, \"error_code\": \"OK\", \"error_detail\": null, \"cancelled\": false, \"fraud_review\": null, \"created_at\": \"2019-12-26T13:58:50Z\", \"updated_at\": \"2019-12-26T13:58:50Z\" }, \"shipping_address\": { \"name\": null, \"address1\": null, \"address2\": null, \"city\": null, \"state\": null, \"zip\": null, \"country\": null, \"phone_number\": null }, \"reference_token\": \"4D3vekKe4rzPC7MFpDAayVRKMUn\" }} "
  },
  {
    "title": "Refunding a payment",
    "type": 1,
    "pageTitle": "Spreedly Integration#",
    "url": "docs/payments/integration-methods/spreedly#undefined",
    "content": "In order to refund a previous charge, send the transaction_token on the URL below and the description inside the node gateway_specific_fields.ebanx Endpoint: https://core.spreedly.com/v1/transactions/< transaction_token >/credit.json Authorization: Basic environment_key:access_secret_keyHeader: Content-Type: application/json Method: POST  infoYou can do partial refunds by sending the amount parameter. If you don't send it, a full refund will be issued. Copy{ \"gateway_specific_fields\": { \"ebanx\": { \"description\": \"refund test\" }}}Copy{ \"transaction\": { \"on_test_gateway\": false, \"created_at\": \"2019-12-26T13:35:04Z\", \"updated_at\": \"2019-12-26T13:35:04Z\", \"succeeded\": true, \"state\": \"succeeded\", \"token\": \"FlNg020qlFkVy6Ztj5q1YZwadEF\", \"transaction_type\": \"Credit\", \"order_id\": null, \"ip\": null, \"description\": null, \"email\": null, \"merchant_name_descriptor\": null, \"merchant_location_descriptor\": null, \"gateway_specific_fields\": { \"ebanx\": { \"description\": \"refund test\" } }, \"gateway_specific_response_fields\": {}, \"gateway_transaction_id\": \"5e04b6a4f58cbf718fbe34edf01011c12d5c666b8bf1e131\", \"gateway_latency_ms\": 248, \"warning\": null, \"amount\": 50, \"currency_code\": \"BRL\", \"message_key\": \"messages.transaction_succeeded\", \"message\": \"Succeeded!\", \"gateway_token\": \"6UBEDxgdq5rMN6ojUvOGYhmV5pL\", \"gateway_type\": \"ebanx\", \"response\": { \"success\": true, \"message\": \"Accepted\", \"avs_code\": null, \"avs_message\": null, \"cvv_code\": null, \"cvv_message\": null, \"pending\": false, \"result_unknown\": false, \"error_code\": \"OK\", \"error_detail\": null, \"cancelled\": false, \"fraud_review\": null, \"created_at\": \"2019-12-26T13:35:04Z\", \"updated_at\": \"2019-12-26T13:35:04Z\" }, \"shipping_address\": { \"name\": null, \"address1\": null, \"address2\": null, \"city\": null, \"state\": null, \"zip\": null, \"country\": null, \"phone_number\": null }, \"api_urls\": [], \"reference_token\": \"S4nGYs7R1Eg1ecvSa54LS7QpnOv\" }} "
  },
  {
    "title": "Online Payments Overview#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payments/overview",
    "content": "",
    "keywords": "Online Payments"
  },
  {
    "title": "About us",
    "type": 1,
    "pageTitle": "Online Payments Overview#",
    "url": "docs/payments/overview#about-us",
    "content": "Since our founding in 2012, our aim is to make the world an explorable place for Latin Americans, and Latin America a possible region for international companies to enter. By offering local payment methods in 8 different countries across LatAm we are conquering these objectives day after day and already helped over 1000 merchants expand their business into the region and over 50 million Latin Americans to access global services and products. "
  },
  {
    "title": "Go Global. Think Local.",
    "type": 1,
    "pageTitle": "Online Payments Overview#",
    "url": "docs/payments/overview#go-global-think-local",
    "content": "Both our DNA and location in LatAm afford us a geographic advantage when it comes to keeping up with the newest trends, preferences, and technologies in the region. Although we understand the importance of local knowledge, as a global business we also embrace and operate in a multicultural world and strive to understand and serve every possible merchant who wants to sell to Latin America. "
  },
  {
    "title": "What we offer",
    "type": 1,
    "pageTitle": "Online Payments Overview#",
    "url": "docs/payments/overview#what-we-offer",
    "content": "EBANX offers a fully localized payments solution that connects you with more than 100 local payment methods in 8 different countries around Latin America. Our robust platform works in an unstoppable pace to guarantee the maximum availability to your business and a high-level of approved transactions. Direct Connection: DIRECT connection with more than 50 banks & processors.High availability: 99.997% of availability to your business.Acquirer redundancy: Our proprietary algorithm switches transactions dynamically to ensure the highest success rates.Unified Transactions: Unified reconciliation for all countries. Unified transfer of funds for all currencies. "
  },
  {
    "title": "Flexible and convenient integrations",
    "type": 1,
    "pageTitle": "Online Payments Overview#",
    "url": "docs/payments/overview#flexible-and-convenient-integrations",
    "content": "It is essential that payment solutions are properly integrated with your website. With this in mind, EBANX provides different types of integration, that is into all business models, from individuals and SMBs to large enterprises. "
  },
  {
    "title": "Cancel a Payout#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/cancelPayout",
    "content": "",
    "keywords": "Cancel a Payout"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Cancel a Payout#",
    "url": "docs/payout/cancelPayout#about-this-guide",
    "content": "This guide quickly demonstrates how to cancel an open payout in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Cancel a Payout#",
    "url": "docs/payout/cancelPayout#how-it-works",
    "content": "To Cancel a payout through EBANX Direct API, please follow the steps below. Make sure that the payout status is equal to OP You can only cancel a payout if its status is equal to (OP) open. You can check the status of your payout using the end-point /ws/payout/retrieve. You can learn more about this end-point in this quick guide.Cancel the payment using the /ws/payout/cancel end-pointTo cancel a Payout, you will use the /ws/payout/cancel endpoint.There are two options you can use to cancel a Payout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), or the unique identifier provided by the Merchant (external_reference).Here are a couple of examples using each parameter:uidexternal_referenceCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/cancel' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=0f28f5b2bf60536d78b2dbf003c13886dd452d926'And a successful cancellation will return a JSON Object with type \"success\" and a message saying \"You've successfully cancelled your Payout!\".Copy{ \"type\": \"success\", \"message\": \"You've successfully cancelled your Payout!\"} "
  },
  {
    "title": "Canceling a Payout via Dashboard",
    "type": 1,
    "pageTitle": "Cancel a Payout#",
    "url": "docs/payout/cancelPayout#canceling-a-payout-via-dashboard",
    "content": "You can cancel a Payout, up to 6 hours after being submitted, through your Dashboard in the Payouts section of the Payout tab. Select the specific payout you want to cancel and click on Cancel Payout. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Cancel a Payout#",
    "url": "docs/payout/cancelPayout#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Make sure that the payout status is equal to OP ",
    "type": 1,
    "pageTitle": "Cancel a Payout#",
    "url": "docs/payout/cancelPayout#undefined",
    "content": "You can only cancel a payout if its status is equal to (OP) open. You can check the status of your payout using the end-point /ws/payout/retrieve. You can learn more about this end-point in this quick guide. "
  },
  {
    "title": "Cancel the payment using the /ws/payout/cancel end-point",
    "type": 1,
    "pageTitle": "Cancel a Payout#",
    "url": "docs/payout/cancelPayout#undefined",
    "content": "To cancel a Payout, you will use the /ws/payout/cancel endpoint. There are two options you can use to cancel a Payout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), or the unique identifier provided by the Merchant (external_reference). Here are a couple of examples using each parameter: uidexternal_referenceCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/cancel' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=0f28f5b2bf60536d78b2dbf003c13886dd452d926' And a successful cancellation will return a JSON Object with type \"success\" and a message saying \"You've successfully cancelled your Payout!\". Copy{ \"type\": \"success\", \"message\": \"You've successfully cancelled your Payout!\"} "
  },
  {
    "title": "Cancel a Transfer#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/cancelTransfer",
    "content": "Cancel a Transfer#To cancel a Transfer, you will use the /ws/transfer/cancel endpoint.There are 4 options you can use to consult single a Transferyout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), the unique identifier provided by the Merchant (external_reference), the transfer code from the Wire Transfer method (transfer_code) or the Settlement Code from Payment Balance method (settlement_code).Here are a few of examples using each parameter:uidexternal_referencetransfer_codesettlement_codeCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/transfer/cancel' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=11ce3097af9ccf601b11038767962d3feded348ed'And a successful cancellation will return a JSON Object with type \"success\" and a message saying \"You've successfully cancelled your Payout!\".Copy{ \"type\": \"success\", \"message\": \"You've successfully cancelled your Transfer!\"}",
    "keywords": "Cancel a Transfer"
  },
  {
    "title": "Consult Balance#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/consultBalance",
    "content": "",
    "keywords": "Consult Balance"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Consult Balance#",
    "url": "docs/payout/consultBalance#about-this-guide",
    "content": "This guide quickly demonstrates how to consult your balance available for payouts in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Consult Balance#",
    "url": "docs/payout/consultBalance#how-it-works",
    "content": "Consult a payout using the /ws/transfer/balance end-pointTo consult your available balance, you will use the /ws/transfer/balance endpoint.Your integration key is the only required parameter.Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/balance' \\ -d 'integration_key=your_test_integration_key'And a successful call will return a JSON Object with type \"success\" and your available balance.Copy{ \"type\": \"success\", \"balance\": 150} "
  },
  {
    "title": "Consulting Balance via Dashboard",
    "type": 1,
    "pageTitle": "Consult Balance#",
    "url": "docs/payout/consultBalance#consulting-balance-via-dashboard",
    "content": "You can also consult your available balance through your Dashboard in the Overview section of the Payout tab. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Consult Balance#",
    "url": "docs/payout/consultBalance#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Consult a payout using the /ws/transfer/balance end-point",
    "type": 1,
    "pageTitle": "Consult Balance#",
    "url": "docs/payout/consultBalance#undefined",
    "content": "To consult your available balance, you will use the /ws/transfer/balance endpoint. Your integration key is the only required parameter. Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/balance' \\ -d 'integration_key=your_test_integration_key' And a successful call will return a JSON Object with type \"success\" and your available balance. Copy{ \"type\": \"success\", \"balance\": 150} "
  },
  {
    "title": "Consult a Payout#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/consultPayout",
    "content": "",
    "keywords": "Consult a Payout"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#about-this-guide",
    "content": "This guide quickly demonstrates how to consult a payout in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#how-it-works",
    "content": "You have the option of consulting a single payout or multiple. Check the steps below for more details. "
  },
  {
    "title": "Consulting a Payout via Dashboard",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#consulting-a-payout-via-dashboard",
    "content": "You can also consult your payouts through your Dashboard in the Payouts section of the Payout tab. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Consulting a Single Payout",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#consulting-a-single-payout",
    "content": "Consult a payout using the /ws/payout/retrieve end-pointTo consult a single Payout, you will use the /ws/payout/retrieve endpoint. There are two options you can use to consult single a Payout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), or the unique identifier provided by the Merchant (external_reference).Here are a couple of examples using each parameter:uidexternal_referenceCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/retrieve' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=0f28f5b2bf60536d78b2dbf003c13886dd452d926'And a successful retrieve will return a JSON Object with type \"success\" and a payout object with all the details of the Payout you are consulting.Copy{ \"type\": \"success\", \"payout\": { \"uid\": \"0f28f5b2bf60536d78b2dbf003c13886dd452d926\", \"external_reference\": \"PAYOUT_EBANX_01\", \"status\": \"PA\", \"request_date\": \"2017-02-07 17:01:59\", \"status_date\": \"2017-02-07 17:03:15\", \"paid_date\": \"2017-02-07 17:03:15\", \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"08271284959\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"ebanx_wallet\" }} "
  },
  {
    "title": "Consult a payout using the /ws/payout/retrieve end-point",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#undefined",
    "content": "To consult a single Payout, you will use the /ws/payout/retrieve endpoint.  There are two options you can use to consult single a Payout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), or the unique identifier provided by the Merchant (external_reference). Here are a couple of examples using each parameter: uidexternal_referenceCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/retrieve' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=0f28f5b2bf60536d78b2dbf003c13886dd452d926' And a successful retrieve will return a JSON Object with type \"success\" and a payout object with all the details of the Payout you are consulting. Copy{ \"type\": \"success\", \"payout\": { \"uid\": \"0f28f5b2bf60536d78b2dbf003c13886dd452d926\", \"external_reference\": \"PAYOUT_EBANX_01\", \"status\": \"PA\", \"request_date\": \"2017-02-07 17:01:59\", \"status_date\": \"2017-02-07 17:03:15\", \"paid_date\": \"2017-02-07 17:03:15\", \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"08271284959\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"ebanx_wallet\" }} "
  },
  {
    "title": "Consulting Multiple Payouts",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#consulting-multiple-payouts",
    "content": "Consult multiple payouts using the /ws/payout/search end-pointYou can also consult multiple Payouts by using the /ws/payout/search endpoint.Searching for multiple Payouts will require a date range for the search. You can filter your search by the status of the Payout. You can also control how many Payouts you want per page (up to 50 records), and which page the API should return.Here are a few examples:Setting the Date RangeFiltering by StatusSetting Page PreferencesCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/search' \\ -d 'integration_key=your_test_integration_key' \\ -d 'date_from=2017-02-07' \\ -d 'date_to=2017-02-08'Setting the Date RangeFiltering by StatusSetting Page PreferencesCopy{ \"type\": \"success\", \"records\": \"5\", \"total_pages\": 1, \"per_page\": 50, \"page\": 1, \"payouts\": [ { \"uid\": \"0f28f5b2bf60536d78b2dbf003c13886dd452d926\", \"external_reference\": \"PAYOUT_EBANX_01\", \"status\": \"PA\", \"request_date\": \"2017-02-07 17:01:59\", \"status_date\": \"2017-02-07 17:03:15\", \"paid_date\": \"2017-02-07 17:03:15\", \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"ebanx_wallet\" }, { \"uid\": \"07af7cd0fd2f64a4953cc707bf09811ddf83ec090\", \"external_reference\": \"PAYOUT_EBANX_02\", \"status\": \"PE\", \"request_date\": \"2017-02-07 17:11:43\", \"status_date\": \"2017-02-07 17:12:46\", \"paid_date\": null, \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"bank_account\" }, { \"uid\": \"0bf887fdadeef424a857c2bff69b94db0fb77f071\", \"external_reference\": \"PAYOUT_EBANX_03\", \"status\": \"PE\", \"request_date\": \"2017-02-07 19:45:38\", \"status_date\": \"2017-02-07 19:46:38\", \"paid_date\": null, \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": { \"bank_name\": \"341 Itaú\", \"bank_branch\": \"3707\", \"bank_account\": \"01854-9\", \"account_type\": \"C\", \"bank_details\": null } }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"bank_account\" }, { \"uid\": \"0e495f7a4409c032d54376084b10b9c771e9b39f0\", \"external_reference\": \"PAYOUT_EBANX_04\", \"status\": \"PE\", \"request_date\": \"2017-02-07 20:00:15\", \"status_date\": \"2017-02-07 20:01:15\", \"paid_date\": null, \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": { \"bank_name\": \"104 Caixa Econômica\", \"bank_branch\": \"3708\", \"bank_account\": \"08251777-6\", \"account_type\": \"C\", \"bank_details\": \"001\" } }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"bank_account\" }, { \"uid\": \"088d8930148d84205a82efddb53f9a6c003a122c1\", \"external_reference\": \"PAYOUT_EBANX_05\", \"status\": \"PA\", \"request_date\": \"2017-02-07 20:31:44\", \"status_date\": \"2017-02-07 20:32:52\", \"paid_date\": \"2017-02-07 20:32:52\", \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": null, \"document_type\": null, \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.30\", \"debit_amount_total\": \"10.30\", \"debit_currency\": \"USD\", \"target\": \"ebanx_wallet\" } ]} "
  },
  {
    "title": "Consult multiple payouts using the /ws/payout/search end-point",
    "type": 1,
    "pageTitle": "Consult a Payout#",
    "url": "docs/payout/consultPayout#undefined",
    "content": "You can also consult multiple Payouts by using the /ws/payout/search endpoint. Searching for multiple Payouts will require a date range for the search. You can filter your search by the status of the Payout. You can also control how many Payouts you want per page (up to 50 records), and which page the API should return. Here are a few examples: Setting the Date RangeFiltering by StatusSetting Page PreferencesCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/search' \\ -d 'integration_key=your_test_integration_key' \\ -d 'date_from=2017-02-07' \\ -d 'date_to=2017-02-08' Setting the Date RangeFiltering by StatusSetting Page PreferencesCopy{ \"type\": \"success\", \"records\": \"5\", \"total_pages\": 1, \"per_page\": 50, \"page\": 1, \"payouts\": [ { \"uid\": \"0f28f5b2bf60536d78b2dbf003c13886dd452d926\", \"external_reference\": \"PAYOUT_EBANX_01\", \"status\": \"PA\", \"request_date\": \"2017-02-07 17:01:59\", \"status_date\": \"2017-02-07 17:03:15\", \"paid_date\": \"2017-02-07 17:03:15\", \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"ebanx_wallet\" }, { \"uid\": \"07af7cd0fd2f64a4953cc707bf09811ddf83ec090\", \"external_reference\": \"PAYOUT_EBANX_02\", \"status\": \"PE\", \"request_date\": \"2017-02-07 17:11:43\", \"status_date\": \"2017-02-07 17:12:46\", \"paid_date\": null, \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"bank_account\" }, { \"uid\": \"0bf887fdadeef424a857c2bff69b94db0fb77f071\", \"external_reference\": \"PAYOUT_EBANX_03\", \"status\": \"PE\", \"request_date\": \"2017-02-07 19:45:38\", \"status_date\": \"2017-02-07 19:46:38\", \"paid_date\": null, \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": { \"bank_name\": \"341 Itaú\", \"bank_branch\": \"3707\", \"bank_account\": \"01854-9\", \"account_type\": \"C\", \"bank_details\": null } }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"bank_account\" }, { \"uid\": \"0e495f7a4409c032d54376084b10b9c771e9b39f0\", \"external_reference\": \"PAYOUT_EBANX_04\", \"status\": \"PE\", \"request_date\": \"2017-02-07 20:00:15\", \"status_date\": \"2017-02-07 20:01:15\", \"paid_date\": null, \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": \"85351346893\", \"document_type\": \"CPF\", \"birthdate\": \"1977-05-25\", \"bank_info\": { \"bank_name\": \"104 Caixa Econômica\", \"bank_branch\": \"3708\", \"bank_account\": \"08251777-6\", \"account_type\": \"C\", \"bank_details\": \"001\" } }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.15\", \"debit_amount_total\": \"10.15\", \"debit_currency\": \"USD\", \"target\": \"bank_account\" }, { \"uid\": \"088d8930148d84205a82efddb53f9a6c003a122c1\", \"external_reference\": \"PAYOUT_EBANX_05\", \"status\": \"PA\", \"request_date\": \"2017-02-07 20:31:44\", \"status_date\": \"2017-02-07 20:32:52\", \"paid_date\": \"2017-02-07 20:32:52\", \"cancel_date\": null, \"payee\": { \"name\": \"Han Solo\", \"email\": \"chew@bac.ca\", \"phone\": \" 554112345678\", \"document\": null, \"document_type\": null, \"birthdate\": \"1977-05-25\", \"bank_info\": null }, \"request_amount\": \"10.00\", \"request_currency\": \"USD\", \"request_exchange_rate\": \"1.0000\", \"debit_amount\": \"10.00\", \"debit_fee\": \"0.30\", \"debit_amount_total\": \"10.30\", \"debit_currency\": \"USD\", \"target\": \"ebanx_wallet\" } ]} "
  },
  {
    "title": "Consult a Transfer#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/consultTransfer",
    "content": "",
    "keywords": "Consult a Transfer"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#about-this-guide",
    "content": "This guide quickly demonstrates how to consult your transfers in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#how-it-works",
    "content": ""
  },
  {
    "title": "Consult a Transfer via Dashboard",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#consult-a-transfer-via-dashboard",
    "content": "You can also consult your transfers through your Dashboard in the Transfers section of the Payout tab. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Consulting a Single Transfer",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#consulting-a-single-transfer",
    "content": "Consult a payout using the /ws/transfer/retrieve end-pointTo consult a single Transfer, you will use the /ws/transfer/retrieve endpoint. There are 4 options you can use to consult single a PaTransferyout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), the unique identifier provided by the Merchant (external_reference), the transfer code from the Wire Transfer method (transfer_code) or the Settlement Code from Payment Balance method (settlement_code).Here are a few of examples using each parameter:uidexternal_referencetransfer_codesettlement_codeCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/transfer/retrieve' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=11ce3097af9ccf601b11038767962d3feded348ed'And a successful retrieve will return a JSON Object with type \"success\" and a transfer object with all the details of the Transfer you are consulting.Copy{ \"type\": \"success\", \"transfer\": { \"uid\": \"11ce3097af9ccf601b11038123962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_02\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"150.00\", \"settlement_code\": \"14-2001\", \"source\": \"payment_balance\" }} "
  },
  {
    "title": "Consult a payout using the /ws/transfer/retrieve end-point",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#undefined",
    "content": "To consult a single Transfer, you will use the /ws/transfer/retrieve endpoint.  There are 4 options you can use to consult single a PaTransferyout, the EBANX unique identifier (uid), which is generated during the creation of the payout (see Create a Payout), the unique identifier provided by the Merchant (external_reference), the transfer code from the Wire Transfer method (transfer_code) or the Settlement Code from Payment Balance method (settlement_code). Here are a few of examples using each parameter: uidexternal_referencetransfer_codesettlement_codeCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/transfer/retrieve' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=11ce3097af9ccf601b11038767962d3feded348ed' And a successful retrieve will return a JSON Object with type \"success\" and a transfer object with all the details of the Transfer you are consulting. Copy{ \"type\": \"success\", \"transfer\": { \"uid\": \"11ce3097af9ccf601b11038123962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_02\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"150.00\", \"settlement_code\": \"14-2001\", \"source\": \"payment_balance\" }} "
  },
  {
    "title": "Consulting Multiple Transfers",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#consulting-multiple-transfers",
    "content": "Consult multiple payouts using the /ws/transfer/search end-pointYou can also consult multiple Transfers by using the /ws/transfer/search endpoint.Searching for multiple transfers will require a date range for the search. You can filter your search by the status of the Transfers. You can also control how many Payouts you want per page (up to 50 records), and which page the API should return.Here are a few examples:Setting the Date RangeFiltering by StatusSetting Page PreferencesCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/transfer/search' \\ -d 'integration_key=your_test_integration_key' \\ -d 'date_from=2017-02-07' \\ -d 'date_to=2017-02-08'Setting the Date RangeFiltering by StatusSetting Page PreferencesCopy{ \"type\": \"success\", \"records\": \"2\", \"total_pages\": 1, \"per_page\": 50, \"page\": 1, \"transfers\": [ { \"uid\": \"11ce3097af9ccf601b11038767962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_01\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"100.00\", \"transfer_code\": \"14-2000\", \"source\": \"wire_transfer\" }, { \"uid\": \"11ce3097af9ccf601b11038123962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_02\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"150.00\", \"settlement_code\": null, \"source\": \"payment_balance\" } ]} "
  },
  {
    "title": "Consult multiple payouts using the /ws/transfer/search end-point",
    "type": 1,
    "pageTitle": "Consult a Transfer#",
    "url": "docs/payout/consultTransfer#undefined",
    "content": "You can also consult multiple Transfers by using the /ws/transfer/search endpoint. Searching for multiple transfers will require a date range for the search. You can filter your search by the status of the Transfers. You can also control how many Payouts you want per page (up to 50 records), and which page the API should return. Here are a few examples: Setting the Date RangeFiltering by StatusSetting Page PreferencesCopycurl -X POST 'https://sandbox.ebanxpay.com/ws/transfer/search' \\ -d 'integration_key=your_test_integration_key' \\ -d 'date_from=2017-02-07' \\ -d 'date_to=2017-02-08' Setting the Date RangeFiltering by StatusSetting Page PreferencesCopy{ \"type\": \"success\", \"records\": \"2\", \"total_pages\": 1, \"per_page\": 50, \"page\": 1, \"transfers\": [ { \"uid\": \"11ce3097af9ccf601b11038767962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_01\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"100.00\", \"transfer_code\": \"14-2000\", \"source\": \"wire_transfer\" }, { \"uid\": \"11ce3097af9ccf601b11038123962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_02\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"150.00\", \"settlement_code\": null, \"source\": \"payment_balance\" } ]} "
  },
  {
    "title": "Create a Payee#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/createPayee",
    "content": "",
    "keywords": "Create a Payee"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Create a Payee#",
    "url": "docs/payout/createPayee#about-this-guide",
    "content": "This guide quickly demonstrates how to create a payee in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Create a Payee#",
    "url": "docs/payout/createPayee#how-it-works",
    "content": "To create a payee through EBANX Direct API, please follow the steps below.  Make sure you have all the mandatory fields in your request There are a few key parameters you need to provide to create a payee. Check the table below for more details. Field Description integration_key Your unique and secret integration key. name The payee&apos;s name email The payee&apos;s email birth_date The payee&apos;s date of birth document The payee&apos;s document ID number document_type The payee&apos;s document ID type bank_name The payee&apos;s account bank name bank_branch The payee&apos;s account bank branch bank_account The payee&apos;s account number account_type The payee&apos;s account type bank_details The payee&apos;s account bank details country The payee&apos;s country state The payee&apos;s state city The payee&apos;s city zipcode The payee&apos;s zipcode address The payee&apos;s address terms_accepted_at Date when Payout terms were accepted. For payees with CNPJ, you must provide the shareholders details. This is an array, so, you can specify as many shareholders as necessary. The shareholder object contains the following mandatory fields: Field Description name The shareholder&apos;s name email The shareholder&apos;s email birthdate The shareholder&apos;s date of birth document The shareholder&apos;s document ID number state The shareholder&apos;s state city The shareholder&apos;s city zipcode The shareholder&apos;s zipcode address The shareholder&apos;s address ownership_percent Percentage of the payout belonging to the shareholder. Send your payee request to EBANX To create a new Payout, you will use the /ws/payee/create endpoint. The following example is a payee create request to the payee&apos;s bank account sending bank data with bank details: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/payee/create&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;name=Polenta&apos; \\ -d &apos;email=polenta@ebanx.com&apos; \\ -d &apos;phone=+554112345678&apos; \\ -d &apos;document=074.828.369-52&apos; \\ -d &apos;document_type=cpf&apos; \\ -d &apos;birth_date=1977-05-25&apos; \\ -d &apos;bank_name=104 Caixa Econ&#xF4;mica&apos; \\ -d &apos;bank_branch=3708&apos; \\ -d &quot;bank_account=08251777-6&quot; \\ -d &apos;account_type=C&apos; \\ -d &apos;bank_details=001&apos; \\ -d &apos;zipcode=80320070&apos; \\ -d &apos;state=PR&apos; \\ -d &apos;city=Curitiba&apos; \\ -d &apos;address=Fake Street&apos; \\ -d &apos;street_complement=123&apos; \\ -d &apos;country=br&apos; -d &apos;terms_accepted_at=2020-04-20 10:20:12&apos; And a successful creation will return the numerical id of your newly created payee. Copy { &quot;id&quot; : &quot;216&quot; }  "
  },
  {
    "title": "Creating a Payee via Dashboard",
    "type": 1,
    "pageTitle": "Create a Payee#",
    "url": "docs/payout/createPayee#creating-a-payee-via-dashboard",
    "content": "You can also create a payee through your Dashboard in the Overview section of the Payout tab. Click on Create Payee, fill in the payee information and click Create. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Create a Payee#",
    "url": "docs/payout/createPayee#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Make sure you have all the mandatory fields in your request",
    "type": 1,
    "pageTitle": "Create a Payee#",
    "url": "docs/payout/createPayee#undefined",
    "content": "There are a few key parameters you need to provide to create a payee. Check the table below for more details.  Field Description integration_key Your unique and secret integration key. name The payee&apos;s name email The payee&apos;s email birth_date The payee&apos;s date of birth document The payee&apos;s document ID number document_type The payee&apos;s document ID type bank_name The payee&apos;s account bank name bank_branch The payee&apos;s account bank branch bank_account The payee&apos;s account number account_type The payee&apos;s account type bank_details The payee&apos;s account bank details country The payee&apos;s country state The payee&apos;s state city The payee&apos;s city zipcode The payee&apos;s zipcode address The payee&apos;s address terms_accepted_at Date when Payout terms were accepted.  For payees with CNPJ, you must provide the shareholders details. This is an array, so, you can specify as many shareholders as necessary. The shareholder object contains the following mandatory fields:  Field Description name The shareholder&apos;s name email The shareholder&apos;s email birthdate The shareholder&apos;s date of birth document The shareholder&apos;s document ID number state The shareholder&apos;s state city The shareholder&apos;s city zipcode The shareholder&apos;s zipcode address The shareholder&apos;s address ownership_percent Percentage of the payout belonging to the shareholder.  "
  },
  {
    "title": "Send your payee request to EBANX",
    "type": 1,
    "pageTitle": "Create a Payee#",
    "url": "docs/payout/createPayee#undefined",
    "content": "To create a new Payout, you will use the /ws/payee/create endpoint. The following example is a payee create request to the payee's bank account sending bank data with bank details: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payee/create' \\-d 'integration_key=your_test_integration_key' \\-d 'name=Polenta' \\-d 'email=polenta@ebanx.com' \\-d 'phone=+554112345678' \\-d 'document=074.828.369-52' \\-d 'document_type=cpf' \\-d 'birth_date=1977-05-25' \\-d 'bank_name=104 Caixa Econômica' \\-d 'bank_branch=3708' \\-d \"bank_account=08251777-6\" \\-d 'account_type=C' \\-d 'bank_details=001' \\-d 'zipcode=80320070' \\-d 'state=PR' \\-d 'city=Curitiba' \\-d 'address=Fake Street' \\-d 'street_complement=123' \\-d 'country=br'-d 'terms_accepted_at=2020-04-20 10:20:12' And a successful creation will return the numerical id of your newly created payee. Copy{ \"id\":\"216\"} "
  },
  {
    "title": "Create a Payout#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/createPayout",
    "content": "",
    "keywords": "Create a Payout"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#about-this-guide",
    "content": "This guide quickly demonstrates how to create a payout in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#how-it-works",
    "content": "To create a payout through EBANX Direct API, please follow the steps below.  Make sure you have all the mandatory fields in your request There are a few key parameters you need to provide to create a payout. Check the table below for more details. Field Description integration_key Your unique and secret integration key. external_reference The unique payout ID provided by you. country The two-letter country code for the customer country. amount The amount in the specified currency (currency_code). currency_code Three-letter code of the payout currency. payee A JSON object containing the details of the payee of your request. Payee Details Note that you can either provide all the information of the payee directly on you payout creation request or create the payee record in advance, using the /ws/payee/create endpoint, and simply provide the payee&apos;s document number in the payout request. Send your payout request to EBANX To create a new Payout, you will use the /ws/payout/create endpoint. The following example is a payout create request to the payee&apos;s bank account sending bank data with bank details: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/payout/create&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;external_reference=PAYOUT_EBANX_04&apos; \\ -d &apos;country=br&apos; \\ -d &apos;amount=10&apos; \\ -d &apos;currency_code=USD&apos; \\ -d &apos;payee[name]=Han Solo&apos; \\ -d &apos;payee[email]=chew@bac.ca&apos; \\ -d &apos;payee[phone]=+554112345678&apos; \\ -d &apos;payee[document]=85351346893&apos; \\ -d &apos;payee[document_type]=cpf&apos; \\ -d &apos;payee[birthdate]=1977-05-25&apos; \\ -d &apos;payee[bank_info][bank_name]=104 Caixa Econ&#xF4;mica&apos; \\ -d &apos;payee[bank_info][bank_branch]=3708&apos; \\ -d &quot;payee[bank_info][bank_account]=08251777-6&quot; \\ -d &apos;payee[bank_info][account_type]=C&apos; \\ -d &apos;payee[bank_info][bank_details]=001&apos; \\ -d &apos;payee[address][zipcode]=80320070&apos; \\ -d &apos;payee[address][state]=PR&apos; \\ -d &apos;payee[address][city]=Curitiba&apos; \\ -d &apos;payee[address][street_address]=Fake Street&apos; \\ -d &apos;payee[address][street_complement]=123&apos; If you have created your payee in advance, simply provide the document number on your payout request: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/payout/create&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;external_reference=PAYOUT_EBANX_04&apos; \\ -d &apos;country=br&apos; \\ -d &apos;amount=10&apos; \\ -d &apos;currency_code=USD&apos; \\ -d &apos;payee[document]=85351346893&apos; And a successful creation will return a JSON Object with type &quot;success&quot; and a payout object with all the details of the newly created Payout. Copy { &quot;type&quot; : &quot;success&quot; , &quot;payout&quot; : { &quot;uid&quot; : &quot;a1352f5341c3c8c1e40ea9c06715f05778ff35ee&quot; , &quot;external_reference&quot; : &quot;PAYOUT_EBANX_04&quot; , &quot;status&quot; : &quot;OP&quot; , &quot;request_date&quot; : &quot;2020-09-18 13:26:53&quot; , &quot;status_date&quot; : null , &quot;paid_date&quot; : null , &quot;cancel_date&quot; : null , &quot;payee&quot; : { &quot;name&quot; : &quot;Han Solo&quot; , &quot;email&quot; : &quot;chew@bac.ca&quot; , &quot;phone&quot; : &quot;554112345678&quot; , &quot;document&quot; : &quot;85351346893&quot; , &quot;document_type&quot; : &quot;CPF&quot; , &quot;birthdate&quot; : &quot;1977-05-25&quot; , &quot;bank_info&quot; : { &quot;bank_name&quot; : &quot;104 Caixa Econ\\u00f4mica&quot; , &quot;bank_branch&quot; : &quot;3708&quot; , &quot;bank_account&quot; : &quot;8251777-6&quot; , &quot;account_type&quot; : &quot;C&quot; , &quot;bank_details&quot; : &quot;001&quot; } } , &quot;request_amount&quot; : &quot;10.00&quot; , &quot;request_currency&quot; : &quot;USD&quot; , &quot;request_exchange_rate&quot; : &quot;1.0000&quot; , &quot;debit_amount&quot; : &quot;9.96&quot; , &quot;debit_fee&quot; : &quot;0.15&quot; , &quot;debit_amount_total&quot; : &quot;10.11&quot; , &quot;debit_currency&quot; : &quot;USD&quot; } } Send a commit request to EBANX Once the new Payout record is created, you can use the /ws/payout/commit endpoint to start the payment process. Here&apos;s an example of a commit operation using the payout we&apos;ve just created: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/payout/commit&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;uid=0e495f7a4409c032d54376084b10b9c771e9b39f0&apos; Once the new Payout is commited, a JSON Object with type &quot;success&quot; will be returned. Copy { &quot;type&quot; : &quot;success&quot; , &quot;message&quot; : &quot;You&apos;ve successfully started the Payout payment process!&quot; }  "
  },
  {
    "title": "Creating a Payout via Dashboard",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#creating-a-payout-via-dashboard",
    "content": "You can also create a payout through your Dashboard in the Overview section of the Payout tab. Click on Create Payout, fill in the payee information, payout amount and click Create. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Make sure you have all the mandatory fields in your request",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#undefined",
    "content": "There are a few key parameters you need to provide to create a payout. Check the table below for more details.  Field Description integration_key Your unique and secret integration key. external_reference The unique payout ID provided by you. country The two-letter country code for the customer country. amount The amount in the specified currency (currency_code). currency_code Three-letter code of the payout currency. payee A JSON object containing the details of the payee of your request.  Payee DetailsNote that you can either provide all the information of the payee directly on you payout creation request or create the payee record in advance, using the /ws/payee/create endpoint, and simply provide the payee's document number in the payout request. "
  },
  {
    "title": "Send your payout request to EBANX",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#undefined",
    "content": "To create a new Payout, you will use the /ws/payout/create endpoint. The following example is a payout create request to the payee's bank account sending bank data with bank details: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/create' \\-d 'integration_key=your_test_integration_key' \\-d 'external_reference=PAYOUT_EBANX_04' \\-d 'country=br' \\-d 'amount=10' \\-d 'currency_code=USD' \\-d 'payee[name]=Han Solo' \\-d 'payee[email]=chew@bac.ca' \\-d 'payee[phone]=+554112345678' \\-d 'payee[document]=85351346893' \\-d 'payee[document_type]=cpf' \\-d 'payee[birthdate]=1977-05-25' \\-d 'payee[bank_info][bank_name]=104 Caixa Econômica' \\-d 'payee[bank_info][bank_branch]=3708' \\-d \"payee[bank_info][bank_account]=08251777-6\" \\-d 'payee[bank_info][account_type]=C' \\-d 'payee[bank_info][bank_details]=001' \\-d 'payee[address][zipcode]=80320070' \\-d 'payee[address][state]=PR' \\-d 'payee[address][city]=Curitiba' \\-d 'payee[address][street_address]=Fake Street' \\-d 'payee[address][street_complement]=123' If you have created your payee in advance, simply provide the document number on your payout request: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/create' \\-d 'integration_key=your_test_integration_key' \\-d 'external_reference=PAYOUT_EBANX_04' \\-d 'country=br' \\-d 'amount=10' \\-d 'currency_code=USD' \\-d 'payee[document]=85351346893' And a successful creation will return a JSON Object with type \"success\" and a payout object with all the details of the newly created Payout. Copy{ \"type\":\"success\", \"payout\":{ \"uid\":\"a1352f5341c3c8c1e40ea9c06715f05778ff35ee\", \"external_reference\":\"PAYOUT_EBANX_04\", \"status\":\"OP\", \"request_date\":\"2020-09-18 13:26:53\", \"status_date\":null, \"paid_date\":null, \"cancel_date\":null, \"payee\":{ \"name\":\"Han Solo\", \"email\":\"chew@bac.ca\", \"phone\":\"554112345678\", \"document\":\"85351346893\", \"document_type\":\"CPF\", \"birthdate\":\"1977-05-25\", \"bank_info\":{ \"bank_name\":\"104 Caixa Econ\\u00f4mica\", \"bank_branch\":\"3708\", \"bank_account\":\"8251777-6\", \"account_type\":\"C\", \"bank_details\":\"001\" } }, \"request_amount\":\"10.00\", \"request_currency\":\"USD\", \"request_exchange_rate\":\"1.0000\", \"debit_amount\":\"9.96\", \"debit_fee\":\"0.15\", \"debit_amount_total\":\"10.11\", \"debit_currency\":\"USD\" }} "
  },
  {
    "title": "Send a commit request to EBANX",
    "type": 1,
    "pageTitle": "Create a Payout#",
    "url": "docs/payout/createPayout#undefined",
    "content": "Once the new Payout record is created, you can use the /ws/payout/commit endpoint to start the payment process. Here's an example of a commit operation using the payout we've just created: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/commit' \\ -d 'integration_key=your_test_integration_key' \\ -d 'uid=0e495f7a4409c032d54376084b10b9c771e9b39f0' Once the new Payout is commited, a JSON Object with type \"success\" will be returned. Copy{ \"type\": \"success\", \"message\": \"You've successfully started the Payout payment process!\"} "
  },
  {
    "title": "Dashboard Overview",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/dashboardOverview",
    "content": ""
  },
  {
    "title": "Payout Dashboard Overview",
    "type": 1,
    "pageTitle": "Dashboard Overview",
    "url": "docs/payout/dashboardOverview#payout-dashboard-overview",
    "content": ""
  },
  {
    "title": "Get Started with Payouts#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/getStarted",
    "content": "",
    "keywords": "Get Started with Payouts"
  },
  {
    "title": "What You Will Need",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#what-you-will-need",
    "content": ""
  },
  {
    "title": "Getting Started",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#getting-started",
    "content": "The Payout contracting is a simple process that goes through our Compliance and Legal Teams and follows these steps:  "
  },
  {
    "title": "Additional Resources",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#additional-resources",
    "content": "We have a full API Refence document, describing in details each parameter and responses. You can find the Payout API Reference here. Also, you can test your API calls using our Postman Collection. You can find our Payout Postman Colletion here. "
  },
  {
    "title": "A Sandbox Account",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#a-sandbox-account",
    "content": "As with any secure payment integration, you will first need to set up authorization. The EBANX sandbox allows you to set up a test environmentto run transactions using test credit card numbers and explore our payment solutions. If you haven't already, sign up for a Sandbox Account at our EBANX Business Page, select your business model and answer a few questions. We'll get in touch with you shortly after! Once you you're setup, you'll have access to your Dashboard and your test integration keys! "
  },
  {
    "title": "Sign up for an EBANX Sandbox Account here",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#sign-up-for-an-ebanx-sandbox-account-here",
    "content": ""
  },
  {
    "title": "Prerequisites",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#prerequisites",
    "content": "To start processing Payouts, you need to:  Already be processing payments through EBANX's Crossborder platformBe abroad and sending payouts to Brazil, Chile or Mexico. Payout is always a crossborder operationProvide documents in accordance with your agreement with EBANXGo through a new compliance assessment  Additionally, there are a few items that you must be aware, before you start processing payouts: Payout can’t be used to pay taxes and labor costs (salary).EBANX restricts or does not work with certain products and services. You can find the full list here.Each payee (CPF or CNPJ) can receive no more than 3.000 USD/month in total for payouts. "
  },
  {
    "title": "Merchants already operating with EBANX",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#merchants-already-operating-with-ebanx",
    "content": "Merchant decides to contract EBANX payout solutionMerchant will need a new compliance onboarding and compliance team can request more informations e documents to the merchantAfter compliance approval, legal team will adjust the contract to the merchant "
  },
  {
    "title": "New Merchants",
    "type": 1,
    "pageTitle": "Get Started with Payouts#",
    "url": "docs/payout/getStarted#new-merchants",
    "content": "Merchant decides to contract EBANX Crossborder and Payout solutionsMerchant will go through a compliance onboardingAfter compliance approval, legal team will prepare the contract to the merchant "
  },
  {
    "title": "Payouts Overview#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/payoutsOverview",
    "content": "",
    "keywords": "Payouts Overview"
  },
  {
    "title": "What is a Payout?",
    "type": 1,
    "pageTitle": "Payouts Overview#",
    "url": "docs/payout/payoutsOverview#what-is-a-payout",
    "content": "The way people work is changing fast. People can work remotely and be part of international organizations without leaving their country.  This scenario created a new challenge for cross border companies: how to pay people the way they want to in their currency without being there? Regulation, compliance, taxes, local connections, and other things are needed to make this process smooth to both ends, and this is what EBANX is offering with this new payout product.  This is where Payout solutions come into play. A payout is the act of sending funds to a supplier, partners or a freelancer and helps merchants by:  Providing fast paymentsOffering a single platform to attend multiple countriesReducing total number of transactions to perform a paymentProviding a good experience to the payees The EBANX Payout platform offers the following advantages: Competitive SLA. Payment occurs in D+3 business daysBrazil, Chile and Mexico coverage, soon to expand to other Latin America countriesReduced number of exchanges by using the settlement to perform the payout "
  },
  {
    "title": "The Payout Process",
    "type": 1,
    "pageTitle": "Payouts Overview#",
    "url": "docs/payout/payoutsOverview#the-payout-process",
    "content": " Merchant requests payouts through EBANX Dashboard or APICompliance will analyze and approve the payee and the payment in D + 1 (business days)After compliance approval, the payee will receive the payment in 2 days (business days). If the bank information isn't correct, this SLA can be affected The whole process (from payout request to payee payment) will occur in D + 3 (business days). "
  },
  {
    "title": "EBANX Payout Solutions",
    "type": 1,
    "pageTitle": "Payouts Overview#",
    "url": "docs/payout/payoutsOverview#ebanx-payout-solutions",
    "content": "API: Our Payout API allows for full customization of the user experience according to the merchant's needs. This solution requires code development on the merchant's website.Dashboard: EBANX's Dashboard offers a smooth experience without the need for any coding at all. Simply log on to your dashboard and check our payout features! "
  },
  {
    "title": "Return Codes",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/returnCodes",
    "content": ""
  },
  {
    "title": "Payout Return Codes",
    "type": 1,
    "pageTitle": "Return Codes",
    "url": "docs/payout/returnCodes#payout-return-codes",
    "content": ""
  },
  {
    "title": "Simulate a Payout#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/simulatePayout",
    "content": "",
    "keywords": "Simulate a Payout"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Simulate a Payout#",
    "url": "docs/payout/simulatePayout#about-this-guide",
    "content": "This guide quickly demonstrates how to simulate a payout in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Simulate a Payout#",
    "url": "docs/payout/simulatePayout#how-it-works",
    "content": " Simulate a payout using the /ws/payout/simulate end-point To simulate a Payout, you will use the /ws/payout/simulate endpoint. The following fields are required: Field Description country Target country of the payout amount Amount you wish to simulate currency_code Currency code of the payout you wish to simulate The following example is a payout simulation to a brazilian Payee in US Dollars: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/payout/simulate&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;country=br&apos; \\ -d &apos;amount=10&apos; \\ -d &apos;currency_code=USD&apos; And a successful simulation will return a JSON Object with type &quot;success&quot; and a payout object with the details of the simulated Payout. Copy { &quot;type&quot; : &quot;success&quot; , &quot;payout&quot; : { &quot;request_amount&quot; : &quot;10&quot; , &quot;request_currency&quot; : &quot;USD&quot; , &quot;request_exchange_rate&quot; : 1 , &quot;debit_amount&quot; : 10 , &quot;debit_fee&quot; : 0.3 , &quot;debit_amount_total&quot; : 10.3 , &quot;debit_currency&quot; : &quot;USD&quot; } }  "
  },
  {
    "title": "Simulate a Payout via Dashboard",
    "type": 1,
    "pageTitle": "Simulate a Payout#",
    "url": "docs/payout/simulatePayout#simulate-a-payout-via-dashboard",
    "content": "When you are creating a Payout via Dashboard, you can view the total amount and fees, prior to the creation of the payout, at the bottom of the Create Payout screen. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Simulate a Payout#",
    "url": "docs/payout/simulatePayout#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Simulate a payout using the /ws/payout/simulate end-point",
    "type": 1,
    "pageTitle": "Simulate a Payout#",
    "url": "docs/payout/simulatePayout#undefined",
    "content": "To simulate a Payout, you will use the /ws/payout/simulate endpoint. The following fields are required:  Field Description country Target country of the payout amount Amount you wish to simulate currency_code Currency code of the payout you wish to simulate  The following example is a payout simulation to a brazilian Payee in US Dollars: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/payout/simulate' \\ -d 'integration_key=your_test_integration_key' \\ -d 'country=br' \\ -d 'amount=10' \\ -d 'currency_code=USD' And a successful simulation will return a JSON Object with type \"success\" and a payout object with the details of the simulated Payout. Copy{ \"type\": \"success\", \"payout\": { \"request_amount\": \"10\", \"request_currency\": \"USD\", \"request_exchange_rate\": 1, \"debit_amount\": 10, \"debit_fee\": 0.3, \"debit_amount_total\": 10.3, \"debit_currency\": \"USD\" }} "
  },
  {
    "title": "Transfer Balance#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/payout/transferBalance",
    "content": "",
    "keywords": "Transfer Balance"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Transfer Balance#",
    "url": "docs/payout/transferBalance#about-this-guide",
    "content": "This guide quickly demonstrates how to transfer balance from your settlement to your payouts in EBANX. We will walk you through the basic steps to achieve this goal using your already existing Direct API integration. "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Transfer Balance#",
    "url": "docs/payout/transferBalance#how-it-works",
    "content": " Transfer balance using the /ws/transfer/create end-point To transfer balance, you will use the /ws/transfer/create endpoint. The following fields are required: Field Description external_reference The unique identifier you provide to the transfer amount Amount you wish to transfer source Source of the amount. This value must be payment_balance The following example shows how to create a transfer using the payment balance from your settlement: Copy curl -X POST &apos;https://sandbox.ebanxpay.com/ws/transfer/create&apos; \\ -d &apos;integration_key=your_test_integration_key&apos; \\ -d &apos;external_reference=PAYOUT_TRANSFER_02&apos; \\ -d &apos;amount=150&apos; \\ -d &apos;source=payment_balance&apos; And a successful creation will return a JSON Object with type &quot;success&quot; and a payout object with all the details of the newly created Transfer. Copy { &quot;type&quot; : &quot;success&quot; , &quot;transfer&quot; : { &quot;uid&quot; : &quot;11ce3097af9ccf601b11038123962d3feded348ed&quot; , &quot;external_reference&quot; : &quot;PAYOUT_TRANSFER_02&quot; , &quot;status&quot; : &quot;OP&quot; , &quot;request_date&quot; : &quot;2017-02-08 17:33:56&quot; , &quot;confirm_date&quot; : null , &quot;cancel_date&quot; : null , &quot;amount&quot; : &quot;150.00&quot; , &quot;settlement_code&quot; : null , &quot;source&quot; : &quot;payment_balance&quot; } }  "
  },
  {
    "title": "Transferring Balance via Dashboard",
    "type": 1,
    "pageTitle": "Transfer Balance#",
    "url": "docs/payout/transferBalance#transferring-balance-via-dashboard",
    "content": "You can also transfer to your available balance through your Dashboard in the Overview section of the Payout tab. Click on the Add Balance option and choose the amount you want to transfer from the amount available from your settlement. "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Transfer Balance#",
    "url": "docs/payout/transferBalance#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Transfer balance using the /ws/transfer/create end-point",
    "type": 1,
    "pageTitle": "Transfer Balance#",
    "url": "docs/payout/transferBalance#undefined",
    "content": "To transfer balance, you will use the /ws/transfer/create endpoint. The following fields are required:  Field Description external_reference The unique identifier you provide to the transfer amount Amount you wish to transfer source Source of the amount. This value must be payment_balance  The following example shows how to create a transfer using the payment balance from your settlement: Copycurl -X POST 'https://sandbox.ebanxpay.com/ws/transfer/create' \\ -d 'integration_key=your_test_integration_key' \\ -d 'external_reference=PAYOUT_TRANSFER_02' \\ -d 'amount=150' \\ -d 'source=payment_balance' And a successful creation will return a JSON Object with type \"success\" and a payout object with all the details of the newly created Transfer. Copy { \"type\": \"success\", \"transfer\": { \"uid\": \"11ce3097af9ccf601b11038123962d3feded348ed\", \"external_reference\": \"PAYOUT_TRANSFER_02\", \"status\": \"OP\", \"request_date\": \"2017-02-08 17:33:56\", \"confirm_date\": null, \"cancel_date\": null, \"amount\": \"150.00\", \"settlement_code\": null, \"source\": \"payment_balance\" }} "
  },
  {
    "title": "Downloads#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/downloads",
    "content": "Downloads#Please find our materials that can help you through your integration processEBANX logos package A package with all the logos of payment methods, banks, credit cards brands, etc. UX recommendation for Argentina Our guide on how to have an awesome user experience for your Argentinian customers. UX recommendation for Colombia Our guide on how to have an awesome user experience for your Colombian customers. UX recommendation for Chile Our guide on how to have an awesome user experience for your Chilean customers. How to capture a payment Our guide on how to use the pre-authorization(auto-capture). Payment flow for Online Debit payments Our guide on how the online debit payments work. EBANX Payment Page guide Our guide on how to integrate with EBANX Payment Page. EBANX Direct API guide Our guide on how to integrate with EBANX Direct. Payment Notifications Our guide on what are notifications and how to treat them. Working with installments Our guide on how to work with installments. Recurring Payments through EBANX tokenization Our guide on how does recurring payments work. How to get your integration keys A quick guide on how to get your integration keys. Shopify guide for Brazil A quick guide on how to install your EBANX Shopify plugin for Brazil. Shopify guide for Latam A quick guide on how to install your EBANX Shopify plugin for Latam. ",
    "keywords": "Downloads"
  },
  {
    "title": "EBANX Dashboard#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ebanx-dashboard",
    "content": "",
    "keywords": "EBANX Dashboard"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#about-this-guide",
    "content": "This guide provides you an overview of the EBANX Dashboard and its main features. Control your Latin American operations in a transparent, simple and practical way. With the EBANX Dashboard, you are able to track all your transactions, generate reports, analyze data in graphic formats and much more. "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#what-you-will-need",
    "content": "If you don't have access to the Dashboard request a call with a Business Development Executive to know our product better; otherwise, if you already have an account but do not remember your password, please click here to reset your password. "
  },
  {
    "title": "Overview Screen",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#overview-screen",
    "content": "The Home screen of your Dashboard, the overview section shows all data processed either combined by all Countries (if you process more than one) or by Country. Here you will be able to: See your current: Ready for Settlement: The net amount available to be transferred to your account via settlement.Total Lifetime Payments and Customers: Number of total payment transactions and total number of customers your Business had while processing with EBANX. Check your Total Processed Volume on a graphic format: Edit the time period you would like to see by clicking on the right corner date filter, the main set period is the last 30 days.See Processed Volume, Payments and Unique Customers according to the date filter you have set.  The third section shows the Volume share of your total processed amount: The share will be shown according by Country and by Payment method inside every Country.If you want to start to process in other countries, click on the talk to us button and schedule a call with your Business Development Manager.  "
  },
  {
    "title": "Transactions Screen",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#transactions-screen",
    "content": "Check your Payments, Refunds and Chargebacks transactions in this menu. Read the specific menus to understand their functionalities: "
  },
  {
    "title": "Settlement Screen",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#settlement-screen",
    "content": "Access all your Settlement Preview, Details, History and request your Settlement this menu. Divided into two sub-menus with the following: "
  },
  {
    "title": "Logs Screen",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#logs-screen",
    "content": "This menu will show all communication records of your transactions when it comes to our system and yours. "
  },
  {
    "title": "Settings",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#settings",
    "content": "Now you can find your Settings under your User Name on the top right corner of your screen. Account Settings, Help & Support and Sign Out are now under your username. In Account Settings you will find: General configuration: Change and update at any time your company Name, logo and login information.User configuration: Give permission to the different user inside your company, there are 4 different categories of users. Click on each category to understand how they work.Integration: Here you will find your test and integration Keys, such as your test and live Service URLs.Preferences: Set your timezone and your default merchant in case of more than one.  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Payments and Refunds",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#payments-and-refunds",
    "content": "See all your payments and refund transactions either listed or in graphic format by clicking the top left buttons.Click on each listed item to see full details.Search specific payments or Refunds, Order Number, Customer email or Payment Hash.At the Payment sub-menu you can filter by Country, Payment Method or Status.Filter a specific time period.Export the lists in CSV or XLSX format.  "
  },
  {
    "title": "Chargeback Disputes",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#chargeback-disputes",
    "content": "See all chargebacks transactions.Dispute the chargebacks with the reason code \"Commercial disagreement\".Keep up with the chargeback dispute status.Filter and look into the tooltips to understand more about the information shown on the screen.   "
  },
  {
    "title": "Request Settlement",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#request-settlement",
    "content": "Settlement Preview See all the amounts available and pending for settlement. Click on View Details to simulate a settlement and see the regarding Total Collected, Refunds, Chargebacks, Reversed Chargebacks and fees.   Settlement Details Click in Request Settlement to request one for all countries or a specific one.  "
  },
  {
    "title": "History",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#history",
    "content": "Check all your Settlements in both list or graphic format.Filter each Settlement by Settlement Code, time period or status.Click on each Settlement and you can see full details of the settlement such as the amount processed and the fees applied to your Settlement.You can also export a report about your settlement.   "
  },
  {
    "title": "Direct API",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#direct-api",
    "content": "Here you will see all the records coming to our API from your platform. Merchants who use our external Checkout won’t see any content in this area. You can find a specific log by searching with the payment number and filtering.  "
  },
  {
    "title": "Notification",
    "type": 1,
    "pageTitle": "EBANX Dashboard#",
    "url": "docs/resources/ebanx-dashboard#notification",
    "content": "Here you will see all the records coming from EBANX to your platform notifying changes on your transactions. If you have not configured your notification URL, you won’t be able to see any notification on this section. To configure your URL, go to Account Settings by clicking on the name of your user on the top right of the page, than go to Integration and Service URLs.  "
  },
  {
    "title": "Track Packages#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ebanx-track",
    "content": "",
    "keywords": "EBANX Track"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#about-this-guide",
    "content": "The lack of information is one of the main causes of making LATAM’s logistics inefficient for both merchants and customers. EBANX Track provides information by crossing payment data with logistics. This guide gives you a quick overview of our package tracking API and the basics on how to use it.  "
  },
  {
    "title": "What you will need",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#what-you-will-need",
    "content": "Before starting your integration, please make sure that you have: An EBANX Sandbox account. That's not the case? Please sign up for an Sandbox Account here; "
  },
  {
    "title": "How it works",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#how-it-works",
    "content": "You have a few options with our API, depending on how much information you have about your package. infoFor a full description of this API, check our API Reference Sending a simple tracking numberCopycurl -X POST \\https://sandbox.ebanxpay.com/ws/tracking \\-H 'Content-Type: application/json' \\-d '{\"integration_key\": \"your_integration_key\",\"order_number\": \"ORDER123\",\"email\": \"customer@business.com\",\"tracking_code\": [\"LZ624515815CN\"]}'Send the tracking number and more info about the items inside the packageCopycurl -X POST \\https://sandbox.ebanxpay.com/ws/tracking \\-H 'Content-Type: application/json' \\-d '{\"integration_key\": \"your_integration_key\",\"email\": \"customer@business.com\",\"order_number\": \"ORDER123\",\"tracking_code\": [{\"tracking_code\": \"RN1234567890BR\",\"items\": [{\"sku\": \"ITEM-SKU\",\"name\": \"Item name\",\"description\": \"A little bit more detailed item description\",\"unit_price\": 13400,\"quantity\": 1,\"type\": \"mobile-phone\"}]}]}'Send the tracking number and complete information including addressCopycurl -X POST \\https://sandbox.ebanxpay.com/ws/tracking \\-H 'Content-Type: application/json' \\-d '{\"integration_key\": \"your_integration_key\",\"email\": \"customer@business.com\",\"order_number\": \"ORDER123\",\"tracking_code\": [\"LZ624515815CN\",{\"tracking_code\": \"RN1234567890BR\",\"items\": [{\"sku\": \"ITEM-SKU\",\"name\": \"Item name\",\"description\": \"A little bit more detailed item description\",\"unit_price\": 13400,\"quantity\": 1,\"type\": \"mobile-phone\"}]},{\"tracking_code\": \"RN0987654321BR\",\"address\": {\"zipcode\": \"80123456\",\"address\": \"Sample Street\",\"street_number\": \"123\",\"street_complement\": \"Address Complement\",\"city\": \"Curitiba\",\"state\": \"Paraná\",\"country\": \"BR\"}}],\"email\": \"customer@ebanx.com\",\"order_number\": \"ORDER-123\",\"payment_hash\": \"PAYMENT_HASH_STRING\"}' A successful request will return a JSON expression similar to the one below. Copy{ \"status\": \"SUCCESS\", \"result\": [ { \"customer_email\": \"customer@ebanx.com\", \"tracking_code\": \"LZ624515815CN\", \"order_number\": \"ORDER-123\", \"status\": \"CREATED\" }, { \"customer_email\": \"customer@ebanx.com\", \"tracking_code\": \"RN1234567890BR\", \"order_number\": \"ORDER-123\", \"status\": \"CREATED\" }, { \"customer_email\": \"customer@ebanx.com\", \"tracking_code\": \"RN0987654321BR\", \"order_number\": \"ORDER-123\", \"status\": \"CREATED\" } ]} "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Sending a simple tracking number",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#undefined",
    "content": "Copycurl -X POST \\https://sandbox.ebanxpay.com/ws/tracking \\-H 'Content-Type: application/json' \\-d '{\"integration_key\": \"your_integration_key\",\"order_number\": \"ORDER123\",\"email\": \"customer@business.com\",\"tracking_code\": [\"LZ624515815CN\"]}' "
  },
  {
    "title": "Send the tracking number and more info about the items inside the package",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#undefined",
    "content": "Copycurl -X POST \\https://sandbox.ebanxpay.com/ws/tracking \\-H 'Content-Type: application/json' \\-d '{\"integration_key\": \"your_integration_key\",\"email\": \"customer@business.com\",\"order_number\": \"ORDER123\",\"tracking_code\": [{\"tracking_code\": \"RN1234567890BR\",\"items\": [{\"sku\": \"ITEM-SKU\",\"name\": \"Item name\",\"description\": \"A little bit more detailed item description\",\"unit_price\": 13400,\"quantity\": 1,\"type\": \"mobile-phone\"}]}]}' "
  },
  {
    "title": "Send the tracking number and complete information including address",
    "type": 1,
    "pageTitle": "Track Packages#",
    "url": "docs/resources/ebanx-track#undefined",
    "content": "Copycurl -X POST \\https://sandbox.ebanxpay.com/ws/tracking \\-H 'Content-Type: application/json' \\-d '{\"integration_key\": \"your_integration_key\",\"email\": \"customer@business.com\",\"order_number\": \"ORDER123\",\"tracking_code\": [\"LZ624515815CN\",{\"tracking_code\": \"RN1234567890BR\",\"items\": [{\"sku\": \"ITEM-SKU\",\"name\": \"Item name\",\"description\": \"A little bit more detailed item description\",\"unit_price\": 13400,\"quantity\": 1,\"type\": \"mobile-phone\"}]},{\"tracking_code\": \"RN0987654321BR\",\"address\": {\"zipcode\": \"80123456\",\"address\": \"Sample Street\",\"street_number\": \"123\",\"street_complement\": \"Address Complement\",\"city\": \"Curitiba\",\"state\": \"Paraná\",\"country\": \"BR\"}}],\"email\": \"customer@ebanx.com\",\"order_number\": \"ORDER-123\",\"payment_hash\": \"PAYMENT_HASH_STRING\"}' "
  },
  {
    "title": "Error Codes in Portuguese#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/error-messages-portuguese",
    "content": "",
    "keywords": "Error codes"
  },
  {
    "title": "Direct API Error messages",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#direct-api-error-messages",
    "content": ""
  },
  {
    "title": "Payment page",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#payment-page",
    "content": ""
  },
  {
    "title": "Payment related errors (Pagamentos)",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#payment-related-errors-pagamentos",
    "content": " Error code Error message Description BP-DR-68 Field payment.directdebit.bank_account is required Ei, voc&#xEA; esqueceu de preencher o n&#xFA;mero da sua conta. BP-DR-69 Parameter payment.directdebit.bank_agency can have 10 characters maximum Ops! Voc&#xEA; excedeu o n&#xFA;mero de caracteres permitidos, preencha novamente. BP-DR-70 Field payment.directdebit.bank_agency is required Ei, voc&#xEA; esqueceu de preencher o n&#xFA;mero da sua ag&#xEA;ncia. BP-DR-71 Parameter payment.directdebit.bank_code can have 5 characters maximum Voc&#xEA; excedeu o n&#xFA;mero de caracteres permitidos para o c&#xF3;digo do banco, preencha novamente. BP-DR-84 Duplicate payment for the same customer and amount within {minutes} minutes Seu pagamento j&#xE1; foi registrado, n&#xE3;o precisa tentar de novo. BP-DR-93 Error creating this payment within PSE ACH. Error code: ?. Ops, ocorreu um erro inesperado, tente novamente em alguns minutos. BP-DR-102 Too many attempts Ops, algo deu errado. Tente novamente com outro cart&#xE3;o. BP-ZIP-1 Zipcode code not informed Ei, voc&#xEA; esqueceu de nos informar o seu CEP. BP-ZIP-2 Zipcode is not valid O CEP enviado n&#xE3;o &#xE9; v&#xE1;lido. Por favor, tente de novo. BP-ZIP-3 The address could not be retrieved O CEP enviado &#xE9; inv&#xE1;lido ou inexistente. Por favor, tente de novo. Card related errors (Cart&#xF5;es) # Error code Error message Description BP-DR-34 Invalid value for instalments: X (range) Infelizmente o n&#xFA;mero de parcelas selecionado n&#xE3;o est&#xE1; dispon&#xED;vel. Tente de novo com outro n&#xFA;mero. BP-DR-49 Field payment.creditcard.card_number is required Ei, voc&#xEA; esqueceu de preencher o n&#xFA;mero do seu cart&#xE3;o. BP-DR-51 Field payment.creditcard.card_name is required Ei, faltou uma informa&#xE7;&#xE3;o aqui! Preencha com o nome que aparece em seu cart&#xE3;o. BP-DR-54 Field payment.creditcard.card_cvv is required Ops, faltou o CVV do cart&#xE3;o. BP-DR-56 Field payment.creditcard.card_due_date is required Ei, faltou preencher a data de vencimento do cart&#xE3;o. BP-DR-75 Card number is invalid O n&#xFA;mero do cart&#xE3;o informado &#xE9; inv&#xE1;lido. Confira se n&#xE3;o houve um erro de digita&#xE7;&#xE3;o e tente de novo. BP-DR-83 Foreign credit card cannot be processed. Apenas cart&#xF5;es do seu pa&#xED;s de origem s&#xE3;o permitidos para essa transa&#xE7;&#xE3;o. BP-DR-95 Parameter payment.card.card_name must be a valid name: number isn&#x2019;t allowed Ops, confira se voc&#xEA; preencheu mesmo com o seu nome e n&#xE3;o com o n&#xFA;mero do cart&#xE3;o. BP-DR-97 Instalment payments are not allowed for prepaid cards. Voc&#xEA; n&#xE3;o pode parcelar suas compras com cart&#xF5;es pr&#xE9;-pagos. O que acha de tentar com um cart&#xE3;o de cr&#xE9;dito? BP-DR-100 Instalment payments are not allowed for debit cards Cart&#xF5;es de d&#xE9;bito n&#xE3;o realizam pagamentos parcelados, mas voc&#xEA; pode tentar de novo com um cart&#xE3;o de cr&#xE9;dito. BP-DR-101 Card is not eligible for ecommerce Ops! Esse cart&#xE3;o n&#xE3;o est&#xE1; liberado para fazer compras na internet. Entre em contato com o seu banco para mais informa&#xE7;&#xF5;es. Customer related errors (Cliente) # Error code Error message Description BP-DR-13 Field payment.name is required Ei, voc&#xEA; esqueceu de preencher o seu nome. BP-DR-14 Parameter payment.name can have 100 characters maximum Epa, o seu nome est&#xE1; com mais caracteres do que o limite permitido. Procure abrevi&#xE1;-lo ou ent&#xE3;o coloque apenas um sobrenome. BP-DR-15 Field payment.email is required Espera a&#xED;! Faltou preencher o e-mail. BP-DR-17 Field payment.email must be a valid email Desculpa, mas o e-mail enviado &#xE9; inv&#xE1;lido. BP-DR-19 Field payment.birth_date is required Ei, precisamos da sua data de nascimento. BP-DR-20 Field payment.birth_date must be a valid birth date (dd/MM/yyyy) A sua data de nascimento deve estar formatada em dd/mm/aaaa. BP-DR-21 Customer must be at least 16 years old Ei, voc&#xEA; precisa ter mais de 16 anos para realizar essa transa&#xE7;&#xE3;o. BP-DR-22 Field payment.document is required Desculpa, mas o documento enviado &#xE9; inv&#xE1;lido. BP-DR-23 Field payment.document must be a valid {document} Preencha com um documento v&#xE1;lido. BP-DR-24 Field payment.zipcode is required Falta pouco! Preencha o seu CEP. BP-DR-25 Field payment.address is required Ei, voc&#xEA; esqueceu de informar o seu endere&#xE7;o. BP-DR-26 Field payment.street_number is required N&#xE3;o se esque&#xE7;a de preencher o n&#xFA;mero do seu endere&#xE7;o. BP-DR-27 Field payment.city is required Ei, voc&#xEA; esqueceu de preencher a sua cidade. BP-DR-28 Field payment.state is required Ops, faltou preencher o Estado. BP-DR-29 Field payment.state must be a valid state code Confira uma lista com os c&#xF3;digos dos estados brasileiros: https://goo.gl/qCk2V . BP-DR-31 Field payment.phone_number is required Preencher o telefone &#xE9; obrigat&#xF3;rio, beleza? BP-DR-32 Parameter payment.phone_number must be a valid phone number O n&#xFA;mero de telefone informado &#xE9; inv&#xE1;lido. BP-DR-39 CPF, name, and birth date do not match: X O documento precisa estar ativo para completar essa transa&#xE7;&#xE3;o. Entre em contato com o suporte do EBANX ( https://ajuda.ebanx.com/hc/pt-br ) para mais informa&#xE7;&#xF5;es. BP-DR-40 Customer reached payment limit: X Ops, voc&#xEA; quer fazer uma transa&#xE7;&#xE3;o que ultrapassa o limite permitido pelo EBANX. Tente de novo com um valor menor. BP-DR-42 Field payment.responsible is required Como a sua transa&#xE7;&#xE3;o &#xE9; com CNPJ, &#xE9; preciso preencher o respons&#xE1;vel. BP-DR-43 Field payment.responsible.name is required Ei, voc&#xEA; esqueceu de preencher o seu nome. BP-DR-44 Field payment.responsible.document is required Ops, faltou informar o n&#xFA;mero do seu documento. BP-DR-45 Field payment.responsible.birth_date is required Ei, voc&#xEA; esqueceu de preencher a sua data de nascimento. BP-DR-46 Company responsible&#x2019;s CPF, name, and birthdate do not match: (.*) O documento precisa estar ativo para completar essa transa&#xE7;&#xE3;o. Entre em contato com o suporte do EBANX ( https://ajuda.ebanx.com/hc/pt-br ) para mais informa&#xE7;&#xF5;es. BP-DR-90 This customer is in our blacklist: {reason}. Ops, aconteceu algum problema. Entre em contato com o suporte do EBANX ( https://ajuda.ebanx.com/hc/pt-br ) para mais informa&#xE7;&#xF5;es. BP-DR-98 Customer e-mail is associated with payments for {customer.country}, not {payment.country}, please use another e-mail O pa&#xED;s do pagamento precisa ser igual ao seu pa&#xED;s de resid&#xEA;ncia, beleza? Payment page # Cards related errors (Cart&#xF5;es) # Error code Error message Description BP-R-12 Installments are limited to a quantity of X. Value provided: X Desculpa, mas o n&#xFA;mero de parcelas selecionado n&#xE3;o est&#xE1; dispon&#xED;vel. :/ BP-R-13 The amount of each installments must be greater than or equal to R$ X. Value calculated: R$ X / X = X O valor de cada parcela deve ser maior ou igual a R$X. Tente de novo com outro n&#xFA;mero de parcelas. BP-R-28 The amount of installments is larger than the maximum allowed for merchant Ops! O n&#xFA;mero de parcelas que voc&#xEA; escolheu n&#xE3;o est&#xE1; dispon&#xED;vel para esse valor. Tente de novo com outra op&#xE7;&#xE3;o de parcela. BP-R-29 Invalid value for installments O n&#xFA;mero de parcelas selecionado n&#xE3;o est&#xE1; dispon&#xED;vel. Tente de novo com outra op&#xE7;&#xE3;o de parcela. BP-R-30 The amount of instalments is not allowed &#x2013; blocked values are: {payment.api.instalments.blocked} O n&#xFA;mero de parcelas que voc&#xEA; selecionou n&#xE3;o est&#xE1; dispon&#xED;vel para essa compra. Tente de novo com outro n&#xFA;mero de parcela. Customer related errors (Cliente) # Error code Error message Description BP-R-4 Parameter is required: name Ops, faltou preencher o seu nome. BP-R-5 Parameter is required: email Ei, faltou informar o seu e-mail.  "
  },
  {
    "title": "Card related errors (Cartões)",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#card-related-errors-cartões",
    "content": " Error code Error message Description BP-DR-34 Invalid value for instalments: X (range) Infelizmente o n&#xFA;mero de parcelas selecionado n&#xE3;o est&#xE1; dispon&#xED;vel. Tente de novo com outro n&#xFA;mero. BP-DR-49 Field payment.creditcard.card_number is required Ei, voc&#xEA; esqueceu de preencher o n&#xFA;mero do seu cart&#xE3;o. BP-DR-51 Field payment.creditcard.card_name is required Ei, faltou uma informa&#xE7;&#xE3;o aqui! Preencha com o nome que aparece em seu cart&#xE3;o. BP-DR-54 Field payment.creditcard.card_cvv is required Ops, faltou o CVV do cart&#xE3;o. BP-DR-56 Field payment.creditcard.card_due_date is required Ei, faltou preencher a data de vencimento do cart&#xE3;o. BP-DR-75 Card number is invalid O n&#xFA;mero do cart&#xE3;o informado &#xE9; inv&#xE1;lido. Confira se n&#xE3;o houve um erro de digita&#xE7;&#xE3;o e tente de novo. BP-DR-83 Foreign credit card cannot be processed. Apenas cart&#xF5;es do seu pa&#xED;s de origem s&#xE3;o permitidos para essa transa&#xE7;&#xE3;o. BP-DR-95 Parameter payment.card.card_name must be a valid name: number isn&#x2019;t allowed Ops, confira se voc&#xEA; preencheu mesmo com o seu nome e n&#xE3;o com o n&#xFA;mero do cart&#xE3;o. BP-DR-97 Instalment payments are not allowed for prepaid cards. Voc&#xEA; n&#xE3;o pode parcelar suas compras com cart&#xF5;es pr&#xE9;-pagos. O que acha de tentar com um cart&#xE3;o de cr&#xE9;dito? BP-DR-100 Instalment payments are not allowed for debit cards Cart&#xF5;es de d&#xE9;bito n&#xE3;o realizam pagamentos parcelados, mas voc&#xEA; pode tentar de novo com um cart&#xE3;o de cr&#xE9;dito. BP-DR-101 Card is not eligible for ecommerce Ops! Esse cart&#xE3;o n&#xE3;o est&#xE1; liberado para fazer compras na internet. Entre em contato com o seu banco para mais informa&#xE7;&#xF5;es.  "
  },
  {
    "title": "Customer related errors (Cliente)",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#customer-related-errors-cliente",
    "content": " Error code Error message Description BP-DR-13 Field payment.name is required Ei, voc&#xEA; esqueceu de preencher o seu nome. BP-DR-14 Parameter payment.name can have 100 characters maximum Epa, o seu nome est&#xE1; com mais caracteres do que o limite permitido. Procure abrevi&#xE1;-lo ou ent&#xE3;o coloque apenas um sobrenome. BP-DR-15 Field payment.email is required Espera a&#xED;! Faltou preencher o e-mail. BP-DR-17 Field payment.email must be a valid email Desculpa, mas o e-mail enviado &#xE9; inv&#xE1;lido. BP-DR-19 Field payment.birth_date is required Ei, precisamos da sua data de nascimento. BP-DR-20 Field payment.birth_date must be a valid birth date (dd/MM/yyyy) A sua data de nascimento deve estar formatada em dd/mm/aaaa. BP-DR-21 Customer must be at least 16 years old Ei, voc&#xEA; precisa ter mais de 16 anos para realizar essa transa&#xE7;&#xE3;o. BP-DR-22 Field payment.document is required Desculpa, mas o documento enviado &#xE9; inv&#xE1;lido. BP-DR-23 Field payment.document must be a valid {document} Preencha com um documento v&#xE1;lido. BP-DR-24 Field payment.zipcode is required Falta pouco! Preencha o seu CEP. BP-DR-25 Field payment.address is required Ei, voc&#xEA; esqueceu de informar o seu endere&#xE7;o. BP-DR-26 Field payment.street_number is required N&#xE3;o se esque&#xE7;a de preencher o n&#xFA;mero do seu endere&#xE7;o. BP-DR-27 Field payment.city is required Ei, voc&#xEA; esqueceu de preencher a sua cidade. BP-DR-28 Field payment.state is required Ops, faltou preencher o Estado. BP-DR-29 Field payment.state must be a valid state code Confira uma lista com os c&#xF3;digos dos estados brasileiros: https://goo.gl/qCk2V . BP-DR-31 Field payment.phone_number is required Preencher o telefone &#xE9; obrigat&#xF3;rio, beleza? BP-DR-32 Parameter payment.phone_number must be a valid phone number O n&#xFA;mero de telefone informado &#xE9; inv&#xE1;lido. BP-DR-39 CPF, name, and birth date do not match: X O documento precisa estar ativo para completar essa transa&#xE7;&#xE3;o. Entre em contato com o suporte do EBANX ( https://ajuda.ebanx.com/hc/pt-br ) para mais informa&#xE7;&#xF5;es. BP-DR-40 Customer reached payment limit: X Ops, voc&#xEA; quer fazer uma transa&#xE7;&#xE3;o que ultrapassa o limite permitido pelo EBANX. Tente de novo com um valor menor. BP-DR-42 Field payment.responsible is required Como a sua transa&#xE7;&#xE3;o &#xE9; com CNPJ, &#xE9; preciso preencher o respons&#xE1;vel. BP-DR-43 Field payment.responsible.name is required Ei, voc&#xEA; esqueceu de preencher o seu nome. BP-DR-44 Field payment.responsible.document is required Ops, faltou informar o n&#xFA;mero do seu documento. BP-DR-45 Field payment.responsible.birth_date is required Ei, voc&#xEA; esqueceu de preencher a sua data de nascimento. BP-DR-46 Company responsible&#x2019;s CPF, name, and birthdate do not match: (.*) O documento precisa estar ativo para completar essa transa&#xE7;&#xE3;o. Entre em contato com o suporte do EBANX ( https://ajuda.ebanx.com/hc/pt-br ) para mais informa&#xE7;&#xF5;es. BP-DR-90 This customer is in our blacklist: {reason}. Ops, aconteceu algum problema. Entre em contato com o suporte do EBANX ( https://ajuda.ebanx.com/hc/pt-br ) para mais informa&#xE7;&#xF5;es. BP-DR-98 Customer e-mail is associated with payments for {customer.country}, not {payment.country}, please use another e-mail O pa&#xED;s do pagamento precisa ser igual ao seu pa&#xED;s de resid&#xEA;ncia, beleza?  "
  },
  {
    "title": "Cards related errors (Cartões)",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#cards-related-errors-cartões",
    "content": " Error code Error message Description BP-R-12 Installments are limited to a quantity of X. Value provided: X Desculpa, mas o n&#xFA;mero de parcelas selecionado n&#xE3;o est&#xE1; dispon&#xED;vel. :/ BP-R-13 The amount of each installments must be greater than or equal to R$ X. Value calculated: R$ X / X = X O valor de cada parcela deve ser maior ou igual a R$X. Tente de novo com outro n&#xFA;mero de parcelas. BP-R-28 The amount of installments is larger than the maximum allowed for merchant Ops! O n&#xFA;mero de parcelas que voc&#xEA; escolheu n&#xE3;o est&#xE1; dispon&#xED;vel para esse valor. Tente de novo com outra op&#xE7;&#xE3;o de parcela. BP-R-29 Invalid value for installments O n&#xFA;mero de parcelas selecionado n&#xE3;o est&#xE1; dispon&#xED;vel. Tente de novo com outra op&#xE7;&#xE3;o de parcela. BP-R-30 The amount of instalments is not allowed &#x2013; blocked values are: {payment.api.instalments.blocked} O n&#xFA;mero de parcelas que voc&#xEA; selecionou n&#xE3;o est&#xE1; dispon&#xED;vel para essa compra. Tente de novo com outro n&#xFA;mero de parcela.  "
  },
  {
    "title": "Customer related errors (Cliente)",
    "type": 1,
    "pageTitle": "Error Codes in Portuguese#",
    "url": "docs/resources/error-messages-portuguese#customer-related-errors-cliente-1",
    "content": " Error code Error message Description BP-R-4 Parameter is required: name Ops, faltou preencher o seu nome. BP-R-5 Parameter is required: email Ei, faltou informar o seu e-mail.  "
  },
  {
    "title": "Error Codes in Spanish#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/error-messages-spanish",
    "content": "",
    "keywords": "Error codes"
  },
  {
    "title": "Direct API Error messages",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#direct-api-error-messages",
    "content": ""
  },
  {
    "title": "Payment page",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#payment-page",
    "content": ""
  },
  {
    "title": "Payment related errors",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#payment-related-errors",
    "content": " Error code Error message Description BP-DR-68 Field payment.directdebit.bank_account is required &#xA1;Ey!, olvidaste ingresar el n&#xFA;mero de tu cuenta. BP-DR-69 Parameter payment.directdebit.bank_agency can have 10 characters maximum &#xA1;Ups!, excediste el n&#xFA;mero de caracteres permitidos, int&#xE9;ntalo nuevamente. BP-DR-70 Field payment.directdebit.bank_agency is required &#xA1;Ey!, olvidaste llenar el campo &#x201C;agencia&#x201D;. BP-DR-71 Parameter payment.directdebit.bank_code can have 5 characters maximum Excediste el n&#xFA;mero de caracteres permitidos para el c&#xF3;digo de el banco, int&#xE9;ntalo nuevamente. BP-DR-84 Duplicate payment for the same customer and amount within {minutes} minutes La transacci&#xF3;n ha sido registrada, no es necesario volver a intentar. BP-DR-93 Error creating this payment within PSE ACH. Error code: ?. Ocurri&#xF3; un error inesperado, intentalo de nuevo en unos minutos m&#xE1;s. BP-DR-102 Too many attempts &#xA1;Ups!, algo sali&#xF3; mal, vuelve a intentarlo con otra tarjeta. BP-ZIP-1 Zipcode code not informed &#xA1;Ey!, olvidaste informar el C&#xF3;digo Postal. BP-ZIP-2 Zipcode is not valid El C&#xF3;digo Postal informado, no es v&#xE1;lido. Por favor, ingresalo nuevamente. BP-ZIP-3 The address could not be retrieved El C&#xF3;digo Postal es invalido o no existe. Por favor, prueba con otro. Card related errors (Tarjetas) # Error code Error message Description BP-DR-34 Invalid value for instalments: X (range) M&#xE9;xico: El n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Int&#xE9;ntelo de nuevo con otro n&#xFA;mero de mensualides. Otros pa&#xED;ses LatAm: El n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. Int&#xE9;ntelo de nuevo con otro n&#xFA;mero de cuotas. BP-DR-49 Field payment.creditcard.card_number is required &#xA1;Ey!, olvidaste introducir el n&#xFA;mero de tu tarjeta. BP-DR-51 Field payment.creditcard.card_name is required &#xA1;Ups!, falt&#xF3; llenar este campo. Ll&#xE9;nalo con el nombre que aparece en tu tarjeta. BP-DR-54 Field payment.creditcard.card_cvv is required &#xA1;Ups!, falto el CVV de la tarjeta. BP-DR-56 Field payment.creditcard.card_due_date is required &#xA1;Ey!, has omitido la fecha de vencimiento de la tarjeta. BP-DR-75 Card number is invalid El n&#xFA;mero de la tarjeta es invalido. Confirma si no hay un error de escritura y vuelva a intentarlo. BP-DR-83 Foreign credit card cannot be processed. Esa tarjeta no es permitida para completar la transacci&#xF3;n. BP-DR-95 Parameter payment.card.card_name must be a valid name: number isn&#x2019;t allowed &#xA1;Ups! Confirma que hallas llenado este campo con tu nombre y no con otros datos de la tarjeta. BP-DR-97 Instalment payments are not allowed for prepaid cards. M&#xE9;xico: Pagos en mensualidades no son permitidos para tarjetas de prepago. Otros pa&#xED;ses LatAm: Cuotas no son permitidas para tarjetas prepago. BP-DR-100 Instalment payments are not allowed for debit cards M&#xE9;xico: Pagos en mensualidades no son permitidos para tarjetas de d&#xE9;bito. Otros pa&#xED;ses LatAm: Cuotas no son permitidas para tarjetas de d&#xE9;bito. BP-DR-101 Card is not eligible for ecommerce &#xA1;Lo sentimos!, vuelva a intentarlo con otra tarjeta. Customer related errors (Cliente) # Error code Error message Description BP-DR-13 Field payment.name is required &#xA1;Ey!, olvidaste ingresar tu nombre. BP-DR-14 Parameter payment.name can have 100 characters maximum &#xA1;Ey!, su nombre tiene m&#xE1;s caracteres que el l&#xED;mite permitido. Busque abreviado o coloque s&#xF3;lo un apellido. BP-DR-15 Field payment.email is required &#xA1;Espera! Falto ingresar tu correo electr&#xF3;nico. BP-DR-16 Parameter payment.email can have 100 characters maximum &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-17 Field payment.email must be a valid email Disculpa, pero ese correo electr&#xF3;nico no es v&#xE1;lido. BP-DR-18 Customer is disabled on EBANX &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-19 Field payment.birth_date is required &#xA1;Ey!, no dejes de informar tu fecha de nacimiento. BP-DR-20 Field payment.birth_date must be a valid birth date (dd/MM/yyyy) La fecha de nacimiento debe seguir este formato: dd/mm/aaaa. BP-DR-21 Customer must be at least 16 years old &#xA1;Ey!, debes ser mayor de 16 a&#xF1;os para realizar esa transacci&#xF3;n. BP-DR-22 Field payment.document is required &#xA1;Lo sentimos!, pero el documento enviado no es v&#xE1;lido. &quot; BP-DR-23 Field payment.document must be a valid {document} M&#xE9;xico: CUR/RFC &quot; BP-DR-24 Field payment.zipcode is required &#xA1;Falta poco!, informa tu C&#xF3;digo Postal. BP-DR-25 Field payment.address is required &#xA1;Ey!, has olvidado informar tu domicilio. BP-DR-26 Field payment.street_number is required No dejes de informar el n&#xFA;mero de domicilio. BP-DR-27 Field payment.city is required &#xA1;Ups!, falto informar la Ciudad. BP-DR-28 Field payment.state is required &#xA1;Ups!, falto informar el Estado. BP-DR-29 Field payment.state must be a valid state code &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-31 Field payment.phone_number is required &#xA1;Ojo! Es obligatorio informar un n&#xFA;mero de tel&#xE9;fono. BP-DR-32 Parameter payment.phone_number must be a valid phone number El n&#xFA;mero de tel&#xE9;fono que informaste no es v&#xE1;lido. BP-DR-39 CPF, name, and birth date do not match: X &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-40 Customer reached payment limit: X &#xA1;Ups!, la transacci&#xF3;n que deseas realizar ultrapasa el valor l&#xED;mite permitido por EBANX. Intenta realizar una transacci&#xF3;n de menor valor. BP-DR-42 Field payment.responsible is required Como tu transacci&#xF3;n es con (Documento de cada pa&#xED;s), es necesario se&#xF1;alas al responsable. BP-DR-43 Field payment.responsible.name is required &#xA1;Ey!, olvidaste ingresar tu nombre. BP-DR-44 Field payment.responsible.document is required &#xA1;Ups!, olvidaste informar el n&#xFA;mero de tu documento. BP-DR-45 Field payment.responsible.birth_date is required &#xA1;Ey!, olvidaste informar la fecha de tu nacimiento. BP-DR-46 Company responsible&#x2019;s CPF, name, and birthdate do not match: (.*) &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-90 This customer is in our blacklist: {reason}. &#xA1;Ups!, ocurri&#xF3; alg&#xFA;n problema. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para m&#xE1;s informaci&#xF3;n. BP-DR-98 Customer e-mail is associated with payments for {customer.country}, not {payment.country}, please use another e-mail &#xA1;Ojo! El pa&#xED;s desde el cual realizas tu pago debe corresponder al pa&#xED;s donde resides. BP-DR-103 Customer disabled &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. Payment page # Cards related errors (Tarjetas) # Error code Error message Description BP-R-12 Installments are limited to a quantity of X. Value provided: X M&#xE9;xico: &#xA1;Lo sentimos!, el n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Otros pa&#xED;ses LatAm: &#xA1;Lo sentimos!, el n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. BP-R-13 The amount of each installments must be greater than or equal to R$ X. Value calculated: R$ X / X = X M&#xE9;xico: El valor de cada mensualidad debe ser igual o mayor a $X. Otros pa&#xED;ses LatAm: El valor de cada cuota debe ser igual o mayor a $X. BP-R-28 The amount of installments is larger than the maximum allowed for merchant M&#xE9;xico: &#xA1;Ups! El n&#xFA;mero de mensualidades seleccionado es mayor al permitido. Otros pa&#xED;ses LatAm: &#xA1;Ups! El n&#xFA;mero de cuotas seleccionado es mayor al permitido. BP-R-29 Invalid value for installments M&#xE9;xico: &#xA1;Lo sentimos!, el n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Otros pa&#xED;ses LatAm: &#xA1;Lo sentimos!, el n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. BP-R-30 The amount of instalments is not allowed &#x2013; blocked values are: {payment.api.instalments.blocked} M&#xE9;xico: &#xA1;Lo sentimos!, el n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Otros pa&#xED;ses LatAm: &#xA1;Lo sentimos!, el n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. Customer related errors (Cliente) # Error code Error message Description BP-R-4 Parameter is required: name &#xA1;Ups!, falto informar tu nombre. BP-R-5 Parameter is required: email &#xA1;Ey!, falto informar tu correo electr&#xF3;nico.  "
  },
  {
    "title": "Card related errors (Tarjetas)",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#card-related-errors-tarjetas",
    "content": " Error code Error message Description BP-DR-34 Invalid value for instalments: X (range) M&#xE9;xico: El n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Int&#xE9;ntelo de nuevo con otro n&#xFA;mero de mensualides. Otros pa&#xED;ses LatAm: El n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. Int&#xE9;ntelo de nuevo con otro n&#xFA;mero de cuotas. BP-DR-49 Field payment.creditcard.card_number is required &#xA1;Ey!, olvidaste introducir el n&#xFA;mero de tu tarjeta. BP-DR-51 Field payment.creditcard.card_name is required &#xA1;Ups!, falt&#xF3; llenar este campo. Ll&#xE9;nalo con el nombre que aparece en tu tarjeta. BP-DR-54 Field payment.creditcard.card_cvv is required &#xA1;Ups!, falto el CVV de la tarjeta. BP-DR-56 Field payment.creditcard.card_due_date is required &#xA1;Ey!, has omitido la fecha de vencimiento de la tarjeta. BP-DR-75 Card number is invalid El n&#xFA;mero de la tarjeta es invalido. Confirma si no hay un error de escritura y vuelva a intentarlo. BP-DR-83 Foreign credit card cannot be processed. Esa tarjeta no es permitida para completar la transacci&#xF3;n. BP-DR-95 Parameter payment.card.card_name must be a valid name: number isn&#x2019;t allowed &#xA1;Ups! Confirma que hallas llenado este campo con tu nombre y no con otros datos de la tarjeta. BP-DR-97 Instalment payments are not allowed for prepaid cards. M&#xE9;xico: Pagos en mensualidades no son permitidos para tarjetas de prepago. Otros pa&#xED;ses LatAm: Cuotas no son permitidas para tarjetas prepago. BP-DR-100 Instalment payments are not allowed for debit cards M&#xE9;xico: Pagos en mensualidades no son permitidos para tarjetas de d&#xE9;bito. Otros pa&#xED;ses LatAm: Cuotas no son permitidas para tarjetas de d&#xE9;bito. BP-DR-101 Card is not eligible for ecommerce &#xA1;Lo sentimos!, vuelva a intentarlo con otra tarjeta.  "
  },
  {
    "title": "Customer related errors (Cliente)",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#customer-related-errors-cliente",
    "content": " Error code Error message Description BP-DR-13 Field payment.name is required &#xA1;Ey!, olvidaste ingresar tu nombre. BP-DR-14 Parameter payment.name can have 100 characters maximum &#xA1;Ey!, su nombre tiene m&#xE1;s caracteres que el l&#xED;mite permitido. Busque abreviado o coloque s&#xF3;lo un apellido. BP-DR-15 Field payment.email is required &#xA1;Espera! Falto ingresar tu correo electr&#xF3;nico. BP-DR-16 Parameter payment.email can have 100 characters maximum &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-17 Field payment.email must be a valid email Disculpa, pero ese correo electr&#xF3;nico no es v&#xE1;lido. BP-DR-18 Customer is disabled on EBANX &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-19 Field payment.birth_date is required &#xA1;Ey!, no dejes de informar tu fecha de nacimiento. BP-DR-20 Field payment.birth_date must be a valid birth date (dd/MM/yyyy) La fecha de nacimiento debe seguir este formato: dd/mm/aaaa. BP-DR-21 Customer must be at least 16 years old &#xA1;Ey!, debes ser mayor de 16 a&#xF1;os para realizar esa transacci&#xF3;n. BP-DR-22 Field payment.document is required &#xA1;Lo sentimos!, pero el documento enviado no es v&#xE1;lido. &quot; BP-DR-23 Field payment.document must be a valid {document} M&#xE9;xico: CUR/RFC &quot; BP-DR-24 Field payment.zipcode is required &#xA1;Falta poco!, informa tu C&#xF3;digo Postal. BP-DR-25 Field payment.address is required &#xA1;Ey!, has olvidado informar tu domicilio. BP-DR-26 Field payment.street_number is required No dejes de informar el n&#xFA;mero de domicilio. BP-DR-27 Field payment.city is required &#xA1;Ups!, falto informar la Ciudad. BP-DR-28 Field payment.state is required &#xA1;Ups!, falto informar el Estado. BP-DR-29 Field payment.state must be a valid state code &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-31 Field payment.phone_number is required &#xA1;Ojo! Es obligatorio informar un n&#xFA;mero de tel&#xE9;fono. BP-DR-32 Parameter payment.phone_number must be a valid phone number El n&#xFA;mero de tel&#xE9;fono que informaste no es v&#xE1;lido. BP-DR-39 CPF, name, and birth date do not match: X &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-40 Customer reached payment limit: X &#xA1;Ups!, la transacci&#xF3;n que deseas realizar ultrapasa el valor l&#xED;mite permitido por EBANX. Intenta realizar una transacci&#xF3;n de menor valor. BP-DR-42 Field payment.responsible is required Como tu transacci&#xF3;n es con (Documento de cada pa&#xED;s), es necesario se&#xF1;alas al responsable. BP-DR-43 Field payment.responsible.name is required &#xA1;Ey!, olvidaste ingresar tu nombre. BP-DR-44 Field payment.responsible.document is required &#xA1;Ups!, olvidaste informar el n&#xFA;mero de tu documento. BP-DR-45 Field payment.responsible.birth_date is required &#xA1;Ey!, olvidaste informar la fecha de tu nacimiento. BP-DR-46 Company responsible&#x2019;s CPF, name, and birthdate do not match: (.*) &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;. BP-DR-90 This customer is in our blacklist: {reason}. &#xA1;Ups!, ocurri&#xF3; alg&#xFA;n problema. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para m&#xE1;s informaci&#xF3;n. BP-DR-98 Customer e-mail is associated with payments for {customer.country}, not {payment.country}, please use another e-mail &#xA1;Ojo! El pa&#xED;s desde el cual realizas tu pago debe corresponder al pa&#xED;s donde resides. BP-DR-103 Customer disabled &#xA1;Ups! No fue posible completar tu transacci&#xF3;n. Entra en contacto con EBANX ( https://ayuda.ebanx.com/hc/es-mx ) para entender lo que pas&#xF3;.  "
  },
  {
    "title": "Cards related errors  (Tarjetas)",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#cards-related-errors--tarjetas",
    "content": " Error code Error message Description BP-R-12 Installments are limited to a quantity of X. Value provided: X M&#xE9;xico: &#xA1;Lo sentimos!, el n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Otros pa&#xED;ses LatAm: &#xA1;Lo sentimos!, el n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. BP-R-13 The amount of each installments must be greater than or equal to R$ X. Value calculated: R$ X / X = X M&#xE9;xico: El valor de cada mensualidad debe ser igual o mayor a $X. Otros pa&#xED;ses LatAm: El valor de cada cuota debe ser igual o mayor a $X. BP-R-28 The amount of installments is larger than the maximum allowed for merchant M&#xE9;xico: &#xA1;Ups! El n&#xFA;mero de mensualidades seleccionado es mayor al permitido. Otros pa&#xED;ses LatAm: &#xA1;Ups! El n&#xFA;mero de cuotas seleccionado es mayor al permitido. BP-R-29 Invalid value for installments M&#xE9;xico: &#xA1;Lo sentimos!, el n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Otros pa&#xED;ses LatAm: &#xA1;Lo sentimos!, el n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible. BP-R-30 The amount of instalments is not allowed &#x2013; blocked values are: {payment.api.instalments.blocked} M&#xE9;xico: &#xA1;Lo sentimos!, el n&#xFA;mero de mensualidades seleccionado no est&#xE1; disponible. Otros pa&#xED;ses LatAm: &#xA1;Lo sentimos!, el n&#xFA;mero de cuotas seleccionado no est&#xE1; disponible.  "
  },
  {
    "title": "Customer related errors (Cliente)",
    "type": 1,
    "pageTitle": "Error Codes in Spanish#",
    "url": "docs/resources/error-messages-spanish#customer-related-errors-cliente-1",
    "content": " Error code Error message Description BP-R-4 Parameter is required: name &#xA1;Ups!, falto informar tu nombre. BP-R-5 Parameter is required: email &#xA1;Ey!, falto informar tu correo electr&#xF3;nico.  "
  },
  {
    "title": "Error Codes#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/errorCodes",
    "content": "",
    "keywords": "Error codes"
  },
  {
    "title": "About EBANX error codes.",
    "type": 1,
    "pageTitle": "Error Codes#",
    "url": "docs/resources/errorCodes#about-ebanx-error-codes",
    "content": "Learn about error codes and what they mean. This page contains codes and descriptions of all errors that may occur when you communicate with the Platforms API. If after reading this section you are still not sure how to interpret a specific error, contact the Support Team. Don’t waste your time (or money) with error codes When an API call fails, EBANX will return a JSON object containing the error details below: Copy{ \"status\": \"ERROR\", \"status_code\": \"BP-SA-1\", \"status_message\": \"Parameter integration_key not informed\"} That way, you confirm where the error is and can correct quickly. Observe the following table and verify the “status_code” that appears, besides the error messages (“status_message”) that EBANX uses, with a brief description of it. That way, you confirm where the error is and can correct quickly. Observe the following links for each Integration Method on the API – EBANX Direct and EBANX Payment Page. "
  },
  {
    "title": "API Error codes",
    "type": 1,
    "pageTitle": "Error Codes#",
    "url": "docs/resources/errorCodes#api-error-codes",
    "content": " Payments related erros Card related errors Customer related errors General errors Error codes, messages and descriptions search clear save_alt Code arrow_downward Error message arrow_downward Description arrow_downward BP-CH-1 Payment type group is not active: {group_code} Some payment method is not enabled. Contact our Integration Team. BP-DR-0 Payment already exists with merchant_payment_code: X (created on X, status is X) There can be only one payment in the system with the same merchant payment code. BP-DR-2 Field payment is required The field was not filled. BP-DR-3 Field payment.currency_code is required The field was not filled. BP-DR-5 Field payment.amount_total is required The field was not filled. BP-DR-6 Amount reported is less than the minimum amount The payment amount is too low. BP-DR-7 Amount must be less than X The payment amount is too high. BP-DR-8 If passed, amount_itens + amount_shipping must be equal to amount_total The amount sent was not right. BP-DR-9 Field payment.merchant_payment_code is required The field was not filled. BP-DR-10 Parameter merchant_payment_code can have 40 characters maximum The parameter has more characters than the limit allowed. BP-DR-11 Parameter payment.order_number can have 40 characters maximum The parameter has more characters than the limit allowed. BP-DR-12 Parameter X can have 20 characters maximum The parameter has more characters than the limit allowed. BP-DR-35 Invalid payment_type_code: X The payment method is not enabled. Contact our Integration Team. BP-DR-36 Payment type is not active The payment method is not enabled. Contact our Integration Team. BP-DR-38 Payment type not allowed in Direct API (full mode): X Not all payment types are allowed in full mode, please refer to documentation. BP-DR-41 Field payment.person_type must contain a valid person_type The parameter sent was not valid. BP-DR-47 Parameter payment.directdebit.bank_account can have 10 characters maximum The parameter has more characters than the limit allowed. BP-DR-50 Payment type not allowed in Direct API (full mode): {payment_type_code} The payment method is not allowed. Contact our Integration Team. BP-DR-57 Parameter is in an invalid format: due_date. Correct Format: dd/MM/yyyy The parameter was not sent on the right format. BP-DR-58 Parameter is invalid: due_date &#x2013; exceeds more than {days} days The parameter &#x2018;due_date&#x2019; exceeds the numbers of days that is in the configuration. BP-DR-59 Parameter is invalid: due_date &#x2013; less than permitted The parameter &#x2018;due_date&#x2019; is too short. BP-DR-68 Field payment.directdebit.bank_account is required The field was not filled. BP-DR-69 Parameter payment.directdebit.bank_agency can have 10 characters maximum The parameter has more characters than the limit allowed. BP-DR-70 Field payment.directdebit.bank_agency is required The field was not filled. BP-DR-71 Parameter payment.directdebit.bank_code can have 5 characters maximum The parameter has more characters than the limit allowed. BP-DR-72 Field payment.directdebit.bank_code is required The field was not filled. BP-DR-73 Field payment.directdebit is required for this payment type The field was not filled. BP-DR-77 Country is not enabled The country is not available on your account. Contact our Integration Team. BP-DR-78 Country not enabled for merchant The country is not available on your account. Contact our Integration Team. BP-DR-80 It was not possible to generate CIP. Please try again. Some error happened on the transaction. BP-DR-81 Currency code {currency_code} not allowed for payment type code: {payment_type_code}. The supplied currency cannot be used for the chosen payment method. BP-DR-82 Parameter payment.note can have 200 characters maximum. The note parameter must have 200 characters or less. BP-DR-84 Duplicate payment for the same customer and amount within {minutes} minutes. Lock for preventing customer to be billed twice for the same transaction. BP-DR-85 Field payment.sub_account is required. The field was not filled. BP-DR-86 Parameter is invalid: payment.sub_account. The parameter sent was not valid. BP-DR-87 Field payment.sub_account.name is required. The field was not filled. BP-DR-88 Field payment.sub_account.image_url is required. The field was not filled. BP-DR-91 Field payment.institution_code is required. The field was not filled. BP-DR-92 Field payment.institution_code is not a valid bank code. The parameter sent was not valid. BP-DR-93 Error creating this payment within PSE ACH. Error code: ?. Something went wrong with the payment operation. BP-DR-99 Field payment.sub_account.image_url must be https The image URL that you are trying to send must be with https. BP-DR-102 Too many attempts The customer tried too many times the same transaction in a short period of time. BP-DR-105 Missing Parameter for Flow method Parameter payment.flow_payment_method is required. You read more about HERE. BP-DR-118 Invalid Sub Account data The Sub Account sent in request is not valid. BP-DR-130 For 3DS 2.0 transactions, field payment.card.threeds_cryptogram is required The Cryptogram field was not filled. BP-DR-131 For 3DS 2.0 transactions, field payment.card.threeds_eci is required The ECI field was not filled. BP-DR-132 For 3DS 2.0 transactions, field payment.card.threeds_cryptogram and payment.card.threeds_eci are required The Cryptogram and ECI fields were not filled. BP-REF-1 Parameter hash not informed The field was not filled. BP-REF-2 Payment not found for merchant, hash: X The payment was not found. Contact our Integration Team. BP-REF-3 Parameter operation not informed (must be request or cancel) The field was not filled. BP-REF-4 Parameter amount not informed The field was not filled. BP-REF-5 Refund amount must be positive You are trying to send a negative refund. BP-REF-6 Refund amount is greater than payment amount: X and X The refund and the payment amount does not match. BP-REF-7 Payment status is not CO, cannot be refunded: X The payment status is not CO (Confirmed) so it cannot be refunded. BP-REF-8 Payment has chargebacks, cannot be refunded: X The payments has chargebacks so it cannot be refunded. BP-REF-9 Pending refund amount for payment would be greater than payment amount: X The amount of the refund and the payment does not match. BP-REF-10 Parameter description not informed The field was not filled. BP-REF-11 Parameters not informed: refund_id or merchant_refund_code optionally generated by the merchant and also be used to identify a refund. BP-REF-12 Refund not found with id = X and merchant_refund_code = Y See above BP-REF-13 Refund is already cancelled Refund is already cancelled BP-REF-14 Refund is already confirmed Refund is already confirmed BP-REF-15 Invalid operation: X You are trying an invalid operation. BP-REF-16 Parameter merchant_refund_code can have 20 characters maximum The parameter has more characters than the limit allowed. BP-REF-17 A refund already exists with this merchant_refund_code: X There is already a refund with this merchant code. BP-REF-18 Insufficient balance to create new refund. please contact finance@ebanx.com Insufficient balance. BP-REF-19 Credit card payment&#x2019;s open date is older than 85 days ago. The payment is too old. BP-REF-20 Request cannot contain both payment.card and payment.creditcard entries. Only one parameter should be used: payment.creditcard or payment.card. BP-REF-21 Invalid Transaction. Customer document blocked by Compliance. BP-CAN-1 Parameter hash not informed The field was not filled. BP-CAN-2 Payment not found for merchant The payment was not found for this merchant. Please check your parameter. BP-CAN-3 Payment is already cancelled Payment is already cancelled. BP-CAN-4 Payment cannot be cancelled Payment cannot be cancelled. BP-US-1 Parameter hash not informed The field was not filled. BP-US-2 Payment not found for merchant, hash: X The payment was not found for this merchant. Please check your parameter. BP-US-3 Parameter status not informed The field was not filled. BP-US-4 Status must be either CO or CA The status must be either CO or CA BP-US-5 Operation NOT allowed in production mode The updateStatus operation can only be used in the test environment. In production mode, the status changes are performed exclusively by the EBANX system. BP-Q-1 Parameters hash or merchant_payment_code not informed The field was not filled. BP-Q-2 Payment not found for merchant The payment was not found for this merchant. Please check your parameter. BP-CAP-1 Parameters hash or merchant_payment_code not informed The field was not filled. BP-CAP-2 Payment not found for merchant The payment was not found for this merchant. Please check your parameter. BP-CAP-3 Payment cannot be captured, status is: CA The payment cannot be captured. BP-CAP-4 Payment has already been captured, status is: CO The payment has already been captured. BP-CAP-5 Payment cannot be captured, status is: OP The payment cannot be captured. BP-CAP-6 Payment cannot be captured, payment_type_code is: The payment cannot be captured. BP-CAP-7 Payment cannot be captured, auto_capture is: true The payment cannot be captured. BP-CAP-8 Payment cannot be captured, capture_available is: false The payment cannot be captured. BP-CAP-9 Payment cannot be captured, pre_approved is: false The payment cannot be captured. BP-CAP-10 Invalid amount The amount that you are trying to use is invalid. BP-CAP-11 Partial capture not available Partial capture not available. BP-CAP-12 Payment cannot be captured, amount must be equal or less than {currency_code} {max_amount} The payment amount exceeds the limit. BP-REF-CAN-1 Payment can not be cancelled and can not generate a refund. Payment status is CA Payment can not be cancelled and can not generate a refund. BP-DMO-1 Payment not found for merchant: merchant_payment_code={merchant_payment_code} The payment was not found for this merchant. Please check your parameter. BP-DMO-2 Only payments with status OP can be modified (your payment status is {status}) Only payments with status OP can be modified. BP-DOC-01 Invalid document: {document} Invalid document. BP-DOC-02 Invalid currency code: ADS, expected any of USD, BRL, EUR, MXN, PEN. The currency sent on the request was not valid. BP-ZIP-1 Zipcode code not informed The field was not filled. BP-ZIP-2 Zipcode is not valid The parameter sent was not valid. BP-ZIP-3 The address could not be retrieved The address could not be retrieved. BP-DR-111 Could not validate document. Please try again The document could not be validated.  "
  },
  {
    "title": "Payment page Error codes",
    "type": 1,
    "pageTitle": "Error Codes#",
    "url": "docs/resources/errorCodes#payment-page-error-codes",
    "content": " Payments related erros Card related errors Customer related errors General errors Error codes, messages and descriptions search clear save_alt Code arrow_downward Error message arrow_downward Description arrow_downward BP-R-1 Parameter is required: currency_code The field was not filled. BP-R-2 Parameter is required: amount The field was not filled. BP-R-3 Parameter is required: merchant_payment_code The field was not filled. BP-R-6 Parameter payment_type_code not informed The field was not filled. BP-R-7 Payment type is not active The payment type is not enabled on your account. Contact our Integration Team. BP-R-8 Invalid payment_type_code The parameter sent was not valid. BP-R-9 Amount must be positive: X The amount is being sent if a minus(-). Check your request. BP-R-10 Amount must be greater than X The amount is too low. BP-R-11 Payment type does not support instalments You are trying to apply instalment on a payment type which not support it. For example: boleto. BP-R-14 Parameter merchant_payment_code can have 20 characters maximum The parameter has more characters than the limit allowed. BP-R-15 Parameter order_number can have 40 characters maximum The parameter has more characters than the limit allowed. BP-R-16 Parameter user_value_1 can have 20 characters maximum The parameter has more characters than the limit allowed. BP-R-16 Parameter user_value_2 can have 20 characters maximum The parameter has more characters than the limit allowed. BP-R-16 Parameter user_value_3 can have 20 characters maximum The parameter has more characters than the limit allowed. BP-R-16 Parameter user_value_4 can have 20 characters maximum The parameter has more characters than the limit allowed. BP-R-16 Parameter user_value_5 can have 20 characters maximum The parameter has more characters than the limit allowed. BP-R-17 Payment status is not OP (open): X This payment does not have the OP status. BP-R-18 Parameter is invalid: person_type The parameter sent was not valid. BP-R-19 Checkout by CNPJ is not enabled Checkout by CNPJ is not enabled on your account. Contact our Integration Team if you want to change it. BP-R-20 Parameter is in an invalid format: due_date. Correct Format: dd/MM/yyyy The parameter sent was not valid. BP-R-21 Parameter is invalid: due_date &#x2013; exceeds more than X days The parameter sent was not valid. BP-R-22 Parameter is invalid: due_date &#x2013; less than permitted The parameter sent was not valid. BP-R-24 Parameter is required: country The field was not filled. BP-R-25 Country is not enabled The country that you are trying to make a payment is not enabled. Contact our Integration Team. BP-R-26 Country is not enabled for merchant The country that you are trying to make a payment is not enabled on your account. Contact our Integration Team. BP-R-27 Payment type is not enabled for merchant The payment type that you are trying to make a payment is not enabled. Contact our Integration Team. BP-R-32 Amount must be less than X The amount is too high.  "
  },
  {
    "title": "Understanding transaction_status in credit card transactions",
    "type": 1,
    "pageTitle": "Error Codes#",
    "url": "docs/resources/errorCodes#understanding-transaction_status-in-credit-card-transactions",
    "content": "The credit card transaction status will be returned in the response of the direct and query API methods in the payment.transaction_status node. Copy{ \"payment\": { \"transaction_status\": { \"acquirer\": \"EBANX\", \"code\": \"NOK\", \"description\": \"Not accepted\" } }} cautionYou must not rely on these codes to confirm a payment, but you can use them to improve the user experience on your application.  Status Description Accepted The transaction was accepted. Not accepted The transaction was not approved. Advise customer to contact the credit card issuer. Insufficient funds The credit card has no funds at the time of the transaction. Advise customer to use another credit card. Incorrect customer data The customer data is incorrect. Advise customer to review their data. Expired card The card has already expired. Advise customer to use another credit card. Security code mismatch The security code is incorrect. Advise customer to review the security code. Invalid card or card type The credit card is an invalid, nonexistent or unblocked card. Advise contacting the credit card issuer. Invalid card number The credit card number is invalid. Advise customer to review the credit card data. 3-D Secure required 3-D Secure is enabled for the credit card. Advise customer to use another credit card. Timeout The connection timed out at some point of the stream. Retry at any time. No response from acquirer Acquirer did not respond the request. Retry at any time. Acquirer response error Acquirer response has an error. Retry at any time. Broken communication The connection was broken at some point of the stream. Retry at any time Communication mismatch Bad communication between EBANX and the acquirer. Retry at any time. Cannot fulfill transaction The transaction could not be fulfilled or was already executed. Do not retry. Cannot cancel transaction The transaction could not be cancelled. Do not retry Invalid due date The credit card due date is invalid. Advise customer to review the credit card data. Inactive card The credit card is not active. Retry at any time. Refunded An issue has been issued for this credit card. Do not retry. Unknown acquirer error The acquirer experienced a strange error. Retry at any time. High risk transaction The transaction was declined for having a high probability of being fraudulent. Issuer does not support installments The selected number of installments is not available for this card. Cannot process transaction at this moment Acquirer could not process the request at the moment. Retry at any time.  "
  },
  {
    "title": "Localized error codes",
    "type": 1,
    "pageTitle": "Error Codes#",
    "url": "docs/resources/errorCodes#localized-error-codes",
    "content": "We've prepared a JSON file with localized error messages. You can download it here. Alternatively, you can check this two pages: Spanish error messagesPortuguese error messages "
  },
  {
    "title": "Still need help?",
    "type": 1,
    "pageTitle": "Error Codes#",
    "url": "docs/resources/errorCodes#still-need-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Frequently Asked Questions#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/faqs",
    "content": "",
    "keywords": "FAQ Frequently Asked Questions"
  },
  {
    "title": "Getting Started",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#getting-started",
    "content": ""
  },
  {
    "title": "Going Live",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#going-live",
    "content": ""
  },
  {
    "title": "Payments",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#payments",
    "content": ""
  },
  {
    "title": "Payment Methods",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#payment-methods",
    "content": ""
  },
  {
    "title": "Credit Card Payments",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#credit-card-payments",
    "content": ""
  },
  {
    "title": "Recurring Payments",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#recurring-payments",
    "content": ""
  },
  {
    "title": "Handling Notification",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#handling-notification",
    "content": ""
  },
  {
    "title": "How do I get the integration keys?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#how-do-i-get-the-integration-keys",
    "content": "Once you have a Business Account set up, you can find your integration keys on your EBANX Dashboard settings. For further details, you can refer to this file. "
  },
  {
    "title": "How do I get Sandbox account?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#how-do-i-get-sandbox-account",
    "content": "If you are in touch with any of our Business Development representatives, you can ask them to provide you access to our EBANX Dashboard in Sandbox (test mode). Otherwise, you can access dashboard.ebanx.com and register to get access to it. "
  },
  {
    "title": "How do I get started with EBANX?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#how-do-i-get-started-with-ebanx",
    "content": "You can connect your Commerce store to a EBANX account and start increasing your sales by offering the most relevant payment methods across Latina America . To learn more, visit here. "
  },
  {
    "title": "What payment methods can I accept through EBANX?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-payment-methods-can-i-accept-through-ebanx",
    "content": "Once you are integrated with EBANX, your company can access new consumers located in the fastest growing markets in Latin America. With just one integration, you can offer local payment options to consumers from Brazil, Mexico, Argentina, Colombia, Chile, Peru and Ecuador, significantly increasing sales throughout the region. See the full list of available payment methods here. "
  },
  {
    "title": "What is the difference between the Integration Key and the Public Integration Key?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-is-the-difference-between-the-integration-key-and-the-public-integration-key",
    "content": "The Integration Key is used to make requests to our API operations. Keep it safe and do not expose this information. The Public Integration Key is used to make token operations from your customer’s client (browser, app, etc.). By doing this, you don’t have to deal directly with your customer’s credit card sensitive information. "
  },
  {
    "title": "I am having problems with my integration key, such as invalid integration key error. What can I do?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#i-am-having-problems-with-my-integration-key-such-as-invalid-integration-key-error-what-can-i-do",
    "content": "Please check that you are using the right integration key in the right environment. A common mistake is to use a test integration key in the production environment and vice-versa. If the error persists, please contact our integration@ebanx.com. "
  },
  {
    "title": "I just received my live integration keys. What should I do now?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#i-just-received-my-live-integration-keys-what-should-i-do-now",
    "content": "First, you should replace your old test integration key with the new “live” key, so that all payments can be redirected to your live account. Also, you might need to turn off the test mode in your application (if necessary) and configure your new account with your logo, Notification URL, credentials, etc., in your account in our Dashboard. "
  },
  {
    "title": "When I receive my live credentials, will I lose my sandbox credentials?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#when-i-receive-my-live-credentials-will-i-lose-my-sandbox-credentials",
    "content": "Your sandbox credentials will not be deleted. You can still use them if you want to run some tests. Also, if you’re planning on enabling new features, such as payments in new countries, you will need to use your sandbox account to test them. "
  },
  {
    "title": "I have finished my tests, can I go into production?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#i-have-finished-my-tests-can-i-go-into-production",
    "content": "Not quite yet! Once you have completed your tests, please contact us through integration@ebanx.com and we will run some tests of our own to check if your integration is working properly(don’t worry, this requests is usually handled very quickly!). After that, we will create your production account and send you your credentials. "
  },
  {
    "title": "How soon can I get my live keys?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#how-soon-can-i-get-my-live-keys",
    "content": "After getting all your integration ready, please let us know through integration@ebanx.com so we can do some testing and send your live keys as soon as possible. "
  },
  {
    "title": "I created additional users in the EBANX Dashboard for my sandbox account. Are those users available on the new live account?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#i-created-additional-users-in-the-ebanx-dashboard-for-my-sandbox-account-are-those-users-available-on-the-new-live-account",
    "content": "No. The live account does not use any of the previous Dashboard users. If you need those, you’ll need to create them again or let us know, ok? "
  },
  {
    "title": "I can’t see my LIVE payments on the Dashboard. Why?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#i-cant-see-my-live-payments-on-the-dashboard-why",
    "content": "In your EBANX Dashboard, click the “Sandbox mode” button at the bottom left side and make sure that it is disabled. This way, you switch your view to your live account and you will be able to see your live payments. "
  },
  {
    "title": "What are the response codes EBANX return to Merchant in case of payment failure?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-are-the-response-codes-ebanx-return-to-merchant-in-case-of-payment-failure",
    "content": "Upon the credit card payment rejection the EBANX API may return 2 types of errors to Merchant: Soft declined and Hard declined. Those messages / codes are usually returned right after the payment rejection and you can query the payment to retrieve more details. 1 – Soft declined: Is executed by a credit card processor when the issuing bank refuses the transaction because something has gone wrong in the authorization process. I.e insufficient funds. You can get more details about our responses here. 2 – Hard declined: Pre defined EBANX business rules that can decline a transaction. I.e the payment amount has exceed the maximum amount allowed for that specific payment type. You can get more details about our error codes here. "
  },
  {
    "title": "I want to have more payment methods enabled on my account and/or add new countries",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#i-want-to-have-more-payment-methods-enabled-on-my-account-andor-add-new-countries",
    "content": "Once you have nished testing these new features, please contact your account manager or business developer. After your documentation is ready for those new features, we will enable them on your account. "
  },
  {
    "title": "What is the difference between the PIN and payment Hash code?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-is-the-difference-between-the-pin-and-payment-hash-code",
    "content": "Both PIN and Hash are the unique payment ID that is generated in EBANX once a payment is created. The PIN can be used to search for a payment in the EBANX Dashboard and is also showed in the user receipt. The payment Hash code is used to retrieve payment details using our query operation (for Direct API and Checkout integrations) and also to cancel a payment and request refunds. "
  },
  {
    "title": "I’m getting an error message saying that the payment type is not enabled for a merchant",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#im-getting-an-error-message-saying-that-the-payment-type-is-not-enabled-for-a-merchant",
    "content": "If this error happens in your sandbox account, you can contact us through integration@ebanx.com informing us your merchant name and the issue will be quickly resolved. If you are in your production account, please make sure that the payment method that you are trying to use is included in the agreement that you signed. You can contact your account manager or business development representative to solve this. "
  },
  {
    "title": "One of my customers tried to make a payment and received the error “BP-DR-98 – Customer country does not match”",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#one-of-my-customers-tried-to-make-a-payment-and-received-the-error-bp-dr-98--customer-country-does-not-match",
    "content": "What happened is that your customer probably has an email registered in a specific country (willian@gmail.com in Brazil, for example) and tried to use the same email to make a payment in a different country. To solve this, you can ask your customer to use another email. "
  },
  {
    "title": "What is the difference between payment.order_number and payment.merchant_payment_code?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-is-the-difference-between-paymentorder_number-and-paymentmerchant_payment_code",
    "content": "The Merchant Payment code is a unique identifier of your payment in our system; our system will not generate new payments with a merchant payment code that already exists on your account. The order number is not an unique identifier so that you can create payments with the same order number. You can use this field to identify a group of payments, like retries of a customer at the same checkout. "
  },
  {
    "title": "Can I disable the emails that EBANX sends to my customers?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#can-i-disable-the-emails-that-ebanx-sends-to-my-customers",
    "content": "Unfortunately you can’t. The emails that EBANX sends out to customers have important information about their payments that needs to be sent for compliance and legal reasons. "
  },
  {
    "title": "What is the different between payment and payout?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-is-the-different-between-payment-and-payout",
    "content": "Payment is how to charge your customer on your store. Payout is how you make a payment for your payee. "
  },
  {
    "title": "I’m getting an error message saying that the payment type is not enabled for a merchant. Why?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#im-getting-an-error-message-saying-that-the-payment-type-is-not-enabled-for-a-merchant-why",
    "content": "If this error happens in your sandbox account, you can contact us through integration@ebanx.com informing us your merchant name and the issue will be quickly resolved. If you are in your production account, please make sure that the payment method that you are trying to use is included in the agreement that you signed. You can contact your account manager, or business developer, for this information. "
  },
  {
    "title": "Do I need an SSL certificate?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#do-i-need-an-ssl-certificate",
    "content": "Having an SSL certificate for your checkout page decreases the chances of your customers giving up on their purchase since this has been proved to make customers feel safe about entering their payment information. If you are going to process credit card payments using the Direct API integration, SSL is mandatory. If your website does not have SSL, you can use our EBANX Payment Page. "
  },
  {
    "title": "Do I need to keep the customer’s card information?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#do-i-need-to-keep-the-customers-card-information",
    "content": "We will retrieve the customer’s credit card information based on the token. We strongly suggest to send the token + CVV as this may improve your approval rates. "
  },
  {
    "title": "Do recurring payments work automatically?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#do-recurring-payments-work-automatically",
    "content": "No, they don’t. Every time you want to charge your customer you have to make a new request (for instance, not just in the first month, but every month/quarter/year, etc). How can you do that? See our documentation on how to create recurring payments HERE. "
  },
  {
    "title": "How long is the token for the recurring payment valid for?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#how-long-is-the-token-for-the-recurring-payment-valid-for",
    "content": "Tokens expire after 14 months of their last use. "
  },
  {
    "title": "For recurring payments, can recurring periods be set to weekly/monthly/annually?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#for-recurring-payments-can-recurring-periods-be-set-to-weeklymonthlyannually",
    "content": "You can choose whichever recurring profile works best for your business: Weekly/Month/Annually/Daily. You just need to make a request using the token that you generated whenever you want to charge your customer and you control when you want to do that. Please just remember to communicate with your customer about those charges. "
  },
  {
    "title": "If the recurring payments fail to charge customer’s card for whatever reasons (such as expired card, insufficient funds or wrong expiration date), how can I get information about failed transactions using an API so I can stop a customer’s subscription and notify them about the situation?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#if-the-recurring-payments-fail-to-charge-customers-card-for-whatever-reasons-such-as-expired-card-insufficient-funds-or-wrong-expiration-date-how-can-i-get-information-about-failed-transactions-using-an-api-so-i-can-stop-a-customers-subscription-and-notify-them-about-the-situation",
    "content": "If the transaction does not go through, we will specify the reason for the failure in our request response. We use the following transaction status codes: OK: The transaction amount was approved. NOK: The acquirer did not approve the transaction. The customer must contact the issuer to check if there is any issue with the credit card. RETRY: Something went wrong with the process. You can retry with the same data. We recommend you to try 3 more times on different periods of time (first try, then second try after 2 hours after the first, etc). You can see more of these status HERE "
  },
  {
    "title": "How can I cancel a customer’s recurring payments after they have been set up?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#how-can-i-cancel-a-customers-recurring-payments-after-they-have-been-set-up",
    "content": "If you do not want to charge a customer you don’t need to turn recurring payments off, you can just stop requests with that token to EBANX. "
  },
  {
    "title": "What are the Notifications and how do they work?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-are-the-notifications-and-how-do-they-work",
    "content": "When a payment status is changed, EBANX sends a notification to your system through the Notification URL that you have set in your Dashboard. Your system receives the notification then call our Query Operation. By doing this, you will know the status and more information about that payment. After you get the notification, you must output a response (it can be any string that you like) indicating that the notification was successful. You can check your notifications in the Notification Log in your Dashboard. Notifications are important since they indicate when you can deliver your product/service to your customer. For more detailed and technical information check out our documentation HERE. "
  },
  {
    "title": "What about my Notification URL?",
    "type": 1,
    "pageTitle": "Frequently Asked Questions#",
    "url": "docs/resources/faqs#what-about-my-notification-url",
    "content": "Once you’ve got your live account, it is very important to configure your URL and receive all incoming EBANX notifications. Don’t forget to configure your URL, as some merchants have problems when moving to the live environment because they forgot to set their URLs to the new account. When you’re doing this configuration, please make sure that you’re using the right URL (your live details), not the URL from your test environment. Also, please make sure you’re using https, instead of HTTP. How you change this configuration? HERE is a link to our documentation that deals with that. "
  },
  {
    "title": "Postman Collection#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/postman",
    "content": "",
    "keywords": "Postman"
  },
  {
    "title": "Overview",
    "type": 1,
    "pageTitle": "Postman Collection#",
    "url": "docs/resources/postman#overview",
    "content": " To make the integration with the EBANX even easier, we've prepared a Postman Collection that you can populate with your own credentials and start playing with our APIs. So if you are a happy postman user, as we are, feel free to check it here . "
  },
  {
    "title": "How to use it",
    "type": 1,
    "pageTitle": "Postman Collection#",
    "url": "docs/resources/postman#how-to-use-it",
    "content": "This collection is prepared with the most relevant APIs and examples from EBANX, together with it you will find: Different set of APIs from EBANX, helping you to accept payments and make payouts;Environment variables (where you will be able to configure your integration key);Code snippets in different languages;Option to download the collection;Example to all the different payment methods per country;  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Postman Collection#",
    "url": "docs/resources/postman#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Test Credit Cards#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/testCreditCards",
    "content": "",
    "keywords": "Test credit cards"
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Test Credit Cards#",
    "url": "docs/resources/testCreditCards#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "Valid test credit cards",
    "type": 1,
    "pageTitle": "Test Credit Cards#",
    "url": "docs/resources/testCreditCards#valid-test-credit-cards",
    "content": "These are credit cards you can use to test an Approved Transaction workflow. You can use any of the following numbers in the test environment. Just don’t forget to read the tips below: CVV: use any number with three digits, except American Express which CVV is four digits;Expiration date (due date): use any date in the future.  Brand Name Code American Express amex 378282246310005 &amp; 378282749798722 Aura aura 5078601870000127985 Diners Club diners 30569309025904 Discover discover 6011111111111117 Elo elo 6362970000457013 &amp; 6362971747129170 Hipercard hipercard 6062825624254001 &amp; 6062823936268330 Visa visa 4111111111111111 &amp; 4111115666052208 MasterCard mastercard 5555555555554444 &amp; 5555556355564617 CARNET (For Mexico only) carnet 5062224607440872 Credimas (For Argentina only) credimas 5045201174402586 Naranja (For Argentina only) naranja 5895626530939221 Cabal (For Argentina only) cabal 5896578742026538 Magna (For Chile only) magna 5680095660610110  "
  },
  {
    "title": "Credit cards to simulate declines",
    "type": 1,
    "pageTitle": "Test Credit Cards#",
    "url": "docs/resources/testCreditCards#credit-cards-to-simulate-declines",
    "content": "These are credit cards you can use to test a Declined Transaction workflow. They have the same rules as the other cards: CVV: use any number with three digits, except American Express which CVV is four digits;Expiration date (due date): use any period in the future.  Brand Name Code Expected response Visa visa 4716909774636285 response: insufficientFunds Mastercard mastercard 5102026827345142 response: invalidData Discover discover 6011088896715918 response: cardExpired American Express amex 378568775709157 response: notApproved  "
  },
  {
    "title": "Test Debit Cards for Brazil",
    "type": 1,
    "pageTitle": "Test Credit Cards#",
    "url": "docs/resources/testCreditCards#test-debit-cards-for-brazil",
    "content": " Brand Card Scenario visa 4000000000001000 Approved (3DS without Challenge) visa 4000000000001091 Insufficient Funds (3DS with Challenge) visa 4000000000001042 Invalid Card or Card Type (3DS with Challenge) visa 4000000000001109 Invalid Card or Card Type (3DS without Challenge) mastercard 5200000000001096 Approved (3DS without Challenge) mastercard 5200000000001005 Insufficient Funds (3DS with Challenge) mastercard 5200000000001013 Invalid Card or Card Type (3DS with Challenge) mastercard 5200000000001104 Invalid Card or Card Type (3DS without Challenge) maestro 6759411100000008 Approved (3DS without Challenge) elo 6505050000001000 Approved (3DS without Challenge)  "
  },
  {
    "title": "Test Debit Cards for Mexico",
    "type": 1,
    "pageTitle": "Test Credit Cards#",
    "url": "docs/resources/testCreditCards#test-debit-cards-for-mexico",
    "content": "Please note that those debit card numbers will only work for Mexico. You can use any of the following numbers in the sandbox environment. These credit cards have “infinite” funds and will be always authorized. Any other card number will be declined. CVV: Use any number with three digits.Expiration date (due date): use any period in the future.  Brand Name Code Visa visa 4242424242424242 Visa visa 4012888888881881 Mastercard mastercard 5555555555554444 Mastercard mastercard 5105105105105100  "
  },
  {
    "title": "Test Customer Data#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/testCustomerData",
    "content": "",
    "keywords": "Test customer data"
  },
  {
    "title": "Argentinian test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#argentinian-test-data",
    "content": " Name Document Address Street Number City State ZIP Phone Severino Cecilio Minca Treinta 30-52135353-1 Boulevard Jorde 555 Moreno Buenos Aires C1017 +54 (362) 445-0400 Belen C. Relova Mesa 30-52135353-1 Boulevard Labaca 703 La Rioja La Rioja B1827 +54 (266) 442-4368  "
  },
  {
    "title": "Brazilian test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#brazilian-test-data",
    "content": " Name Address City State CEP Phone CPF Ana Santos Araujo Rua E, 1040 Maracana&#xFA; CE 61919-230 (85) 2284-7035 853.513.468-93 Renan Costa Silva Rua Band&#xF4;nion, 1223 Belo Horizonte MG 30230-010 (31) 7719-5565 157.167.192-79 J&#xFA;lio Cardoso Almeida Rua Ribeir&#xE3;o Preto, 422 Carapicu&#xED;ba SP 06328-110 (11) 6331-9289 922.074.588-73 Leonor Barbosa Cavalcanti Rua S&#xE3;o Pedro, 432 Formosa GO 73813-190 (61) 9060-5148 831.836.515-13 Larissa Santos Souza Rua Padre Oliv&#xE9;rio Kraemer, 1448 Rio de Janeiro RJ 20541-270 (21) 5336-9131 685.784.987-04 Thiago Cardoso Ribeiro Rua Osvaldo Ca&#xE7;ador, 1048 Bauru SP 17013-280 (14) 6117-9176 252.243.166-85 Beatriz Cardoso Pinto Rua Mariano Mingotti, 121 Araraquara SP 14802-630 (16) 5417-3520 527.137.415-72 Victor Castro Alves Rua Miguel Amado, 1804 Campo Grande MS 79073-663 (67) 3341-9574 703.766.940-76 Lucas Cavalcanti Lima Pra&#xE7;a Lu&#xED;s Gonzaga, 1511 Osasco SP 06056-432 (11) 8498-4144 723.645.557-10 Aline Correia Carvalho Rua Lu&#xED;s Domingues, 1482 Timon MA 65630-110 (99) 8856-4844 561.072.634-46  Below you can also find data to simulate a company purchase in Brazil.  Name Address City State CEP Phone CNPJ Responsible CPF F&#xE1;bricas Branco Ltda. Rua Quatorze, 1651 Americana SP 13471-261 (19) 5411-2670 67.762.675/0001-49 Luiza Alves Gomes 127.046.222-99 Mania Fitness Ltda. Servid&#xE3;o Osnildo Le&#xF4;ncio Duarte, 95 Florian&#xF3;polis SC 88066-575 (48) 2950-2330 94.065.313/0001-71 Bianca Souza 139.353.494-59 Companhia das Del&#xED;cias Com&#xE9;rcio de Alimentos Ltda. Rua Coronel Gomes Machado, 934 Niter&#xF3;i RJ 24020-108 (21) 5010-3193 67.058.441/0001-15 Breno Lima Tupi T&#xEA;xtil S.A. Rua Jorge Fernandez, 176 S&#xE3;o Paulo SP 05857-310 (11) 4763-5078 49.602.666/0001-09 Laura Pinto Souza 282.720.108-95  "
  },
  {
    "title": "Chilean test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#chilean-test-data",
    "content": " Name Document(RUT) Address Street Number City Region ZIP Phone Abelardo U. Villullas De Pascual 9882884-2 Calle Faraco 526 Gorbea Araucan&#xED;a 21458 +56(040)-1993249 Israel Sinforoso Collier Trochez 13775040-6 Boulevard Maynou 948 Caldera Atacama 31900 +56(535)-9991416  "
  },
  {
    "title": "Colombian test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#colombian-test-data",
    "content": " Name Document Address Street Number City State ZIP Phone Alba Z. De la Dehesa Escosa 4023030074 Real del Rigal 462 Bogota Huila 201837 +56(040)-1993249 Wilson Quinto Chiru Hammu 4023030074 Hispan 952 Bogota Quindio 154487 +56(040)-1993249  "
  },
  {
    "title": "Ecuatorian test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#ecuatorian-test-data",
    "content": " Name Address Street Number City State ZIP Phone Angela Pricope Arrey Calle Ferrate 284 Quito Los Rios 76831 +593(444)-3004397 Calvino Rendon Cummins Oyono 459 Manta Manab&#xED; 70167 +593(131)-0779331  "
  },
  {
    "title": "Mexican test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#mexican-test-data",
    "content": " Name Address Street Number City Region ZIP Phone Manuela E. Beyer Rocabado Oyono 882 Hermosillo Sonora 48822 (040) 577-7687 Federico Aiello Giron Privada Germa 422 Campeche Campeche 85572 (343) 244-2049  "
  },
  {
    "title": "Peruvian test data",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#peruvian-test-data",
    "content": " Name Document (DNI) Address Street Number City Region ZIP Phone &#xD3;liver C. Diez Castro 9882884 Los Incas 35 Puno Puno 83108 (51) 222-6212 Casandra Alexia Mart&#xED;n Mireles 13775040 Prolongaci&#xF3;n Alfonso Ugarte 609 Chimbote Ancash 17144 (51) 988-7750  "
  },
  {
    "title": "Getting help",
    "type": 1,
    "pageTitle": "Test Customer Data#",
    "url": "docs/resources/testCustomerData#getting-help",
    "content": "We hope this article was enlightening, but in case we’ve failed to take out your doubts you have the following options to keep on seeking for answers: If you’re not our partner yet and would like to know more about our prices and conditions please fill ou this form and our comercial team will get in touch with you.In case you’re already our partner please get in touch with our support team at integration@ebanx.com. "
  },
  {
    "title": "EBANX Integration Testing#",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations",
    "content": "",
    "keywords": "UX Recommendation"
  },
  {
    "title": "Overview",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#overview",
    "content": "This document has been created with the objective of helping EBANX merchants with the validation of some common fields. For each country you'll find the local equivalent for each field in the Translation column, a description of the validations applied in each local scenario and the REGEX recommended, where applicable. "
  },
  {
    "title": "Brazil",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#brazil",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email Email Document Customer document CPF validation algorithm - CPF validation Javascript example CPF/CNPJ String Name Customer name Only characters - not numbers Nome Completo String Phone Customer phone Numbers and special characters Telefone String Zipcode Customer zipcode Use the zipcode operation: Click here for more details the pattern is XXXXX-XXX all number. C&#xF3;digo Postal String State Customer state Check the state list here Estado Select City Customer city String that can be filled by using the zipcode operation. Cidade String Address Customer adress String that can be filled by using the zipcode operation. Endere&#xE7;o String Street Number Customer street number N&#xFA;mero da Rua String Additional Information Customer additional information *Optional but important for shipping Informa&#xE7;&#xF5;es Adicionais String  "
  },
  {
    "title": "México",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#méxico",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email Email Name Customer name Nombre String Phone Customer phone Numbers and special characters Tel&#xE9;fono String Zipcode Customer zipcode C&#xF3;digo Postal String State Customer state Estado String City Customer city Ciudad String Address Customer adress Calle String Street Number Customer Street Number N&#xFA;mero String  "
  },
  {
    "title": "Argentina",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#argentina",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email String Name Customer name Nombre String Document Customer document For CUIT/CUIL/CDI length must be 11 numeric digits. For DNI length goes from 7 or 8 numeric digits. Email String Phone Customer phone Tel&#xE9;fono String Zipcode Customer zipcode C&#xF3;digo Postal String State Customer state Estado String City Customer city Ciudad String Address Customer adress Calle String Street Number Customer Street Number N&#xFA;mero String  "
  },
  {
    "title": "Colombia",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#colombia",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email String Name Customer name Nombre String Document Customer document NIT (N&#xFA;mero de Identificaci&#xF3;n Tributaria) &#x2013; Lenght of 9 to 10 digits. REGEX: !/^\\d{9,15}$/ CC (C&#xE9;dula de Ciudadan&#xED;a) &#x2013; Lenght of 5 to 15 digits. CE (C&#xE9;dula de Extranjer&#xED;a) &#x2013; Lenght of 1 to 6 digits. Email String Phone Customer phone Tel&#xE9;fono String Zipcode Customer zipcode C&#xF3;digo Postal String State Customer state Estado String City Customer city Ciudad String Address Customer adress Calle String Street Number Customer Street Number N&#xFA;mero String  "
  },
  {
    "title": "Peru",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#peru",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email String Name Customer name Nombre String Document Customer document Length must be 8,9 or 11 digits. 10 digits is not a valid one. DNI String Phone Customer phone Tel&#xE9;fono String Zipcode Customer zipcode C&#xF3;digo Postal String State Customer state Estado String City Customer city Ciudad String Address Customer adress Calle String Street Number Customer Street Number N&#xFA;mero String  "
  },
  {
    "title": "Chile",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#chile",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email String Name Customer name Nombre String Document Customer document Mask: x.xxx.xxx &#x2013; y (8 d&#xED;gitos) xx.xxx.xxx &#x2013; y (9 d&#xED;gitos) Email String Phone Customer phone Telefone String Zipcode Customer zipcode C&#xF3;digo Postal String State Customer state Estado String City Customer city Ciudad String Address Customer adress Calle String Street Number Customer Street Number N&#xFA;mero String  "
  },
  {
    "title": "Ecuador",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#ecuador",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email String Name Customer name Nombre String Phone Customer phone Tel&#xE9;fono String  "
  },
  {
    "title": "Bolivia",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#bolivia",
    "content": " Field Description Validation Translation Type Email Customer email Use an input type email Email String Name Customer name Nombre String Phone Customer phone Tel&#xE9;fono String  "
  },
  {
    "title": "Additional Resources",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#additional-resources",
    "content": ""
  },
  {
    "title": "Fields Regex",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#fields-regex",
    "content": " Country Field Regex Chile Document (RUT) ^(\\d{1,3}(\\.?\\d{3}){2})\\-?([\\dkK])$ Argentina Document (DNI) ^[A-z]?\\d{8}[A-z]$ Colombia Document (NIT) !/^\\d{9,15}$/ Brazil Zipcode ^\\d{5}-?\\d{3}$ Brazil Email ^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$  "
  },
  {
    "title": "Payment methods logos",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#payment-methods-logos",
    "content": "Click Here to get all the logos from EBANX payment methods "
  },
  {
    "title": "Exchange operation",
    "type": 1,
    "pageTitle": "EBANX Integration Testing#",
    "url": "docs/resources/ux-recommendations#exchange-operation",
    "content": "Use the EBANX exchange operation to show the price in local currency if your products are all in USD/EUR. Click Here to know more about it. "
  },
  {
    "title": "UX Recommendations for Argentina",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-argentina",
    "content": "",
    "keywords": "Argentina UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Argentina. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: Card and DebitRapiPagoPagoFacilCupon de Pagos "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both Field and Placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Argentina. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprisesIn Argentina, the customer is subject to 2 different taxes, being \"IVA\" and \"Imposto País\". If you have any questions, please refer to your account manager or business development representative.It's important to show any additional amount to the customer. When presenting the taxes, you need to offer a short explanation on them:IVA: \"Note que en base a Ley N 24.430 se agrega un 21% de IVA al valor de esta compra\"Imposto País: \"Según la Ley 27.541 y el decreto 99/2019, puede incluir un porcentaje de 8% o 30% sobre el valor de la transacción en pesos, dependiendo del tipo de bienes / servicios adquiridos.\"When dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#personal-information",
    "content": " Field Translation Placeholder Full Name payment.name Nombre y Apellido Email payment.email Correo Electr&#xF3;nico Phone number payment.phone_number Tel&#xE9;fono Fijo o Celular Document payment.document N&#xFA;mero del Documento  "
  },
  {
    "title": "Credit and Debit Information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#credit-and-debit-information",
    "content": " Field Translation Placeholder Cardholder Name payment.creditcard.card_name Nombre del titular Como en la tarjeta Card Number payment.creditcard.card_number N&#xFA;mero de tarjeta Expiration Date payment.creditcard.card_due_date Fecha de expiraci&#xF3;n MM/AAAA CVV payment.creditcard.card_cvv C&#xF3;digo de seguridad (CVV) Installments payment.instalments Cuotas  "
  },
  {
    "title": "Billing Address Information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#billing-address-information",
    "content": "These fields are needed for credit and debit card transactions only.  Field Translation Placeholder Zipcode payment.zipcode C&#xF3;digo postal Country payment.country Pa&#xED;s Selecciona tu Pa&#xED;s State payment.state Provincia Selecciona tu Provincia City payment.city Ciudad Address payment.address Direcci&#xF3;n Calle, Avenida o Otro Street Number payment.street_number N&#xFA;mero  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number Length of 10 digits, numeric only. This field is composed of two parts being it: - Area code (2 to 4 digits) - Phone number (4 to 6 digits) Mask: XXXXXXXXXX REGEX: ^[0-9]{10}$ Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono no es v&#xE1;lido Document payment.document DNI: Length of 7 or 8 digits, numeric only. Mask: 9.999.999 or 99.999.999 CUIT/CUIL/CDI: Length of 11 digits, numeric only. Mask: 99-99999999-9 Empty field : Este campo es requerido Invalid format : Este documento no es v&#xE1;lido  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#credit-card-information",
    "content": " Field name and parameter Validations Error messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: https://developers.ebanx.com/api-reference/ebanx-payment-api/payment-reference/validation-rules Empty field: Este campo es requerido Invalid format: Esta tarjeta no es v&#xE1;lida Expiration Date payment.creditcard.card_due_date Mask: 99/9999 REGEX: ^(0[1-9]&amp;#124;1[0-2])\\/([0-9]{4})$ Empty field: Este campo es requerido Invalid format: Esta fecha no es v&#xE1;lida CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo es requerido Invalid format: El c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#billing-address-information-1",
    "content": " Field name and parameter Validations Error messages Zip Code payment.zipcode 6-8 digits, consisting of the following parts: - Position 1: single letter, identifying the State (provincia). - Position 2 to 5: 4 numbers, identifying the the town or the city - Position 6 to 8: 3 letters, identifying the side of a city block. REGEX: [a-zA-Z]{1}[0-9]{4}[a-zA-Z]{3} Empty field: Este campo es requerido Invalid format: Este c&#xF3;digo postal parece estar incorrecto State payment.state Buenos Aires Santa Cruz Chubut R&#xED;o Negro C&#xF3;rdoba Salta Mendoza La Pampa Santiago del Estero Santa F&#xE9; Catamarca Chaco Neuqu&#xE9;n La Rioja San Juan Corrientes Entre R&#xED;os San Luis Formosa Jujuy Misiones Tucum&#xE1;n Tierra del Fuego e Islas del Atl&#xE1;ntico Sur, Ant&#xE1;rtida e Ilhas do Atl&#xE2;ntico Sul Ciudad de Buenos Aires Empty field: Este campo es requerido Invalid format: Esta provincia parece estar incorrecta  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. phone_number_validation.jsCopyfunction validatePhoneNumber(phoneNumber){ const re = /^[0-9]{10}$/; return re.test(String(phoneNumber));} zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[a-zA-Z]{1}[0-9]{4}[a-zA-Z]{3}/; return re.test(String(zipcode));} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#personal-information-2",
    "content": "PreviewInformaciones personalesTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *Tipo de documentoCUITTipo de documentoElije un documentoNúmero del Documento *Número del Documento *Live code editorfunction UXAR(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); const [documentError, setDocumentError] = React.useState(false); const documents = [ { value: 'CUIT', label: 'CUIT', }, { value: 'CUIL', label: 'CUIL', }, { value: 'DNI', label: 'DNI', }, ]; const handleChange = (event) => { setDocument(event.target.value); }; const [document, setDocument] = React.useState('CUIT'); function validatePhoneNumber(e) { if (/^[0-9]{10}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } function validateDocument(e) { if (/^[0-9]{8}$/.test(String(e.target.value)) || !e.target.value){ setDocumentError(false); }else{ setDocumentError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> <Grid item container spacing={3}> <Grid item xs={6}> <TextField id=\"outlined-select-document\" select label=\"Tipo de documento\" value={document} onChange={handleChange} helperText=\"Elije un documento\" variant=\"outlined\" fullWidth > {documents.map((option) => ( <MenuItem key={option.value} value={option.value}> {option.label} </MenuItem> ))} </TextField> </Grid> <Grid item xs={6}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"Número del Documento\" fullWidth autoComplete=\"given-name\" onBlur={validateDocument} error={documentError} /> </Grid> </Grid> </Grid> </Grid> </div> ); }function UXAR(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); const [documentError, setDocumentError] = React.useState(false); const documents = [ { value: 'CUIT', label: 'CUIT', }, { value: 'CUIL', label: 'CUIL', }, { value: 'DNI', label: 'DNI', }, ]; const handleChange = (event) => { setDocument(event.target.value); }; const [document, setDocument] = React.useState('CUIT'); function validatePhoneNumber(e) { if (/^[0-9]{10}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } function validateDocument(e) { if (/^[0-9]{8}$/.test(String(e.target.value)) || !e.target.value){ setDocumentError(false); }else{ setDocumentError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> <Grid item container spacing={3}> <Grid item xs={6}> <TextField id=\"outlined-select-document\" select label=\"Tipo de documento\" value={document} onChange={handleChange} helperText=\"Elije un documento\" variant=\"outlined\" fullWidth > {documents.map((option) => ( <MenuItem key={option.value} value={option.value}> {option.label} </MenuItem> ))} </TextField> </Grid> <Grid item xs={6}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"Número del Documento\" fullWidth autoComplete=\"given-name\" onBlur={validateDocument} error={documentError} /> </Grid> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Argentina;Use the document type (\"tipo de documento\") selector to provide the adequate masks for the customer;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#card-information",
    "content": "PreviewDatos de la tarjetaTodas las informaciones abajo son requeridas.Como en la tarjeta *Como en la tarjeta *Número de tarjeta *Número de tarjeta *Fecha de Expiración *Fecha de Expiración *Código de Seguridad (CVV) *Código de Seguridad (CVV) *Cuotas1 cuota de AR$ 1200,002 cuotas de AR$ 600,00 (Total: AR$ 1200,00)3 cuotas de AR$ 400,00 (Total: AR$ 1200,00)6 cuotas de AR$ 200,50 (Total: AR$ 1200,00)9 cuotas de AR$ 133,33 (Total: AR$ 1200,00)12 cuotas de AR$ 100,00 (Total: AR$ 1200,00)Cuotas¿En cuántas cuotas deseas pagar?Información de CobroTodas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"Codigo Postal *Codigo Postal *Provincia *Provincia *Ciudad *Ciudad *Dirección *Dirección *Número *Número *ComplementoComplementoOpcionalLive code editorfunction UXAR(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 cuota de AR$ 1200,00</option> <option key={1} value={1}>2 cuotas de AR$ 600,00 (Total: AR$ 1200,00)</option> <option key={1} value={1}>3 cuotas de AR$ 400,00 (Total: AR$ 1200,00)</option> <option key={1} value={1}>6 cuotas de AR$ 200,50 (Total: AR$ 1200,00)</option> <option key={1} value={1}>9 cuotas de AR$ 133,33 (Total: AR$ 1200,00)</option> <option key={1} value={1}>12 cuotas de AR$ 100,00 (Total: AR$ 1200,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"state\" name=\"provincia\" label=\"Provincia\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXAR(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 cuota de AR$ 1200,00</option> <option key={1} value={1}>2 cuotas de AR$ 600,00 (Total: AR$ 1200,00)</option> <option key={1} value={1}>3 cuotas de AR$ 400,00 (Total: AR$ 1200,00)</option> <option key={1} value={1}>6 cuotas de AR$ 200,50 (Total: AR$ 1200,00)</option> <option key={1} value={1}>9 cuotas de AR$ 133,33 (Total: AR$ 1200,00)</option> <option key={1} value={1}>12 cuotas de AR$ 100,00 (Total: AR$ 1200,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"state\" name=\"provincia\" label=\"Provincia\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsBe careful to show installment (Cuotas) options only for Credit Card payments, since they are not available for Debit Card paymentsOffer a tooltip explaining CVV: \"Código de 3 números situado en el reverso de la tarjeta. En las tarjetas AMEX, el código es de 4 números se sitúa en la frente de la tarjeta\" "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Argentina",
    "url": "docs/resources/ux-recommendations/ux-argentina#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizableSince many credit card brands are available in Argentina, you can choose to show them partially in the payment selection, and show them fully when the customer chooses this payment method Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Cuotas), it can be interesting to show it together with the total amount (Check Total Order Amount)Since many credit card brands are available in Argentina, you can choose to show them partially in the payment selection, and show them fully when the customer chooses this payment method Debit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionPlease note that installments are not available for debit card payments Billeteiras digitales selection#  Multiple E-wallets A single e-wallet  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection.If you have a single e-wallet available, you can make the experience more fluid by showing the ewallet name and logoIf you have more than one e-wallet, you can group them into the same group as \"Billeteras Digitales\", showing their brands and offering a selection inside the payment method Efectivo selection#  RapiPago PagoFacil Otros cupones  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection.Since different places are available for the customer to pay, three additional options are displayed.In \"Otros Cupones\", a short disclaimer needs to be shown, explaining what places are available to pay. "
  },
  {
    "title": "UX Recommendations for Bolivia",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-bolivia",
    "content": "",
    "keywords": "Bolivia UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Bolivia. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: PagosNet "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both Field and Placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Bolivia. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprisesWhen dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#personal-information",
    "content": " Field Translation Placeholder E-mail Correo electr&#xF3;nico Full name Nombres y Apellidos Phone number Tel&#xE9;fono Fijo o Celular  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number 10 digits Mask: XX XXX XXXXX REGEX: ^[0-9]{5}[0-9]{5}$ Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#personal-information-2",
    "content": "PreviewInformaciones personalesTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono Fijo o Celular *Teléfono Fijo o Celular *Live code editorfunction UXBO(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono Fijo o Celular\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> ); }function UXBO(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono Fijo o Celular\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Bolivia;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Bolivia",
    "url": "docs/resources/ux-recommendations/ux-bolivia#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyLoad the list of payment methods with the first option already selected by defaultMake the selector, being it a card or a radio list, to look clickableYou can use icons to make the payment method more recognizable PagosNet selection#  InstructionsYou can offer a short explanation when the payment method is selected.Inform where the voucher can be paid, whether in text or with images.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Brazil",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-brazil",
    "content": "",
    "keywords": "Brazil UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Brazil. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: Credit CardsDebit CardsBoletoBank TransferOnline Debit "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both Field and Placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Brazil. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprisesWhen dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#personal-information",
    "content": " Field Translation Placeholder Full Name payment.name Nome completo Email payment.email Email Phone number payment.phone_number Telefone Fixo ou Celular Document payment.document CPF ou CPNJ  "
  },
  {
    "title": "Credit and Debit Information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#credit-and-debit-information",
    "content": " Field Translation Placeholder Cardholder Name payment.creditcard.card_name Nome do titular Como impresso no cart&#xE3;o Card Number payment.creditcard.card_number N&#xFA;mero do Cart&#xE3;o Expiration Date payment.creditcard.card_due_date Validade do Cart&#xE3;o MM/AAAA CVV payment.creditcard.card_cvv C&#xF3;digo de Seguran&#xE7;a (CVV) Installments payment.instalments Parcelamento Selecione o n&#xFA;mero de parcelas  "
  },
  {
    "title": "Billing Address Information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#billing-address-information",
    "content": "These fields are needed for credit and debit card transactions only.  Field Translation Placeholder Zipcode payment.zipcode CEP Country payment.country Pa&#xED;s Selecione seu pa&#xED;s State payment.state Estado Selecione seu estado City payment.city Cidade Address payment.address Endere&#xE7;o Rua, avenida, etc Street Number payment.street_number N&#xFA;mero  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo &#xE9; obrigat&#xF3;rio Invalid format : Este email parece estar incorreto Phone Number payment.phone_number 10 digits Mask: XX XXX XXXXX REGEX: ^[0-9]{5}[0-9]{5}$ Empty field: Este campo &#xE9; obrigat&#xF3;rio Invalid format: Este telefone parece estar incorreto Document payment.document CPF: Length of 11 digits, numeric only. Mask: (99) 99999-9999 Empty field: Este campo &#xE9; obrigat&#xF3;rio Invalid format: Este documento parece estar incorreto  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#credit-card-information",
    "content": " Field name and parameter Validations Error messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: https://developers.ebanx.com/api-reference/ebanx-payment-api/payment-reference/validation-rules Empty field: Este campo &#xE9; obrigat&#xF3;rio Invalid format: O n&#xFA;mero do cart&#xE3;o parece estar incorreto Expiration Date payment.creditcard.card_due_date Mask: 99/9999 REGEX: ^(0[1-9]|1[0-2])\\/([0-9]{4})$ Empty field: Este campo &#xE9; obrigat&#xF3;rio Invalid format: A data de validade parece estar incorreta CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo &#xE9; obrigat&#xF3;rio Invalid format: O c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#billing-address-information-1",
    "content": " Field name and parameter Validations Error messages Zip Code payment.zipcode 8 digits, numeric only Simple regex to validate 8 numbers without the dash ( - ) [0-9]{8} Empty field: Este campo &#xE9; obrigat&#xF3;rio Invalid format: O CEP parece estar incorreto State payment.state [[&#x201C;Acre&#x201D;, &#x201C;AC&#x201D;], [&#x201C;Alagoas&#x201D;, &#x201C;AL&#x201D;], [&#x201C;Amap&#xE1;&#x201C;, &#x201C;AP&#x201D;], [&#x201C;Amazonas&#x201D;, &#x201C;AM&#x201D;], [&#x201C;Bahia&#x201D;, &#x201C;BA&#x201D;], [&#x201C;Cear&#xE1;&#x201C;, &#x201C;CE&#x201D;], [&#x201C;Distrito Federal&#x201D;, &#x201C;DF&#x201D;], [&#x201C;Esp&#xED;rito Santo&#x201D;, &#x201C;ES&#x201D;], [&#x201C;Goi&#xE1;s&#x201D;, &#x201C;GO&#x201D;], [&#x201C;Maranh&#xE3;o&#x201D;, &#x201C;MA&#x201D;], [&#x201C;Mato Grosso&#x201D;, &#x201C;MT&#x201D;], [&#x201C;Mato Grosso do Sul&#x201D;, &#x201C;MS&#x201D;], [&#x201C;Minas Gerais&#x201D;, &#x201C;MG&#x201D;], [&#x201C;Par&#xE1;&#x201C;, &#x201C;PA&#x201D;], [&#x201C;Para&#xED;ba&#x201D;, &#x201C;PB&#x201D;], [&#x201C;Paran&#xE1;&#x201C;, &#x201C;PR&#x201D;], [&#x201C;Pernambuco&#x201D;, &#x201C;PE&#x201D;], [&#x201C;Piau&#xED;&#x201C;, &#x201C;PI&#x201D;], [&#x201C;Rio de Janeiro&#x201D;, &#x201C;RJ&#x201D;], [&#x201C;Rio Grande do Norte&#x201D;, &#x201C;RN&#x201D;], [&#x201C;Rio Grande do Sul&#x201D;, &#x201C;RS&#x201D;], [&#x201C;Rond&#xF4;nia&#x201D;, &#x201C;RO&#x201D;], [&#x201C;Roraima&#x201D;, &#x201C;RR&#x201D;], [&#x201C;Santa Catarina&#x201D;, &#x201C;SC&#x201D;], [&#x201C;S&#xE3;o Paulo&#x201D;, &#x201C;SP&#x201D;], [&#x201C;Sergipe&#x201D;, &#x201C;SE&#x201D;], [&#x201C;Tocantins&#x201D;, &#x201C;TO&#x201D;]] Empty field: Invalid format:  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. phone_number_validation.jsCopyfunction validatePhoneNumber(phoneNumber){ const re = /^\\([1-9]{2}\\) (?:[2-8]|9[1-9])[0-9]{3}\\-[0-9]{4}$/; return re.test(String(phoneNumber));} zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[0-9]{8}/; return re.test(String(zipcode));} cpf_cnpj_length_validation.jsCopyvar options = { onKeyPress: function (cpf, ev, el, op) { var masks = [‘000.000.000-000’, ‘00.000.000/0000-00’]; mask = (cpf.length > 14) ? masks[1] : masks[0]; el.mask(mask, op); }}$(‘.cpfOuCnpj’).mask(‘000.000.000-000’, options); cpf_validation.jsCopyfunction validateCPF(cpf) { var number, digits, sum, i, result, equal_digits; cpf = cpf.replace(/[^\\d]+/g,''); equal_digits = 1; if (cpf.length != 11) return false; for (i = 0; i < cpf.length - 1; i++) if (cpf.charAt(i) != cpf.charAt(i + 1)){ equal_digits = 0; break; } if(equal_digits == 1) return false; number = cpf.substring(0,9); digits = cpf.substring(9); sum = 0; for (i = 10; i > 1; i--) sum += number.charAt(10 - i) * i; result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(0)) return false; number = cpf.substring(0,10); sum = 0; for (i = 11; i > 1; i--) sum += number.charAt(11 - i) * i; result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(1)) return false; return true;} cnpj_validation.jsCopyfunction validateCNPJ(cnpj) { var i, equal_digits = 1, limit, numbers, sum, pos, result, digits; cnpj = cnpj.replace(/[^\\d]+/g,''); if (cnpj.length != 14) return false; for (i = 0; i < cnpj.length - 1; i++){ if (cnpj.charAt(i) != cnpj.charAt(i + 1)){ equal_digits = 0; break; } } if(equal_digits == 1) return false; limit = cnpj.length - 2 numbers = cnpj.substring(0,limit); digits = cnpj.substring(limit); sum = 0; pos = limit - 7; for (i = limit; i >= 1; i--) { sum += numbers.charAt(limit - i) * pos--; if (pos < 2) pos = 9; } result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(0)) return false; limit = limit + 1; numbers = cnpj.substring(0,limit); sum = 0; pos = limit - 7; for (i = limit; i >= 1; i--) { sum += numbers.charAt(limit - i) * pos--; if (pos < 2) pos = 9; } result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(1)) return false; return true;} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#personal-information-2",
    "content": "PreviewInformações PessoaisTodas as informações são obrigatórias, exceto \"complemento\".Nome Completo *Nome Completo *Email *Email *Telefone *Telefone *Tipo de documentoCPFTipo de documentoCPF ou CNPJ *CPF ou CNPJ *EndereçoCEP *CEP *Estado *Selecione seu estadoAcreAlagoasAmapáAmazonasBahiaCearáDistrito FederalEspírito SantoGoiásMaranhãoMato GrossoMato Grosso do SulMinasGeraisParáParaíbaParanáPernambucoPiauíRio de JaneiroRio Grande do NorteRio Grande do SulRondôniaRoraimaSanta CatarinaSão PauloSergipeTocantinsEstado *Cidade *Cidade *Endereço *Endereço *Número *Número *ComplementoComplementoOpcionalLive code editorfunction UXBR(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); const [documentError, setDocumentError] = React.useState(false); const documents = [ { value: 'CPF', label: 'CPF', }, { value: 'CNPJ', label: 'CNPJ', }, ]; const handleDocumentChange = (event) => { setDocument(event.target.value); }; const [document, setDocument] = React.useState('CPF'); function validateDocument(e) { if(document==\"CPF\"){ if(validateCPF(String(e.target.value)) || !e.target.value){ setDocumentError(false); return; } }else{ if(validateCNPJ(String(e.target.value)) || !e.target.value){ setDocumentError(false); return; } } setDocumentError(true); } function validatePhoneNumber(e) { if (/^\\([1-9]{2}\\) (?:[2-8]|9[1-9])[0-9]{3}\\-[0-9]{4}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } function validateCPF(cpf) { var number, digits, sum, i, result, equal_digits; cpf = cpf.replace(/[^\\d]+/g,''); equal_digits = 1; if (cpf.length != 11) return false; for (i = 0; i < cpf.length - 1; i++) if (cpf.charAt(i) != cpf.charAt(i + 1)){ equal_digits = 0; break; } if(equal_digits == 1) return false; number = cpf.substring(0,9); digits = cpf.substring(9); sum = 0; for (i = 10; i > 1; i--) sum += number.charAt(10 - i) * i; result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(0)) return false; number = cpf.substring(0,10); sum = 0; for (i = 11; i > 1; i--) sum += number.charAt(11 - i) * i; result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(1)) return false; return true; } function validateCNPJ(cnpj) { var i, equal_digits = 1, limit, numbers, sum, pos, result, digits; cnpj = cnpj.replace(/[^\\d]+/g,''); if (cnpj.length != 14) return false; for (i = 0; i < cnpj.length - 1; i++){ if (cnpj.charAt(i) != cnpj.charAt(i + 1)){ equal_digits = 0; break; } } if(equal_digits == 1) return false; limit = cnpj.length - 2 numbers = cnpj.substring(0,limit); digits = cnpj.substring(limit); sum = 0; pos = limit - 7; for (i = limit; i >= 1; i--) { sum += numbers.charAt(limit - i) * pos--; if (pos < 2) pos = 9; } result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(0)) return false; limit = limit + 1; numbers = cnpj.substring(0,limit); sum = 0; pos = limit - 7; for (i = limit; i >= 1; i--) { sum += numbers.charAt(limit - i) * pos--; if (pos < 2) pos = 9; } result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(1)) return false; return true; } return ( <div> <Typography variant=\"h6\" gutterBottom>Informações Pessoais</Typography> <Typography variant=\"h7\" gutterBottom>Todas as informações são obrigatórias, exceto \"complemento\".</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nome Completo\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Email\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Telefone\" placeholder=\"Telefone fixo ou Celular\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> <Grid item container spacing={3}> <Grid item xs={6}> <TextField id=\"outlined-select-document\" select label=\"Tipo de documento\" value={document} onChange={handleDocumentChange} variant=\"outlined\" fullWidth > {documents.map((option) => ( <MenuItem key={option.value} value={option.value}> {option.label} </MenuItem> ))} </TextField> </Grid> <Grid item xs={6}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"CPF ou CNPJ\" fullWidth autoComplete=\"given-name\" onBlur={validateDocument} error={documentError} /> </Grid> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Endereço</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"zipcode\" name=\"zipcode\" label=\"CEP\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select required name=\"state\" label=\"Estado\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Selecione seu estado</option> <option>Acre</option> <option>Alagoas</option> <option>Amapá</option> <option>Amazonas</option> <option>Bahia</option> <option>Ceará</option> <option>Distrito Federal</option> <option>Espírito Santo</option> <option>Goiás</option> <option>Maranhão</option> <option>Mato Grosso</option> <option>Mato Grosso do Sul</option> <option>MinasGerais</option> <option>Pará</option> <option>Paraíba</option> <option>Paraná</option> <option>Pernambuco</option> <option>Piauí</option> <option>Rio de Janeiro</option> <option>Rio Grande do Norte</option> <option>Rio Grande do Sul</option> <option>Rondônia</option> <option>Roraima</option> <option>Santa Catarina</option> <option>São Paulo</option> <option>Sergipe</option> <option>Tocantins</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Cidade\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Endereço\" placeholder=\"Rua, avenida, etc.\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXBR(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); const [documentError, setDocumentError] = React.useState(false); const documents = [ { value: 'CPF', label: 'CPF', }, { value: 'CNPJ', label: 'CNPJ', }, ]; const handleDocumentChange = (event) => { setDocument(event.target.value); }; const [document, setDocument] = React.useState('CPF'); function validateDocument(e) { if(document==\"CPF\"){ if(validateCPF(String(e.target.value)) || !e.target.value){ setDocumentError(false); return; } }else{ if(validateCNPJ(String(e.target.value)) || !e.target.value){ setDocumentError(false); return; } } setDocumentError(true); } function validatePhoneNumber(e) { if (/^\\([1-9]{2}\\) (?:[2-8]|9[1-9])[0-9]{3}\\-[0-9]{4}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } function validateCPF(cpf) { var number, digits, sum, i, result, equal_digits; cpf = cpf.replace(/[^\\d]+/g,''); equal_digits = 1; if (cpf.length != 11) return false; for (i = 0; i < cpf.length - 1; i++) if (cpf.charAt(i) != cpf.charAt(i + 1)){ equal_digits = 0; break; } if(equal_digits == 1) return false; number = cpf.substring(0,9); digits = cpf.substring(9); sum = 0; for (i = 10; i > 1; i--) sum += number.charAt(10 - i) * i; result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(0)) return false; number = cpf.substring(0,10); sum = 0; for (i = 11; i > 1; i--) sum += number.charAt(11 - i) * i; result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(1)) return false; return true; } function validateCNPJ(cnpj) { var i, equal_digits = 1, limit, numbers, sum, pos, result, digits; cnpj = cnpj.replace(/[^\\d]+/g,''); if (cnpj.length != 14) return false; for (i = 0; i < cnpj.length - 1; i++){ if (cnpj.charAt(i) != cnpj.charAt(i + 1)){ equal_digits = 0; break; } } if(equal_digits == 1) return false; limit = cnpj.length - 2 numbers = cnpj.substring(0,limit); digits = cnpj.substring(limit); sum = 0; pos = limit - 7; for (i = limit; i >= 1; i--) { sum += numbers.charAt(limit - i) * pos--; if (pos < 2) pos = 9; } result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(0)) return false; limit = limit + 1; numbers = cnpj.substring(0,limit); sum = 0; pos = limit - 7; for (i = limit; i >= 1; i--) { sum += numbers.charAt(limit - i) * pos--; if (pos < 2) pos = 9; } result = sum % 11 < 2 ? 0 : 11 - sum % 11; if (result != digits.charAt(1)) return false; return true; } return ( <div> <Typography variant=\"h6\" gutterBottom>Informações Pessoais</Typography> <Typography variant=\"h7\" gutterBottom>Todas as informações são obrigatórias, exceto \"complemento\".</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nome Completo\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Email\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Telefone\" placeholder=\"Telefone fixo ou Celular\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> <Grid item container spacing={3}> <Grid item xs={6}> <TextField id=\"outlined-select-document\" select label=\"Tipo de documento\" value={document} onChange={handleDocumentChange} variant=\"outlined\" fullWidth > {documents.map((option) => ( <MenuItem key={option.value} value={option.value}> {option.label} </MenuItem> ))} </TextField> </Grid> <Grid item xs={6}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"CPF ou CNPJ\" fullWidth autoComplete=\"given-name\" onBlur={validateDocument} error={documentError} /> </Grid> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Endereço</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"zipcode\" name=\"zipcode\" label=\"CEP\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select required name=\"state\" label=\"Estado\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Selecione seu estado</option> <option>Acre</option> <option>Alagoas</option> <option>Amapá</option> <option>Amazonas</option> <option>Bahia</option> <option>Ceará</option> <option>Distrito Federal</option> <option>Espírito Santo</option> <option>Goiás</option> <option>Maranhão</option> <option>Mato Grosso</option> <option>Mato Grosso do Sul</option> <option>MinasGerais</option> <option>Pará</option> <option>Paraíba</option> <option>Paraná</option> <option>Pernambuco</option> <option>Piauí</option> <option>Rio de Janeiro</option> <option>Rio Grande do Norte</option> <option>Rio Grande do Sul</option> <option>Rondônia</option> <option>Roraima</option> <option>Santa Catarina</option> <option>São Paulo</option> <option>Sergipe</option> <option>Tocantins</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Cidade\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Endereço\" placeholder=\"Rua, avenida, etc.\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Brazil;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Credit and debit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#credit-and-debit-card-information",
    "content": "PreviewDados do CartãoTodas as informações abaixo são obrigatórias.Nome do Titular *Nome do Titular *Número do cartão *Número do cartão *Validade do Cartão *Validade do Cartão *Código de Segurança (CVV) *Código de Segurança (CVV) *ParcelasSelecione o número de parcelas1x de R$ 1000,002x de R$ 510,20 (Total: R$ 1020,40)3x de R$ 343,64 (Total: R$ 1030,92)4x de R$ 260,41 (Total: R$ 1041,66)5x de R$ 210,52 (Total: R$ 1052,63)6x de R$ 177,30 (Total: R$ 1063,82)7x de R$ 153,60 (Total: R$ 1075,26)8x de R$ 135,86 (Total: R$ 1086,95)9x de R$ 122,10 (Total: R$ 1098,90)10x de R$ 111,11 (Total: R$ 1111,11)11x de R$ 102,10 (Total: R$ 1123,59)12x de R$ 94,70 (Total: R$ 1136,36)ParcelasLive code editorfunction UXBR(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Dados do Cartão</Typography> <Typography variant=\"h7\" gutterBottom>Todas as informações abaixo são obrigatórias.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nome do Titular\" placeholder=\"Como impresso no cartão\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número do cartão\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Validade do Cartão\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Segurança (CVV)\" variant=\"outlined\" fullWidth inputProps={{ maxLength: 4 }} /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Parcelas\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Selecione o número de parcelas</option> <option key={1} value={1}>1x de R$ 1000,00</option> <option key={1} value={1}>2x de R$ 510,20 (Total: R$ 1020,40)</option> <option key={1} value={1}>3x de R$ 343,64 (Total: R$ 1030,92)</option> <option key={1} value={1}>4x de R$ 260,41 (Total: R$ 1041,66)</option> <option key={1} value={1}>5x de R$ 210,52 (Total: R$ 1052,63)</option> <option key={1} value={1}>6x de R$ 177,30 (Total: R$ 1063,82)</option> <option key={1} value={1}>7x de R$ 153,60 (Total: R$ 1075,26)</option> <option key={1} value={1}>8x de R$ 135,86 (Total: R$ 1086,95)</option> <option key={1} value={1}>9x de R$ 122,10 (Total: R$ 1098,90)</option> <option key={1} value={1}>10x de R$ 111,11 (Total: R$ 1111,11)</option> <option key={1} value={1}>11x de R$ 102,10 (Total: R$ 1123,59)</option> <option key={1} value={1}>12x de R$ 94,70 (Total: R$ 1136,36)</option> </TextField> </Grid> </Grid> </Grid> </div> ); }function UXBR(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Dados do Cartão</Typography> <Typography variant=\"h7\" gutterBottom>Todas as informações abaixo são obrigatórias.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nome do Titular\" placeholder=\"Como impresso no cartão\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número do cartão\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Validade do Cartão\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Segurança (CVV)\" variant=\"outlined\" fullWidth inputProps={{ maxLength: 4 }} /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Parcelas\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Selecione o número de parcelas</option> <option key={1} value={1}>1x de R$ 1000,00</option> <option key={1} value={1}>2x de R$ 510,20 (Total: R$ 1020,40)</option> <option key={1} value={1}>3x de R$ 343,64 (Total: R$ 1030,92)</option> <option key={1} value={1}>4x de R$ 260,41 (Total: R$ 1041,66)</option> <option key={1} value={1}>5x de R$ 210,52 (Total: R$ 1052,63)</option> <option key={1} value={1}>6x de R$ 177,30 (Total: R$ 1063,82)</option> <option key={1} value={1}>7x de R$ 153,60 (Total: R$ 1075,26)</option> <option key={1} value={1}>8x de R$ 135,86 (Total: R$ 1086,95)</option> <option key={1} value={1}>9x de R$ 122,10 (Total: R$ 1098,90)</option> <option key={1} value={1}>10x de R$ 111,11 (Total: R$ 1111,11)</option> <option key={1} value={1}>11x de R$ 102,10 (Total: R$ 1123,59)</option> <option key={1} value={1}>12x de R$ 94,70 (Total: R$ 1136,36)</option> </TextField> </Grid> </Grid> </Grid> </div> );} InstructionsBe careful to show installment (Parcelas) options only for Credit Card payments, since they are not available for Debit Card paymentsOffer a tooltip explaining CVV: \"Código de 3 números encontrado na parte de trás do cartão. Em cartões AMEX, o código é de 4 números e está na frente do cartão.\" "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Brazil",
    "url": "docs/resources/ux-recommendations/ux-brazil#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Parcelas), it can be interesting to show it together with the total amount (Check Total Order Amount) Debit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionBe careful to not show installment (Parcelas) options here, since they are only available for credit card payments Boleto selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. E-Wallets selection#    InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. Online Debit selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection.Since the customer is going to be redirected to her/his bank site, it's necessary to show the bank selector when the customer chooses \"Internet Banking\" Bank Transfer selection#     InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Chile",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-chile",
    "content": "",
    "keywords": "Chile UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Chile. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: ServipagMulticajaSencillitoWebpay "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both fields and placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Chile. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprises.When dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#personal-information",
    "content": " Field Translation Placeholder E-mail Correo electr&#xF3;nico Full name Nombre y Apellido Phone number Tel&#xE9;fono Fijo o Celular Document RUT  "
  },
  {
    "title": "Credit card fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#credit-card-fields",
    "content": "In the table below you can find the suggesed translations based in local e-commerce best practices.  Field Translation Cardholder name Nombre del titular Card number N&#xFA;mero de la tarjeta Expiration date Fecha de expiraci&#xF3;n CVV C&#xF3;digo de seguridad (CVV) Installments Cuotas  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#billing-address-information",
    "content": "These fields are needed for credit card transactions only.  Field Translation Placeholder Zipcode C&#xF3;digo postal Country Pa&#xED;s Seleccione tu Pa&#xED;s State Prov&#xED;ncia City Ciudad Address Direcci&#xF3;n Calle, Avenida o Otro Street Number N&#xFA;mero  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number Length of 9 digits, numeric only. Mask: XXXXX-XXX Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto Document payment.document RUT: Length of 8 or 8 digits, numeric only. Mask: 9.999.999-y or 99.999.999-y (the last digit, can be a number or a &quot;k&quot;) Empty field: Este campo es requerido Invalid format: Este documento parece estar incorrecto  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#credit-card-information",
    "content": " Field name and parameter Validations Error messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: https://developers.ebanx.com/api-reference/ebanx-payment-api/payment-reference/validation-rules Empty field: Este campo es requerido Invalid format: Esta tarjeta parece estar incorrecta Expiration Date payment.creditcard.card_due_date Mask: XX/XXXX REGEX: ^(0[1-9]|1[0-2])\\/([0-9]{4})$ Empty field: Este campo es requerido Invalid format: Esta fecha parece estar incorrecta CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo es requerido Invalid format: El c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#billing-address-information-1",
    "content": " Field name and parameter Validations Error messages Zip Code payment.zipcode 7 digits, numeric only You can provide this link to help customer to find their zip codes: https://www.correos.cl/web/guest/codigo-postal Empty field: Este campo es requerido Invalid format: Este c&#xF3;digo postal parece estar incorrecto State payment.state Ais&#xE9;n del General Carlos Ib&#xE1;&#xF1;ez del Campo Antofagasta Araucan&#xED;a Arica and Parinacota Atacama B&#xED;o-B&#xED;o Coquimbo Libertador General Bernardo O&apos;Higgins Los Lagos Los R&#xED;os Magallanes y Ant&#xE1;rtica Chilena Maule &#xD1;uble Regi&#xF3;n Metropolitana de Santiago Tarapac&#xE1; Valpara&#xED;so Know more about Chilean subdivisions: https://en.wikipedia.org/wiki/Administrative_divisions_of_Chile Empty field: Este campo es requerido Invalid format: Este estado parece estar incorrecto  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[0-9]{7}/; return re.test(String(zipcode));} document_validation.jsCopyfunction validateRUT(document) { const re = /^(\\d{1,3}(\\.?\\d{3}){2})\\-?([\\dkK])$/; return re.test(String(document));} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#personal-information-2",
    "content": "PreviewInformaciones personalesTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *RUT *RUT *Live code editorfunction UXCL(props) { const [emailError, setEmailError] = React.useState(false); const [rutError, setRUTError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } function validateRUT(e) { if (/^(\\d{1,3}(\\.?\\d{3}){2})\\-?([\\dkK])$/.test(String(e.target.value)) || !e.target.value){ setRUTError(false); }else{ setRUTError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"RUT\" fullWidth onBlur={validateRUT} error={rutError || false} /> </Grid> </Grid> </Grid> </div> ); }function UXCL(props) { const [emailError, setEmailError] = React.useState(false); const [rutError, setRUTError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } function validateRUT(e) { if (/^(\\d{1,3}(\\.?\\d{3}){2})\\-?([\\dkK])$/.test(String(e.target.value)) || !e.target.value){ setRUTError(false); }else{ setRUTError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"RUT\" fullWidth onBlur={validateRUT} error={rutError || false} /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Chile;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#card-information",
    "content": "PreviewDatos de la tarjetaTodas las informaciones abajo son requeridas.Nombre del Titular *Nombre del Titular *Número de tarjeta *Número de tarjeta *Fecha de Expiración *Fecha de Expiración *Código de Seguridad (CVV) *Código de Seguridad (CVV) *Cuotas1 mes de CL$ 1000,003 meses de CL$ 377,00 (Total: CL$ 1131,00)6 meses de CL$ 188,50 (Total: CL$ 1131,00)9 meses de CL$ 125,72 (Total: CL$ 1131,00)Cuotas¿En cuántas cuotas deseas pagar?Información de CobroTodas las informaciones abajo son requeridas, excepto \"Complemento\"Codigo Postal *Codigo Postal *EstadoAisén del General Carlos Ibáñez del Campo Antofagasta Araucanía Arica and Parinacota Atacama Bío-Bío Coquimbo Libertador General Bernardo O'Higgins Los Lagos Los Ríos Magallanes y Antártica Chilena Maule ÑubleRegión Metropolitana de Santiago Tarapacá ValparaísoEstadoCiudad *Ciudad *Dirección *Dirección *Número *Número *ComplementoComplementoOpcionalLive code editorfunction UXMX(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del Titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 mes de CL$ 1000,00</option> <option key={1} value={1}>3 meses de CL$ 377,00 (Total: CL$ 1131,00)</option> <option key={1} value={1}>6 meses de CL$ 188,50 (Total: CL$ 1131,00)</option> <option key={1} value={1}>9 meses de CL$ 125,72 (Total: CL$ 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Complemento\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select name=\"state\" label=\"Estado\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Aisén del General Carlos Ibáñez del Campo </option> <option>Antofagasta </option> <option>Araucanía </option> <option>Arica and Parinacota </option> <option>Atacama </option> <option>Bío-Bío </option> <option>Coquimbo </option> <option>Libertador General Bernardo O'Higgins </option> <option>Los Lagos </option> <option>Los Ríos </option> <option>Magallanes y Antártica Chilena </option> <option>Maule </option> <option>Ñuble</option> <option>Región Metropolitana de Santiago </option> <option>Tarapacá </option> <option>Valparaíso</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXMX(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del Titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 mes de CL$ 1000,00</option> <option key={1} value={1}>3 meses de CL$ 377,00 (Total: CL$ 1131,00)</option> <option key={1} value={1}>6 meses de CL$ 188,50 (Total: CL$ 1131,00)</option> <option key={1} value={1}>9 meses de CL$ 125,72 (Total: CL$ 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Complemento\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select name=\"state\" label=\"Estado\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Aisén del General Carlos Ibáñez del Campo </option> <option>Antofagasta </option> <option>Araucanía </option> <option>Arica and Parinacota </option> <option>Atacama </option> <option>Bío-Bío </option> <option>Coquimbo </option> <option>Libertador General Bernardo O'Higgins </option> <option>Los Lagos </option> <option>Los Ríos </option> <option>Magallanes y Antártica Chilena </option> <option>Maule </option> <option>Ñuble</option> <option>Región Metropolitana de Santiago </option> <option>Tarapacá </option> <option>Valparaíso</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsOffer a tooltip explaining CVV: \"Código de 3 números situado en el reverso de la tarjeta. En las tarjetas AMEX, el código es de 4 números se sitúa en la frente de la tarjeta\" "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Chile",
    "url": "docs/resources/ux-recommendations/ux-chile#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyLoad the list of payment methods with the first option already selected by defaultMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Cuotas), it can be interesting to show it together with the total amount (Check Total Order Amount) Multicaja selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. Webpay selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. Sencillito selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. Servipag selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Colombia",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-colombia",
    "content": "",
    "keywords": "Colombia UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Colombia. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: Card and DebitBalotoEfectyPSE "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both Field and Placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Colombia. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprisesWhen dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#personal-information",
    "content": " Field Name and Parameter Field and placeholder translation Note Full Name payment.name Nombre y Apellido Email payment.email Correo Electr&#xF3;nico Phone number payment.phone_number Tel&#xE9;fono Fijo o Celular Document payment.document N&#xFA;mero del Documento  "
  },
  {
    "title": "Credit and Debit Information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#credit-and-debit-information",
    "content": " Field Name and Parameter Field and placeholder translation Note Cardholder Name payment.creditcard.card_name Nombre del titular Como en la tarjeta Card Number payment.creditcard.card_number N&#xFA;mero de la tarjeta Expiration Date payment.creditcard.card_due_date Fecha de expiraci&#xF3;n MM/AAAA CVV payment.creditcard.card_cvv C&#xF3;digo de seguridad (CVV) Installments payment.instalments Cuotas Installments are only available for credit card payments. Know More  "
  },
  {
    "title": "Billing Address Information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#billing-address-information",
    "content": "These fields are needed for credit and debit card transactions only.  Field Name and Parameter Field and placeholder translation Note Zipcode payment.zipcode C&#xF3;digo postal Country payment.country Pa&#xED;s Seleccione tu Pa&#xED;s State payment.state Departamento City payment.city Ciudad Address payment.address Direcci&#xF3;n Street Number payment.street_number N&#xFA;mero  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#personal-information-1",
    "content": " Field Name and Parameter Validation Method and Mask Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number 10 digits, numeric only Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto Document payment.document NIT (N&#xFA;mero de Identificaci&#xF3;n Tributaria): Length of 9 to 10 digits. Regex: !/^\\d{9,15}$/ CC (C&#xE9;dula de Ciudadan&#xED;a): Length of 5 to 15 digits. CE (C&#xE9;dula de Extranjer&#xED;a):Length of 1 to 6 digits. Empty field : Este campo es requerido Invalid format : Este documento parece estar incorrecto  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#credit-card-information",
    "content": " Field Name and Parameter Validation Method and Mask Error Messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: Click here Empty field: Este campo es requerido Invalid format: Esta tarjeta parece estar incorrecta Expiration Date payment.creditcard.card_due_date Mask: 99/9999 REGEX: ^(0[1-9]&amp;#124;1[0-2])\\/([0-9]{4})$ Empty field: Este campo es requerido Invalid format: Esta fecha parece estar incorrecta CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo es requerido Invalid format: El c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#billing-address-information-1",
    "content": " Field Name and Parameter Validation Method and Mask Error messages Zip Code payment.zipcode 6 digits, numeric only REGEX: [0-9]{6} Empty field: Este campo es requerido Invalid format: Este c&#xF3;digo postal parece estar incorrecto State payment.state Amazonas Antioquia Arauca Atl&#xE1;ntico Bol&#xED;var Boyac&#xE1; Caldas Caquet&#xE1; Casanare Cauca Cesar Choc&#xF3; Cundinamarca C&#xF3;rdoba Distrito Capital de Bogot&#xE1; Guain&#xED;a Guaviare Huila La Guajira Magdalena Meta Nari&#xF1;o Norte de Santander Putumayo Quind&#xED;o Risaralda San Andr&#xE9;s, Providencia y Santa Catalina Santander Sucre Tolima Valle del Cauca Vaup&#xE9;s Vichada Empty field: Este campo es requerido Invalid format: Este estado parece estar incorrecto  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. phone_number_validation.jsCopyfunction validatePhoneNumber(phoneNumber){ const re = /^[0-9]{5}[0-9]{5}$/; return re.test(String(phoneNumber));} zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[0-9]{6}/; return re.test(String(zipcode));} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#personal-information-2",
    "content": "PreviewInformaciones personalesTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *Live code editorfunction UXMX(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); function validatePhoneNumber(e) { if (/^[0-9]{5}[0-9]{5}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> ); }function UXMX(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); function validatePhoneNumber(e) { if (/^[0-9]{5}[0-9]{5}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Colombia;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#card-information",
    "content": "PreviewDatos de la tarjetaTodas las informaciones abajo son requeridas.Nombre del titular *Nombre del titular *Número de la tarjeta *Número de la tarjeta *Fecha de Expiración *Fecha de Expiración *Código de Seguridad (CVV) *Código de Seguridad (CVV) *Cuotas1 mes de COP$ 50000002 meses de COP$ 2500000.003 meses de COP$ 1666666.674 meses de COP$ 1250000.005 meses de COP$ 1000000.006 meses de COP$ 833333.337 meses de COP$ 714285.718 meses de COP$ 625000.009 meses de COP$ 555555.5610 meses de COP$ 500000.0011 meses de COP$ 454545.4512 meses de COP$ 416666.6713 meses de COP$ 384615.3814 meses de COP$ 357142.8615 meses de COP$ 333333.3316 meses de COP$ 312500.0017 meses de COP$ 294117.6518 meses de COP$ 277777.7819 meses de COP$ 263157.8920 meses de COP$ 250000.0021 meses de COP$ 238095.2422 meses de COP$ 227272.7323 meses de COP$ 217391.3024 meses de COP$ 208333.3325 meses de COP$ 200000.0026 meses de COP$ 192307.6927 meses de COP$ 185185.1928 meses de COP$ 178571.4329 meses de COP$ 172413.7930 meses de COP$ 166666.6731 meses de COP$ 161290.3232 meses de COP$ 156250.0033 meses de COP$ 151515.1534 meses de COP$ 147058.8235 meses de COP$ 142857.1436 meses de COP$ 138888.89Cuotas¿En cuántas cuotas deseas pagar?Información de CobroTodas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"Código Postal *Código Postal *Estado *Estado *Ciudad *Ciudad *Dirección *Dirección *Número *Número *Informaciones AdicionalesInformaciones AdicionalesOpcionalLive code editorfunction UXMX(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } const amount = 5000000; const installments_max = 36; const local_currency = 'COP'; const installments_options = []; installments_options.push(<option value=\"1\">1 mes de {local_currency}$ {amount}</option>); for (let i = 2; i <= installments_max; i++) { installments_options.push(<option value=\"1\">{i} meses de {local_currency}$ {(amount/i).toFixed(2)}</option>); } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de la tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> {installments_options} </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Código Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"state\" name=\"state\" label=\"Estado\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Informaciones Adicionales\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXMX(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } const amount = 5000000; const installments_max = 36; const local_currency = 'COP'; const installments_options = []; installments_options.push(<option value=\"1\">1 mes de {local_currency}$ {amount}</option>); for (let i = 2; i <= installments_max; i++) { installments_options.push(<option value=\"1\">{i} meses de {local_currency}$ {(amount/i).toFixed(2)}</option>); } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de la tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> {installments_options} </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Código Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"state\" name=\"state\" label=\"Estado\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Informaciones Adicionales\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsBe careful to show installment (Cuotas) options only for Credit Card payments, since they are not available for Debit Card paymentsOffer a tooltip explaining CVV: \"Código de 3 números situado en el reverso de la tarjeta. En las tarjetas AMEX, el código es de 4 números se sitúa en la frente de la tarjeta\" "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Colombia",
    "url": "docs/resources/ux-recommendations/ux-colombia#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyLoad the list of payment methods with the first option already selected by defaultMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Cuotas), it can be interesting to show it together with the total amount (Check Total Order Amount) Baloto selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. PSE - Pagos Seguros en Línea selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. Efecty selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. NEQUI selection#  InstructionsAsk the customer to provide the cell phone as her/his NEQUI account. This way, the experience will be smoother for the customer.You can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Ecuador",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-ecuador",
    "content": "",
    "keywords": "Ecuador UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Ecuador. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: SafetyPay "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both fields and placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Ecuador. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprises. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#personal-information",
    "content": " Field Translation Placeholder E-mail Correo electr&#xF3;nico Full name Nombre y Apellido Phone number Tel&#xE9;fono Fijo o Celular  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number 10 digits, numeric only Mask: M-XXXX-XXXX Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#personal-information-2",
    "content": "PreviewDatos del compradorTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *Live code editorfunction UXEC(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos del comprador</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" placeholder=\"Teléfono Fijo o Celular\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> ); }function UXEC(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos del comprador</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" placeholder=\"Teléfono Fijo o Celular\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Ecuador;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Ecuador",
    "url": "docs/resources/ux-recommendations/ux-ecuador#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyLoad the list of payment methods with the first option already selected by defaultMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Efectivo selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. Transferencia selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Mexico",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-mexico",
    "content": "",
    "keywords": "Mexico UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Mexico. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: Card and DebitOxxoSpei "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both Field and Placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Mexico. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprisesWhen dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#personal-information",
    "content": " Field Translation Placeholder E-mail Correo electr&#xF3;nico Full name Nombre y Apellido Phone number Tel&#xE9;fono Fijo o Celular  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#billing-address-information",
    "content": "These fields are needed for credit and debit card transactions only.  Field Translation Placeholder Zip Code C&#xF3;digo postal Country Pa&#xED;s Seleccione tu Pa&#xED;s State Prov&#xED;ncia (Selecciona tu prov&#xED;ncia) City Ciudad (Escribe tu ciudad) Address Direcci&#xF3;n (Escribe tu direcci&#xF3;n) Street Number N&#xFA;mero  "
  },
  {
    "title": "Credit and debit card fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#credit-and-debit-card-fields",
    "content": "In the table below you can find the suggesed translations based in local e-commerce best practices.  Field Translation Placeholder Cardholder name Nombre del titular Como en la tarjeta Card number N&#xFA;mero de la tarjeta Expiration date Fecha de expiraci&#xF3;n MM/AAAA CVV C&#xF3;digo de seguridad (CVV)  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number 10 digits Mask: XX XXX XXXXX REGEX: ^[0-9]{5}[0-9]{5}$ Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#credit-card-information",
    "content": " Field name and parameter Validations Error messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: https://developers.ebanx.com/api-reference/ebanx-payment-api/payment-reference/validation-rules Empty field: Este campo es requerido Invalid format: Esta tarjeta parece estar incorrecta Expiration Date payment.creditcard.card_due_date Mask: 99/9999 REGEX: ^(0[1-9]|1[0-2])\\/([0-9]{4})$ Empty field: Este campo es requerido Invalid format: Esta fecha parece estar incorrecta CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo es requerido Invalid format: El c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#billing-address-information-1",
    "content": " Field name and parameter Validations Error messages Zip Code payment.zipcode 5 digits, numeric only REGEX: [0-9]{5} Empty field: Este campo es requerido Invalid format: Este c&#xF3;digo postal parece estar incorrecto State payment.state Aguascalientes Baja California Baja California Sur Campeche Chiapas Chihuahua Coahuila Colima Ciudad de M&#xE9;xico Durango Guanajuato Guerrero Hidalgo Jalisco M&#xE9;xico Michoac&#xE1;n Morelos Nayarit Nuevo Le&#xF3;n Oaxaca Puebla Quer&#xE9;taro de Arteaga Quintana Roo San Luis Potos&#xED; Sinaloa Sonora Tabasco Tamaulipas Tlaxcala Veracruz Yucat&#xE1;n Zacatecas Empty field: Este campo es requerido Invalid format: Este estado parece estar incorrecto  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. phone_number_validation.jsCopyfunction validatePhoneNumber(phoneNumber){ const re = /^[0-9]{5}[0-9]{5}$/; return re.test(String(phoneNumber));} zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[0-9]{5}/; return re.test(String(zipcode));} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#personal-information-2",
    "content": "PreviewInformaciones personalesTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *Live code editorfunction UXMX(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); function validatePhoneNumber(e) { if (/^[0-9]{5}[0-9]{5}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" placeholder=\"Teléfono Fijo o Celular\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> ); }function UXMX(props) { const [phoneError, setPhoneError] = React.useState(false); const [emailError, setEmailError] = React.useState(false); function validatePhoneNumber(e) { if (/^[0-9]{5}[0-9]{5}$/.test(String(e.target.value)) || !e.target.value){ setPhoneError(false); }else{ setPhoneError(true); } } function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Informaciones personales</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" placeholder=\"Teléfono Fijo o Celular\" fullWidth onBlur={validatePhoneNumber} error={phoneError || false} autoComplete=\"shipping phone-number\" /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in México;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#card-information",
    "content": "PreviewDatos de la tarjetaTodas las informaciones abajo son requeridas.Nombre del titular *Nombre del titular *Número de la tarjeta *Número de la tarjeta *Fecha de Expiración (MM/AAAA) *Fecha de Expiración (MM/AAAA) *Código de Seguridad (CVV) *Código de Seguridad (CVV) *Cuotas1 mes de MX$ 1000,003 meses de MX$ 377,00 (Total: MX$ 1131,00)6 meses de MX$ 188,50 (Total: MX$ 1131,00)9 meses de MX$ 125,72 (Total: MX$ 1131,00)Cuotas¿En cuántas cuotas deseas pagar?Información de CobroTodas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"Codigo Postal *Codigo Postal *Estado *Estado *Ciudad *Ciudad *Dirección *Dirección *Número *Número *Informaciones AdicionalesInformaciones AdicionalesOpcionalLive code editorfunction UXMX(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 9999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de la tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" // onBlur={validateCardNumber} error={cardNumberError} // InputProps={{ // inputComponent: TextMaskCustom // }} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} placeholder=\"MM/AAAA\" > {() => <TextField required id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración (MM/AAAA)\" placeholder=\"MM/AAAA\" variant=\"outlined\" fullWidth /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" placeholder=\"123\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" fullWidth inputProps={{maxLength: 4}} /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 mes de MX$ 1000,00</option> <option key={1} value={1}>3 meses de MX$ 377,00 (Total: MX$ 1131,00)</option> <option key={1} value={1}>6 meses de MX$ 188,50 (Total: MX$ 1131,00)</option> <option key={1} value={1}>9 meses de MX$ 125,72 (Total: MX$ 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"state\" name=\"state\" label=\"Estado\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Informaciones Adicionales\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXMX(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 9999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de la tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" // onBlur={validateCardNumber} error={cardNumberError} // InputProps={{ // inputComponent: TextMaskCustom // }} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} placeholder=\"MM/AAAA\" > {() => <TextField required id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración (MM/AAAA)\" placeholder=\"MM/AAAA\" variant=\"outlined\" fullWidth /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" placeholder=\"123\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" fullWidth inputProps={{maxLength: 4}} /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 mes de MX$ 1000,00</option> <option key={1} value={1}>3 meses de MX$ 377,00 (Total: MX$ 1131,00)</option> <option key={1} value={1}>6 meses de MX$ 188,50 (Total: MX$ 1131,00)</option> <option key={1} value={1}>9 meses de MX$ 125,72 (Total: MX$ 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Información de Cobro</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Informaciones Adicionales\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"state\" name=\"state\" label=\"Estado\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Informaciones Adicionales\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsBe careful to show installment (Cuotas) options only for Credit Card payments, since they are not available for Debit Card paymentsOffer a tooltip explaining CVV: \"Código de 3 números situado en el reverso de la tarjeta. En las tarjetas AMEX, el código es de 4 números se sitúa en la frente de la tarjeta\" "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Mexico",
    "url": "docs/resources/ux-recommendations/ux-mexico#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Cuotas), it can be interesting to show it together with the total amount (Check Total Order Amount) Debit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionBe careful to not show installment (Cuotas) options here, since they are only available for credit card payments Spei selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. OXXO selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Peru",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-peru",
    "content": "",
    "keywords": "Peru UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Peru. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: Credit cardPagoEfectivoSafetyPay "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both fields and placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Peru. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprises.When dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#personal-information",
    "content": " Field Translation Placeholder E-mail Correo electr&#xF3;nico Full name Nombre y Apellido Phone number Tel&#xE9;fono Fijo o Celular Document N&#xFA;mero del Documento  "
  },
  {
    "title": "Credit card fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#credit-card-fields",
    "content": "In the table below you can find the suggesed translations based in local e-commerce best practices.  Field Translation Cardholder name Nombre del titular Card number N&#xFA;mero de la tarjeta Expiration date Fecha de expiraci&#xF3;n CVV C&#xF3;digo de seguridad (CVV) Installments Cuotas  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#billing-address-information",
    "content": "These fields are needed for credit card transactions only.  Field Translation Placeholder Zipcode C&#xF3;digo postal Country Pa&#xED;s Selecciona tu Pa&#xED;s State Departamento Seleccione tu departamento City Ciudad Address Direcci&#xF3;n Street Number N&#xFA;mero  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number 10 digits Mask: MM-XXXX-XXXX Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto Document payment.document DNI: Length of 8, 9 or 11 digits. 10 digit inputs are not valid. Empty field: Este campo es requerido Invalid format: Este documento parece estar incorrecto  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#credit-card-information",
    "content": " Field name and parameter Validations Error messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: https://developers.ebanx.com/api-reference/ebanx-payment-api/payment-reference/validation-rules Empty field: Este campo es requerido Invalid format: Esta tarjeta parece estar incorrecta Expiration Date payment.creditcard.card_due_date Mask: XX/XXXX REGEX: ^(0[1-9]|1[0-2])\\/([0-9]{4})$ Empty field: Este campo es requerido Invalid format: Esta fecha parece estar incorrecta CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo es requerido Invalid format: El c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#billing-address-information-1",
    "content": " Field name and parameter Validations Error messages Zip Code payment.zipcode 5 digits, numeric only Empty field: Este campo es requerido Invalid format: Este c&#xF3;digo postal parece estar incorrecto State payment.state Amazonas Ancash Apur&#xED;mac Arequipa Ayacucho Cajamarca Callao Cusco Huancavelica Hu&#xE1;nuco Ica Jun&#xED;n La Libertad Lambayeque Lima (Provincia) Lima Loreto Madre de Dios Moquegua Pasco Piura Puno San Mart&#xED;n Tacna Tumbes Ucayali Empty field: Este campo es requerido Invalid format: Este estado parece estar incorrecto  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[0-9]{5}/; return re.test(String(zipcode));} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#personal-information-2",
    "content": "PreviewDatos del compradorTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *DNI *DNI *Live code editorfunction UXPE(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos del comprador</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"DNI\" fullWidth /> </Grid> </Grid> </Grid> </div> ); }function UXPE(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos del comprador</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"DNI\" fullWidth /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Peru;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#card-information",
    "content": "PreviewDatos de la tarjetaTodas las informaciones abajo son requeridas.Nombre del Titular *Nombre del Titular *Número de tarjeta *Número de tarjeta *Fecha de Expiración *Fecha de Expiración *Código de Seguridad (CVV) *Código de Seguridad (CVV) *Cuotas1 mes de S/. 1000,003 meses de S/. 377,00 (Total: S/. 1131,00)6 meses de S/. 188,50 (Total: S/. 1131,00)9 meses de S/. 125,72 (Total: S/. 1131,00)Cuotas¿En cuántas cuotas deseas pagar?Datos del titular de la tarjetaTodas las informaciones abajo son requeridas, excepto \"Complemento\"Codigo Postal *Codigo Postal *DepartamentoAmazonas Ancash Apurímac Arequipa AyacuchoCajamarca Callao Cusco Huancavelica Huánuco Ica Junín La Libertad Lambayeque Lima (Provincia) Lima Loreto Madre de Dios Moquegua Pasco Piura Puno San Martín TacnaTumbes UcayaliDepartamentoCiudad *Ciudad *Dirección *Dirección *Número *Número *ComplementoComplementoOpcionalLive code editorfunction UXPE(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del Titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 mes de S/. 1000,00</option> <option key={1} value={1}>3 meses de S/. 377,00 (Total: S/. 1131,00)</option> <option key={1} value={1}>6 meses de S/. 188,50 (Total: S/. 1131,00)</option> <option key={1} value={1}>9 meses de S/. 125,72 (Total: S/. 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Datos del titular de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Complemento\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select name=\"state\" label=\"Departamento\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Amazonas </option> <option>Ancash </option> <option>Apurímac </option> <option>Arequipa </option> <option>Ayacucho</option> <option>Cajamarca </option> <option>Callao </option> <option>Cusco </option> <option>Huancavelica </option> <option>Huánuco </option> <option>Ica </option> <option>Junín </option> <option>La Libertad </option> <option>Lambayeque </option> <option>Lima (Provincia) </option> <option>Lima </option> <option>Loreto </option> <option>Madre de Dios </option> <option>Moquegua </option> <option>Pasco </option> <option>Piura </option> <option>Puno </option> <option>San Martín </option> <option>Tacna</option> <option>Tumbes </option> <option>Ucayali</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXPE(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del Titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 mes de S/. 1000,00</option> <option key={1} value={1}>3 meses de S/. 377,00 (Total: S/. 1131,00)</option> <option key={1} value={1}>6 meses de S/. 188,50 (Total: S/. 1131,00)</option> <option key={1} value={1}>9 meses de S/. 125,72 (Total: S/. 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Datos del titular de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Complemento\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select name=\"state\" label=\"Departamento\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Amazonas </option> <option>Ancash </option> <option>Apurímac </option> <option>Arequipa </option> <option>Ayacucho</option> <option>Cajamarca </option> <option>Callao </option> <option>Cusco </option> <option>Huancavelica </option> <option>Huánuco </option> <option>Ica </option> <option>Junín </option> <option>La Libertad </option> <option>Lambayeque </option> <option>Lima (Provincia) </option> <option>Lima </option> <option>Loreto </option> <option>Madre de Dios </option> <option>Moquegua </option> <option>Pasco </option> <option>Piura </option> <option>Puno </option> <option>San Martín </option> <option>Tacna</option> <option>Tumbes </option> <option>Ucayali</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsOffer a tooltip explaining CVV: \"Código de 3 números situado en el reverso de la tarjeta. En las tarjetas AMEX, el código es de 4 números se sitúa en la frente de la tarjeta\"Installments are only available for Credit Card payments "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Peru",
    "url": "docs/resources/ux-recommendations/ux-peru#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyLoad the list of payment methods with the first option already selected by defaultMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Cuotas), it can be interesting to show it together with the total amount (Check Total Order Amount) PagoEfectivo selection#  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. PSE - Pagos Seguros en Línea selection (SafetyPay)#  Online Cash  InstructionsYou can offer a short explanation when the payment method is selected.You can use a clear call to action to reinforce the method selection. "
  },
  {
    "title": "UX Recommendations for Uruguay",
    "type": 0,
    "sectionRef": "#",
    "url": "docs/resources/ux-recommendations/ux-uruguay",
    "content": "",
    "keywords": "Uruguay UX Recommendations,User Experience,UX Best Practices"
  },
  {
    "title": "About this guide",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#about-this-guide",
    "content": "This page will present some resources to help you to provide a better user experience for your customers in Uruguay. The content is divided into three main sections, covering mandatory fields translations, field validation and checkout live suggestions. If you are looking for an integration guide with mandatory parameters and examples, you can find it here: Credit card "
  },
  {
    "title": "Mandatory fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#mandatory-fields",
    "content": "Below you will find all the mandatory fields, as well the translations for both fields and placeholder texts. "
  },
  {
    "title": "Validation",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#validation",
    "content": "Below you will find how to validate each mandatory field, preventing user errors and guaranteeing a correct payment processing in Uruguay. "
  },
  {
    "title": "Checkout recommendations",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#checkout-recommendations",
    "content": "Below you will find live code examples, where you can view and test the checkout experience in this country. Also, you will find recommendations to offer a better experience for your customers. "
  },
  {
    "title": "Total order amount",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#total-order-amount",
    "content": " Regular Free shipping  InstructionsAlways show values clearly, such as shipping taxes and installment number, preventing surprises.When dealing with different currencies, pay attention to how you present the difference between then. Also, if possible present exchange rate (\"Tipo de Cambio\") to the customer. "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#personal-information",
    "content": " Field Translation Placeholder E-mail Correo electr&#xF3;nico Full name Nombre y Apellido Phone number Tel&#xE9;fono Fijo o Celular Document C&#xE9;dula de Identidad  "
  },
  {
    "title": "Credit card fields",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#credit-card-fields",
    "content": "In the table below you can find the suggesed translations based in local e-commerce best practices.  Field Translation Cardholder name Nombre del titular Card number N&#xFA;mero de la tarjeta Expiration date Fecha de expiraci&#xF3;n CVV C&#xF3;digo de seguridad (CVV) Installments Cuotas  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#billing-address-information",
    "content": "These fields are needed for credit card transactions only.  Field Translation Placeholder Zipcode C&#xF3;digo postal Country Pa&#xED;s Selecciona tu Pa&#xED;s State Departamento Selecciona tu Departamento City Ciudad/Barrio Address Direcci&#xF3;n Street Number N&#xFA;mero  "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#personal-information-1",
    "content": " Field name and parameter Validations Error messages Email payment.email REGEX: ^[a-zA-Z0-9.!#$%&amp;&apos;*+/=?^_{\\|}~-]+@[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9]\\(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$ Empty field : Este campo es requerido Invalid format : Este correo electr&#xF3;nico parece estar incorrecto Phone Number payment.phone_number 8 digits, numeric only. Mask: 9999-9999 Empty field: Este campo es requerido Invalid format: Este tel&#xE9;fono parece estar incorrecto Document payment.document Length of 8 or 9, numeric only. Mask: 9.999.999-99 or 99.999.999-9 REGEX: [0-9]{9} Empty field: Este campo es requerido Invalid format: Este documento parece estar incorrecto  "
  },
  {
    "title": "Credit card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#credit-card-information",
    "content": " Field name and parameter Validations Error messages Credit card number payment.creditcard.card_number Masks: &#xA0;&#xA0;- AMEX: 9999 9999 9999 99999 &#xA0;&#xA0;- Other Brands: 9999 9999 9999 9999 Regular Expression: https://developers.ebanx.com/api-reference/ebanx-payment-api/payment-reference/validation-rules Empty field: Este campo es requerido Invalid format: Esta tarjeta parece estar incorrecta Expiration Date payment.creditcard.card_due_date Mask: XX/XXXX REGEX: ^(0[1-9]|1[0-2])\\/([0-9]{4})$ Empty field: Este campo es requerido Invalid format: Esta fecha parece estar incorrecta CVV payment.creditcard.card_cvv AMEX: 4 digits, numeric only Other Brands: 3 digits, numeric only Empty field: Este campo es requerido Invalid format: El c&#xF3;digo parece estar incompleto  "
  },
  {
    "title": "Billing address information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#billing-address-information-1",
    "content": " Field name and parameter Validations Error messages Zip Code payment.zipcode 5 digits, numeric only Empty field: Este campo es requerido Invalid format: Este c&#xF3;digo postal parece estar incorrecto State payment.state Artigas Canelones Cerro Largo Colonia Durazno Flores Florida Lavalleja Maldonado Montevideo Paysand&#xFA; R&#xED;o Negro Rivera Rocha Salto San Jos&#xE9; Soriano Tacuaremb&#xF3; Treinta y Tres Empty field: Este campo es requerido Invalid format: Este estado parece estar incorrecto  "
  },
  {
    "title": "Validation snippets",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#validation-snippets",
    "content": "You can use the following Javascript funcions to validate some of the mandatory fields requested in your checkout. zipcode_validation.jsCopyfunction validateZipcode(zipcode){ const re = /[0-9]{5}/; return re.test(String(zipcode));} "
  },
  {
    "title": "Personal information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#personal-information-2",
    "content": "PreviewDatos del compradorTodas las informaciones abajo son requeridas.Nombre y Apellido *Nombre y Apellido *Correo Electrónico *Correo Electrónico *Teléfono *Teléfono *Cédula de Identidad *Cédula de Identidad *Live code editorfunction UXUY(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos del comprador</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"Cédula de Identidad\" fullWidth /> </Grid> </Grid> </Grid> </div> ); }function UXUY(props) { const [emailError, setEmailError] = React.useState(false); function validateEmail(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setEmailError(false); }else{ setEmailError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos del comprador</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"fullName\" name=\"fullName\" label=\"Nombre y Apellido\" fullWidth autoComplete=\"given-name\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"email\" name=\"email\" label=\"Correo Electrónico\" fullWidth autoComplete=\"shipping email\" onBlur={validateEmail} error={emailError} /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"phoneNumber\" name=\"phoneNumber\" label=\"Teléfono\" fullWidth autoComplete=\"shipping phone-number\" /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"document\" name=\"document\" label=\"Cédula de Identidad\" fullWidth /> </Grid> </Grid> </Grid> </div> );} InstructionsThese fields are required for any payment method in Uruguay;If the customer provided this information in previous steps, you can reuse it to reduce friction. "
  },
  {
    "title": "Card information",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#card-information",
    "content": "PreviewDatos de la tarjetaTodas las informaciones abajo son requeridas.Nombre del Titular *Nombre del Titular *Número de tarjeta *Número de tarjeta *Fecha de Expiración *Fecha de Expiración *Código de Seguridad (CVV) *Código de Seguridad (CVV) *Cuotas1 cuota de UY $ 1000,003 cuotas de UY $ 377,00 (Total: UY $ 1131,00)6 cuotas de UY $ 188,50 (Total: UY $ 1131,00)9 cuotas de UY $ 125,72 (Total: UY $ 1131,00)Cuotas¿En cuántas cuotas deseas pagar?Datos del titular de la tarjetaTodas las informaciones abajo son requeridas, excepto \"Complemento\"Codigo Postal *Codigo Postal *DepartamentoArtigas Canelones Cerro Largo Colonia Durazno Flores Florida Lavalleja Maldonado Montevideo Paysandú Río Negro Rivera Rocha Salto San José Soriano Tacuarembó Treinta y TresDepartamentoCiudad/Barrio *Ciudad/Barrio *Dirección *Dirección *Número *Número *ComplementoComplementoOpcionalLive code editorfunction UXUY(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del Titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 cuota de UY $ 1000,00</option> <option key={1} value={1}>3 cuotas de UY $ 377,00 (Total: UY $ 1131,00)</option> <option key={1} value={1}>6 cuotas de UY $ 188,50 (Total: UY $ 1131,00)</option> <option key={1} value={1}>9 cuotas de UY $ 125,72 (Total: UY $ 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Datos del titular de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Complemento\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select name=\"state\" label=\"Departamento\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Artigas </option> <option>Canelones </option> <option>Cerro Largo </option> <option>Colonia </option> <option>Durazno </option> <option>Flores </option> <option>Florida </option> <option>Lavalleja </option> <option>Maldonado </option> <option>Montevideo </option> <option>Paysandú </option> <option>Río Negro </option> <option>Rivera </option> <option>Rocha </option> <option>Salto </option> <option>San José </option> <option>Soriano </option> <option>Tacuarembó </option> <option>Treinta y Tres</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad/Barrio\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> ); }function UXUY(props) { const [cardNumberError, setCardNumberError] = React.useState(false); function validateCardNumber(e){ if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(String(e.target.value)) || !e.target.value){ setCardNumberError(false); }else{ setCardNumberError(true); } } return ( <div> <Typography variant=\"h6\" gutterBottom>Datos de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas.</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"cardHolder\" name=\"cardHolder\" label=\"Nombre del Titular\" placeholder=\"Como en la tarjeta\" fullWidth /> </Grid> <Grid item xs={12}> <InputMask mask=\"9999 9999 9999 99999\" disabled={false} maskChar=\" \" onBlur={validateCardNumber} > {() => <TextField required variant=\"outlined\" id=\"cardNumber\" name=\"cardNumber\" type=\"text\" label=\"Número de tarjeta\" fullWidth placeholder=\"1111 1111 1111 1111\" error={cardNumberError} /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <InputMask mask=\"99/9999\" disabled={false} maskChar=\" \" > {() => <TextField required variant=\"outlined\" id=\"dueDate\" name=\"dueDate\" label=\"Fecha de Expiración\" fullWidth placeholder=\"MM/AAAA\" /> } </InputMask> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"cvv\" name=\"cvv\" label=\"Código de Seguridad (CVV)\" variant=\"outlined\" inputProps={{maxLength: 4}} fullWidth /> </Grid> <Grid item xs={12}> <TextField id=\"installments\" select label=\"Cuotas\" fullWidth SelectProps={{ native: true, }} helperText=\"¿En cuántas cuotas deseas pagar?\" variant=\"outlined\"> <option key={1} value={1}>1 cuota de UY $ 1000,00</option> <option key={1} value={1}>3 cuotas de UY $ 377,00 (Total: UY $ 1131,00)</option> <option key={1} value={1}>6 cuotas de UY $ 188,50 (Total: UY $ 1131,00)</option> <option key={1} value={1}>9 cuotas de UY $ 125,72 (Total: UY $ 1131,00)</option> </TextField> </Grid> </Grid> </Grid> <div><br/></div> <Typography variant=\"h6\" gutterBottom>Datos del titular de la tarjeta</Typography> <Typography variant=\"h7\" gutterBottom>Todas las informaciones abajo son requeridas, excepto \"Complemento\"</Typography> <div><br/></div> <Grid container xs={12} spacing={3} > <Grid item container spacing={3} > <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"postalCode\" name=\"postalCode\" label=\"Codigo Postal\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"state\" select name=\"state\" label=\"Departamento\" fullWidth SelectProps={{ native: true, }} variant=\"outlined\"> <option>Artigas </option> <option>Canelones </option> <option>Cerro Largo </option> <option>Colonia </option> <option>Durazno </option> <option>Flores </option> <option>Florida </option> <option>Lavalleja </option> <option>Maldonado </option> <option>Montevideo </option> <option>Paysandú </option> <option>Río Negro </option> <option>Rivera </option> <option>Rocha </option> <option>Salto </option> <option>San José </option> <option>Soriano </option> <option>Tacuarembó </option> <option>Treinta y Tres</option> </TextField> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"city\" name=\"city\" label=\"Ciudad/Barrio\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12}> <TextField required variant=\"outlined\" id=\"address\" name=\"address\" label=\"Dirección\" placeholder=\"Calle, Avenida o Otro\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField required id=\"streetNumber\" name=\"streetNumber\" label=\"Número\" variant=\"outlined\" fullWidth /> </Grid> <Grid item xs={12} sm={6}> <TextField id=\"additionalInfo\" name=\"additionalInfo\" label=\"Complemento\" variant=\"outlined\" fullWidth helperText=\"Opcional\" /> </Grid> </Grid> </Grid> </div> );} InstructionsOffer a tooltip explaining CVV: \"Código de 3 números situado en el reverso de la tarjeta. En las tarjetas AMEX, el código es de 4 números se sitúa en la frente de la tarjeta\"Installments are only available for Credit Card payments "
  },
  {
    "title": "Payment method selection",
    "type": 1,
    "pageTitle": "UX Recommendations for Uruguay",
    "url": "docs/resources/ux-recommendations/ux-uruguay#payment-method-selection",
    "content": " InstructionsPresent all payment methods clearlyLoad the list of payment methods with the first option already selected by defaultMake the selector, being it a card or a radio list, to look clickableYou can use icons to make each payment method more recognizable Credit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionIf using Installments (Cuotas), it can be interesting to show it together with the total amount (Check Total Order Amount) Debit card selection#  InstructionsUse terminologies that are familiar to the user (check Mandatory Fields above)You can use a clear call to action to reinforce the method selectionBe careful to not show installment (Cuotas) options here, since they are only available for credit card payments "
  }
]